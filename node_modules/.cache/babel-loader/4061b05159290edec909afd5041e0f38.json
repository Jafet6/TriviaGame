{"ast":null,"code":"var _jsxFileName = \"/home/jafet/projetos/sd-03-project-trivia-react-redux-06/src/components/GameScreen/QuestionsInfos.js\";\nimport React from 'react';\nimport { connect } from 'react-redux';\nimport { newQuestionAction } from '../../actions/newQuestionAction';\nimport { timerCountAction } from '../../actions/timerCountAction';\nimport { timeOutAction } from '../../actions/timeOutAction';\nimport { checkAnswerAction } from '../../actions/checkAnswerAction'; // import { answerChoosedAction } from '../../actions/answerChoosedAction';\n\nimport './QuestionsInfos.css';\nimport questions from '../dataTest';\nimport ShuffledButtons from './ShuffledButtons';\n\nclass QuestionsInfos extends React.Component {\n  constructor(props) {\n    super(props);\n    this.nextQuestion = this.nextQuestion.bind(this);\n  }\n\n  componentDidMount() {\n    this.interval = setInterval(() => {\n      const _this$props = this.props,\n            timerCount = _this$props.timerCount,\n            timer = _this$props.timer,\n            timeOut = _this$props.timeOut;\n\n      if (timer === 0) {\n        timeOut();\n        return clearInterval(this.interval);\n      }\n\n      return timerCount();\n    }, 1000);\n  }\n\n  componentWillUnmount() {\n    clearInterval(this.interval);\n  }\n\n  answerChoosed() {\n    const _this$props2 = this.props,\n          timer = _this$props2.timer,\n          difficulty = _this$props2.difficulty,\n          checkAnswer = _this$props2.checkAnswer;\n    console.log(timer, difficulty, checkAnswer);\n    const points = 10 + timer * difficulty;\n    checkAnswer(points);\n    return clearInterval(this.interval);\n  }\n\n  nextQuestion() {\n    this.setState(state => ({\n      questionIndex: state.questionIndex + 1\n    }));\n  }\n\n  render() {\n    const _this$props3 = this.props,\n          setNextQuestion = _this$props3.setNextQuestion,\n          questionIndex = _this$props3.questionIndex,\n          timer = _this$props3.timer; // console.log(this.props);\n\n    const results = questions.results;\n    const question = results[questionIndex];\n    return React.createElement(\"section\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 55\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"questions-container\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 56\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"questions-header\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 57\n      },\n      __self: this\n    }, React.createElement(\"span\", {\n      \"data-testid\": \"question-category\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 58\n      },\n      __self: this\n    }, question.category), React.createElement(\"p\", {\n      \"data-testid\": \"question-text\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 59\n      },\n      __self: this\n    }, question.question)), React.createElement(ShuffledButtons, {\n      answerChoosed: this.answerChoosed,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 61\n      },\n      __self: this\n    })), React.createElement(\"button\", {\n      type: \"button\",\n      onClick: setNextQuestion,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 63\n      },\n      __self: this\n    }, \"Pr\\xF3xima\"), React.createElement(\"span\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 64\n      },\n      __self: this\n    }, timer));\n  }\n\n}\n\nconst mapStateToProps = state => ({\n  questionIndex: state.questionsDataReducer.index,\n  timer: state.questionsDataReducer.timerCount,\n  wrongAnswerClass: state.questionsDataReducer.wrongAnswerClass,\n  difficulty: state.questionsDataReducer.difficulty\n});\n\nconst mapDispatchToProps = dispatch => ({\n  setNextQuestion: () => dispatch(newQuestionAction()),\n  timerCount: () => dispatch(timerCountAction()),\n  timeOut: () => dispatch(timeOutAction()),\n  checkAnswer: points => dispatch(checkAnswerAction(points)) // chosen: (points) => dispatch(answerChoosedAction(points)),\n\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(QuestionsInfos);","map":{"version":3,"sources":["/home/jafet/projetos/sd-03-project-trivia-react-redux-06/src/components/GameScreen/QuestionsInfos.js"],"names":["React","connect","newQuestionAction","timerCountAction","timeOutAction","checkAnswerAction","questions","ShuffledButtons","QuestionsInfos","Component","constructor","props","nextQuestion","bind","componentDidMount","interval","setInterval","timerCount","timer","timeOut","clearInterval","componentWillUnmount","answerChoosed","difficulty","checkAnswer","console","log","points","setState","state","questionIndex","render","setNextQuestion","results","question","category","mapStateToProps","questionsDataReducer","index","wrongAnswerClass","mapDispatchToProps","dispatch"],"mappings":"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","sourcesContent":["import React from 'react';\nimport { connect } from 'react-redux';\nimport { newQuestionAction } from '../../actions/newQuestionAction';\nimport { timerCountAction } from '../../actions/timerCountAction';\nimport { timeOutAction } from '../../actions/timeOutAction';\nimport { checkAnswerAction } from '../../actions/checkAnswerAction';\n// import { answerChoosedAction } from '../../actions/answerChoosedAction';\nimport './QuestionsInfos.css';\nimport questions from '../dataTest';\nimport ShuffledButtons from './ShuffledButtons';\n\nclass QuestionsInfos extends React.Component {\n  constructor(props) {\n    super(props);\n    this.nextQuestion = this.nextQuestion.bind(this);\n  }\n\n  componentDidMount() {\n    this.interval = setInterval(() => {\n      const { timerCount, timer, timeOut } = this.props;\n\n      if (timer === 0) {\n        timeOut();\n        return clearInterval(this.interval);\n      }\n\n      return timerCount();\n    }, 1000);\n  }\n\n  componentWillUnmount() {\n    clearInterval(this.interval);\n  }\n\n  answerChoosed() {\n    const { timer, difficulty, checkAnswer } = this.props;\n    console.log(timer, difficulty, checkAnswer);\n    const points = 10 + (timer * difficulty);\n    checkAnswer(points);\n    return clearInterval(this.interval);\n  }\n\n  nextQuestion() {\n    this.setState((state) => ({\n      questionIndex: state.questionIndex + 1,\n    }));\n  }\n\n  render() {\n    const { setNextQuestion, questionIndex, timer } = this.props;\n    // console.log(this.props);\n    const { results } = questions;\n    const question = results[questionIndex];\n    return (\n      <section>\n        <div className=\"questions-container\">\n          <div className=\"questions-header\">\n            <span data-testid=\"question-category\">{question.category}</span>\n            <p data-testid=\"question-text\">{question.question}</p>\n          </div>\n          <ShuffledButtons answerChoosed={this.answerChoosed} />\n        </div>\n        <button type=\"button\" onClick={setNextQuestion}>Pr√≥xima</button>\n        <span>{timer}</span>\n      </section>\n    );\n  }\n}\n\nconst mapStateToProps = (state) => ({\n  questionIndex: state.questionsDataReducer.index,\n  timer: state.questionsDataReducer.timerCount,\n  wrongAnswerClass: state.questionsDataReducer.wrongAnswerClass,\n  difficulty: state.questionsDataReducer.difficulty,\n});\n\nconst mapDispatchToProps = (dispatch) => ({\n  setNextQuestion: () => dispatch(newQuestionAction()),\n  timerCount: () => dispatch(timerCountAction()),\n  timeOut: () => dispatch(timeOutAction()),\n  checkAnswer: (points) => dispatch(checkAnswerAction(points)),\n  // chosen: (points) => dispatch(answerChoosedAction(points)),\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(QuestionsInfos);\n"]},"metadata":{},"sourceType":"module"}