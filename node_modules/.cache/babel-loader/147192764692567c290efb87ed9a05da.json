{"ast":null,"code":"var _jsxFileName = \"/home/jafet/projetos/sd-03-project-trivia-react-redux-06/src/components/GameScreen/QuestionsInfos.js\";\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport { newQuestionAction } from '../../actions/newQuestionAction';\nimport { timerCountAction } from '../../actions/timerCountAction';\nimport { timeOutAction } from '../../actions/timeOutAction';\nimport { checkAnswerAction } from '../../actions/checkAnswerAction';\nimport './QuestionsInfos.css';\nimport ShuffledButtons from './ShuffledButtons';\nimport NextButtonControl from './NextButtonControl';\n\nclass QuestionsInfos extends React.Component {\n  constructor(props) {\n    super(props);\n    this.answerChoosed = this.answerChoosed.bind(this);\n    this.timerFunction = this.timerFunction.bind(this);\n  }\n\n  componentDidMount() {\n    this.timerFunction();\n  }\n\n  componentWillUnmount() {\n    clearInterval(this.interval);\n  }\n\n  timerFunction() {\n    this.interval = setInterval(() => {\n      const _this$props = this.props,\n            timerCount = _this$props.timerCount,\n            timer = _this$props.timer,\n            timeOut = _this$props.timeOut;\n\n      if (timer === 0) {\n        timeOut();\n        return clearInterval(this.interval);\n      }\n\n      return timerCount();\n    }, 1000);\n  }\n\n  answerChoosed(event) {\n    const _this$props2 = this.props,\n          timer = _this$props2.timer,\n          difficulty = _this$props2.difficulty,\n          checkAnswer = _this$props2.checkAnswer,\n          questionsArr = _this$props2.questionsArr,\n          questionIndex = _this$props2.questionIndex;\n    let points = 0;\n    let assertions = 0;\n    const questionAnswer = questionsArr[questionIndex];\n\n    if (event.target.value === questionAnswer.correct_answer) {\n      points = 10 + timer * difficulty;\n      assertions = 1;\n    }\n\n    checkAnswer(points, assertions);\n    return clearInterval(this.interval);\n  }\n\n  render() {\n    const _this$props3 = this.props,\n          questionIndex = _this$props3.questionIndex,\n          timer = _this$props3.timer,\n          questionsArr = _this$props3.questionsArr;\n    const question = questionsArr[questionIndex];\n    return React.createElement(\"section\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 59\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"questions-container\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 60\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"questions-header\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 61\n      },\n      __self: this\n    }, React.createElement(\"span\", {\n      \"data-testid\": \"question-category\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 62\n      },\n      __self: this\n    }, question.category), React.createElement(\"p\", {\n      \"data-testid\": \"question-text\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 63\n      },\n      __self: this\n    }, question.question)), React.createElement(ShuffledButtons, {\n      answerChoosed: this.answerChoosed,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 65\n      },\n      __self: this\n    })), React.createElement(NextButtonControl, {\n      timerFunction: this.timerFunction,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 67\n      },\n      __self: this\n    }), React.createElement(\"span\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 68\n      },\n      __self: this\n    }, timer));\n  }\n\n}\n\nconst mapStateToProps = state => ({\n  questionIndex: state.questionsDataReducer.index,\n  questionsArr: state.apiQuestionsReducer.questions.results,\n  timer: state.questionsDataReducer.timerCount,\n  wrongAnswerClass: state.questionsDataReducer.wrongAnswerClass,\n  difficulty: state.questionsDataReducer.difficulty\n});\n\nconst mapDispatchToProps = dispatch => ({\n  setNextQuestion: () => dispatch(newQuestionAction()),\n  timerCount: () => dispatch(timerCountAction()),\n  timeOut: () => dispatch(timeOutAction()),\n  checkAnswer: (points, assertions) => dispatch(checkAnswerAction(points, assertions))\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(QuestionsInfos);\nQuestionsInfos.propTypes = {\n  questionIndex: PropTypes.number.isRequired,\n  difficulty: PropTypes.number.isRequired,\n  questionsArr: PropTypes.arrayOf(PropTypes.object).isRequired,\n  timer: PropTypes.number.isRequired,\n  timeOut: PropTypes.func.isRequired,\n  timerCount: PropTypes.func.isRequired,\n  checkAnswer: PropTypes.func.isRequired\n};","map":{"version":3,"sources":["/home/jafet/projetos/sd-03-project-trivia-react-redux-06/src/components/GameScreen/QuestionsInfos.js"],"names":["React","PropTypes","connect","newQuestionAction","timerCountAction","timeOutAction","checkAnswerAction","ShuffledButtons","NextButtonControl","QuestionsInfos","Component","constructor","props","answerChoosed","bind","timerFunction","componentDidMount","componentWillUnmount","clearInterval","interval","setInterval","timerCount","timer","timeOut","event","difficulty","checkAnswer","questionsArr","questionIndex","points","assertions","questionAnswer","target","value","correct_answer","render","question","category","mapStateToProps","state","questionsDataReducer","index","apiQuestionsReducer","questions","results","wrongAnswerClass","mapDispatchToProps","dispatch","setNextQuestion","propTypes","number","isRequired","arrayOf","object","func"],"mappings":"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","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport { newQuestionAction } from '../../actions/newQuestionAction';\nimport { timerCountAction } from '../../actions/timerCountAction';\nimport { timeOutAction } from '../../actions/timeOutAction';\nimport { checkAnswerAction } from '../../actions/checkAnswerAction';\nimport './QuestionsInfos.css';\nimport ShuffledButtons from './ShuffledButtons';\nimport NextButtonControl from './NextButtonControl';\n\nclass QuestionsInfos extends React.Component {\n  constructor(props) {\n    super(props);\n    this.answerChoosed = this.answerChoosed.bind(this);\n    this.timerFunction = this.timerFunction.bind(this);\n  }\n\n  componentDidMount() {\n    this.timerFunction();\n  }\n\n  componentWillUnmount() {\n    clearInterval(this.interval);\n  }\n\n  timerFunction() {\n    this.interval = setInterval(() => {\n      const { timerCount, timer, timeOut } = this.props;\n\n      if (timer === 0) {\n        timeOut();\n        return clearInterval(this.interval);\n      }\n\n      return timerCount();\n    }, 1000);\n  }\n\n  answerChoosed(event) {\n    const {\n      timer, difficulty, checkAnswer, questionsArr, questionIndex,\n    } = this.props;\n    let points = 0;\n    let assertions = 0;\n    const questionAnswer = questionsArr[questionIndex];\n    if (event.target.value === questionAnswer.correct_answer) {\n      points = 10 + (timer * difficulty);\n      assertions = 1;\n    }\n    checkAnswer(points, assertions);\n    return clearInterval(this.interval);\n  }\n\n  render() {\n    const { questionIndex, timer, questionsArr } = this.props;\n    const question = questionsArr[questionIndex];\n    return (\n      <section>\n        <div className=\"questions-container\">\n          <div className=\"questions-header\">\n            <span data-testid=\"question-category\">{question.category}</span>\n            <p data-testid=\"question-text\">{question.question}</p>\n          </div>\n          <ShuffledButtons answerChoosed={this.answerChoosed} />\n        </div>\n        <NextButtonControl timerFunction={this.timerFunction} />\n        <span>{timer}</span>\n      </section>\n    );\n  }\n}\n\nconst mapStateToProps = (state) => ({\n  questionIndex: state.questionsDataReducer.index,\n  questionsArr: state.apiQuestionsReducer.questions.results,\n  timer: state.questionsDataReducer.timerCount,\n  wrongAnswerClass: state.questionsDataReducer.wrongAnswerClass,\n  difficulty: state.questionsDataReducer.difficulty,\n});\n\nconst mapDispatchToProps = (dispatch) => ({\n  setNextQuestion: () => dispatch(newQuestionAction()),\n  timerCount: () => dispatch(timerCountAction()),\n  timeOut: () => dispatch(timeOutAction()),\n  checkAnswer: (points, assertions) => dispatch(checkAnswerAction(points, assertions)),\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(QuestionsInfos);\n\nQuestionsInfos.propTypes = {\n  questionIndex: PropTypes.number.isRequired,\n  difficulty: PropTypes.number.isRequired,\n  questionsArr: PropTypes.arrayOf(PropTypes.object).isRequired,\n  timer: PropTypes.number.isRequired,\n  timeOut: PropTypes.func.isRequired,\n  timerCount: PropTypes.func.isRequired,\n  checkAnswer: PropTypes.func.isRequired,\n};\n"]},"metadata":{},"sourceType":"module"}