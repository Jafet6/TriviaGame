{"ast":null,"code":"var _jsxFileName = \"/home/jafet/projetos/sd-03-project-trivia-react-redux-06/src/components/GameScreen/QuestionsInfos.js\";\nimport React from 'react';\nimport { connect } from 'react-redux';\nimport { newQuestionAction } from '../../actions/newQuestionAction';\nimport { timerCountAction } from '../../actions/timerCountAction';\nimport { timeOutAction } from '../../actions/timeOutAction';\nimport './QuestionsInfos.css';\nimport questions from '../dataTest';\nimport ShuffledButtons from './ShuffledButtons';\n\nclass QuestionsInfos extends React.Component {\n  constructor(props) {\n    super(props);\n    this.nextQuestion = this.nextQuestion.bind(this);\n  }\n\n  componentDidMount() {\n    const timerCount = this.props.timerCount;\n    this.interval = setInterval(() => timerCount(), 1000);\n  }\n\n  componentWillUnmount() {\n    clearInterval(this.interval);\n  }\n\n  nextQuestion() {\n    this.setState(state => ({\n      questionIndex: state.questionIndex + 1\n    }));\n  }\n\n  timeIsOver() {\n    const _this$props = this.props,\n          timer = _this$props.timer,\n          timeOut = _this$props.timeOut;\n\n    if (timer < 1) {\n      setTimeout(this.interval);\n      return timeOut();\n    }\n\n    return null;\n  }\n\n  render() {\n    const _this$props2 = this.props,\n          setNextQuestion = _this$props2.setNextQuestion,\n          questionIndex = _this$props2.questionIndex,\n          timer = _this$props2.timer;\n    console.log(this.props);\n    const results = questions.results;\n    const question = results[questionIndex];\n    return React.createElement(\"section\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 46\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"questions-container\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 47\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"questions-header\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 48\n      },\n      __self: this\n    }, React.createElement(\"span\", {\n      \"data-testid\": \"question-category\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 49\n      },\n      __self: this\n    }, question.category), React.createElement(\"p\", {\n      \"data-testid\": \"question-text\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 50\n      },\n      __self: this\n    }, question.question)), React.createElement(ShuffledButtons, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 52\n      },\n      __self: this\n    })), React.createElement(\"button\", {\n      type: \"button\",\n      onClick: setNextQuestion,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 54\n      },\n      __self: this\n    }, \"Pr\\xF3xima\"), React.createElement(\"span\", {\n      onChange: this.timeIsOver,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 55\n      },\n      __self: this\n    }, timer));\n  }\n\n}\n\nconst mapStateToProps = state => ({\n  questionIndex: state.questionsDataReducer.index,\n  timer: state.questionsDataReducer.timerCount\n});\n\nconst mapDispatchToProps = dispatch => ({\n  setNextQuestion: () => dispatch(newQuestionAction()),\n  timerCount: () => dispatch(timerCountAction()),\n  timeOut: () => dispatch(timeOutAction())\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(QuestionsInfos);","map":{"version":3,"sources":["/home/jafet/projetos/sd-03-project-trivia-react-redux-06/src/components/GameScreen/QuestionsInfos.js"],"names":["React","connect","newQuestionAction","timerCountAction","timeOutAction","questions","ShuffledButtons","QuestionsInfos","Component","constructor","props","nextQuestion","bind","componentDidMount","timerCount","interval","setInterval","componentWillUnmount","clearInterval","setState","state","questionIndex","timeIsOver","timer","timeOut","setTimeout","render","setNextQuestion","console","log","results","question","category","mapStateToProps","questionsDataReducer","index","mapDispatchToProps","dispatch"],"mappings":"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","sourcesContent":["import React from 'react';\nimport { connect } from 'react-redux';\nimport { newQuestionAction } from '../../actions/newQuestionAction';\nimport { timerCountAction } from '../../actions/timerCountAction';\nimport { timeOutAction } from '../../actions/timeOutAction';\nimport './QuestionsInfos.css';\nimport questions from '../dataTest';\nimport ShuffledButtons from './ShuffledButtons';\n\nclass QuestionsInfos extends React.Component {\n  constructor(props) {\n    super(props);\n    this.nextQuestion = this.nextQuestion.bind(this);\n  }\n\n  componentDidMount() {\n    const { timerCount } = this.props;\n    this.interval = setInterval(() => timerCount(), 1000);\n  }\n\n  componentWillUnmount() {\n    clearInterval(this.interval);\n  }\n\n  nextQuestion() {\n    this.setState((state) => ({\n      questionIndex: state.questionIndex + 1,\n    }));\n  }\n\n  timeIsOver() {\n    const { timer, timeOut } = this.props;\n    if (timer < 1) {\n      setTimeout(this.interval);\n      return timeOut();\n    }\n    return null;\n  }\n\n  render() {\n    const { setNextQuestion, questionIndex, timer } = this.props;\n    console.log(this.props);\n    const { results } = questions;\n    const question = results[questionIndex];\n    return (\n      <section>\n        <div className=\"questions-container\">\n          <div className=\"questions-header\">\n            <span data-testid=\"question-category\">{question.category}</span>\n            <p data-testid=\"question-text\">{question.question}</p>\n          </div>\n          <ShuffledButtons />\n        </div>\n        <button type=\"button\" onClick={setNextQuestion}>Pr√≥xima</button>\n        <span onChange={this.timeIsOver}>{timer}</span>\n      </section>\n    );\n  }\n}\n\nconst mapStateToProps = (state) => ({\n  questionIndex: state.questionsDataReducer.index,\n  timer: state.questionsDataReducer.timerCount,\n});\n\nconst mapDispatchToProps = (dispatch) => ({\n  setNextQuestion: () => dispatch(newQuestionAction()),\n  timerCount: () => dispatch(timerCountAction()),\n  timeOut: () => dispatch(timeOutAction()),\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(QuestionsInfos);\n"]},"metadata":{},"sourceType":"module"}