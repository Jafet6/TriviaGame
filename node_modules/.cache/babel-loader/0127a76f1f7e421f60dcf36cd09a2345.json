{"ast":null,"code":"import _regeneratorRuntime from\"/home/jafet/GithubPages/triviaGame/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";import _defineProperty from\"/home/jafet/GithubPages/triviaGame/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/defineProperty\";import _classCallCheck from\"/home/jafet/GithubPages/triviaGame/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";import _possibleConstructorReturn from\"/home/jafet/GithubPages/triviaGame/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";import _getPrototypeOf from\"/home/jafet/GithubPages/triviaGame/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";import _assertThisInitialized from\"/home/jafet/GithubPages/triviaGame/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/assertThisInitialized\";import _createClass from\"/home/jafet/GithubPages/triviaGame/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";import _inherits from\"/home/jafet/GithubPages/triviaGame/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";import React from'react';import CryptoJS from'crypto-js';import{Link}from'react-router-dom';import{connect}from'react-redux';import{getApiQuestions}from'../../actions/apiQuestionsAction';import{getCategoriesRequest}from'../../actions/allCategoriesAction';import{playersNameAction}from'../../actions/playersNameAction';import{getApiGravatar}from'../../actions/gravatarAction';import{gameResetAction}from'../../actions/gameResetAction';import playersInfosLocalStorage from'../../service/functionsService';import apiTokenRequest from'../../service/apiTokenRequest';import'./LoginPage.style.css';var LoginContainer=/*#__PURE__*/function(_React$Component){_inherits(LoginContainer,_React$Component);_createClass(LoginContainer,null,[{key:\"renderSettings\",value:function renderSettings(){return React.createElement(\"div\",null,React.createElement(Link,{to:\"/Settings\",\"data-testid\":\"btn-settings\"},React.createElement(\"button\",{type:\"button\",className:\"play-button\"},\"CONFIGURA\\xC7\\xD5ES\")));}}]);function LoginContainer(props){var _this;_classCallCheck(this,LoginContainer);_this=_possibleConstructorReturn(this,_getPrototypeOf(LoginContainer).call(this,props));_this.state={username:'',email:''};_this.handleChange=_this.handleChange.bind(_assertThisInitialized(_this));_this.startGame=_this.startGame.bind(_assertThisInitialized(_this));return _this;}_createClass(LoginContainer,[{key:\"componentDidMount\",value:function componentDidMount(){var _this$props=this.props,gameReset=_this$props.gameReset,apiCategoriesDispatch=_this$props.apiCategoriesDispatch;apiCategoriesDispatch();gameReset();}},{key:\"handleChange\",value:function handleChange(e){var _e$target=e.target,name=_e$target.name,value=_e$target.value;this.setState(_defineProperty({},name,value));}},{key:\"startGame\",value:function startGame(){var _this$props2,apiQuestionsDispatch,playersNamesDispatch,apiGravatarDispatch,assertions,score,name,gravatarEmail,filters,_this$state,username,email;return _regeneratorRuntime.async(function startGame$(_context){while(1){switch(_context.prev=_context.next){case 0:_this$props2=this.props,apiQuestionsDispatch=_this$props2.apiQuestionsDispatch,playersNamesDispatch=_this$props2.playersNamesDispatch,apiGravatarDispatch=_this$props2.apiGravatarDispatch,assertions=_this$props2.assertions,score=_this$props2.score,name=_this$props2.name,gravatarEmail=_this$props2.gravatarEmail,filters=_this$props2.filters;playersInfosLocalStorage(assertions,score,name,gravatarEmail);_context.next=4;return _regeneratorRuntime.awrap(apiTokenRequest().then(function(reponse){return localStorage.setItem('token',reponse.token);}));case 4:_this$state=this.state,username=_this$state.username,email=_this$state.email;playersNamesDispatch(username,email);apiGravatarDispatch(CryptoJS.MD5(email).toString().toLowerCase());apiQuestionsDispatch(localStorage.getItem('token'),filters);case 8:case\"end\":return _context.stop();}}},null,this);}},{key:\"renderLogin\",value:function renderLogin(){var _this2=this;return React.createElement(\"div\",{style:{display:'flex',flexDirection:'column'}},React.createElement(\"div\",null,React.createElement(\"label\",{className:\"login-label\",htmlFor:\"email\"},\"E-mail do Gravatar:\"),React.createElement(\"input\",{className:\"login-input\",type:\"text\",\"data-testid\":\"input-gravatar-email\",onChange:function onChange(e){return _this2.handleChange(e);},name:\"email\"})),React.createElement(\"div\",null,React.createElement(\"label\",{className:\"login-label\",htmlFor:\"username\"},\"Nome do Jogador:\"),React.createElement(\"input\",{className:\"login-input\",onChange:function onChange(e){return _this2.handleChange(e);},name:\"username\",type:\"name\",\"data-testid\":\"input-player-name\"})));}},{key:\"renderJogar\",value:function renderJogar(){var _this$state2=this.state,username=_this$state2.username,email=_this$state2.email;var disabled=false;if(username===''||email===''){disabled=true;}return React.createElement(\"div\",{style:{marginTop:'20px'}},React.createElement(Link,{to:\"/game-screen\"},React.createElement(\"button\",{className:\"play-button\",type:\"button\",\"data-testid\":\"btn-play\",disabled:disabled,onClick:this.startGame},\"JOGAR!\")));}},{key:\"render\",value:function render(){return React.createElement(\"div\",{style:{}},this.renderLogin(),this.renderJogar(),LoginContainer.renderSettings());}}]);return LoginContainer;}(React.Component);var mapStateToProps=function mapStateToProps(state){return{email:state.gravatarReducer.email,name:state.playersInfoReducer.username,filters:state.filtersReducer.filter,gravatarEmail:state.playersInfoReducer.email,score:state.questionsDataReducer.points,assertions:state.questionsDataReducer.assertions,token:state.gravatarReducer.token,apiToken:state.apiQuestionsReducer.questions};};var mapDispatchToProps=function mapDispatchToProps(dispatch){return{apiQuestionsDispatch:function apiQuestionsDispatch(token,filters){return dispatch(getApiQuestions(token,filters));},apiCategoriesDispatch:function apiCategoriesDispatch(){return dispatch(getCategoriesRequest());},apiGravatarDispatch:function apiGravatarDispatch(hash){return dispatch(getApiGravatar(hash));},playersNamesDispatch:function playersNamesDispatch(username,email){return dispatch(playersNameAction(username,email));},gameReset:function gameReset(){return dispatch(gameResetAction());}};};export default connect(mapStateToProps,mapDispatchToProps)(LoginContainer);LoginContainer.defaultProps={gravatarEmail:''};","map":{"version":3,"sources":["/home/jafet/GithubPages/triviaGame/src/components/LoginPage/LoginContainer.js"],"names":["React","CryptoJS","Link","connect","getApiQuestions","getCategoriesRequest","playersNameAction","getApiGravatar","gameResetAction","playersInfosLocalStorage","apiTokenRequest","LoginContainer","props","state","username","email","handleChange","bind","startGame","gameReset","apiCategoriesDispatch","e","target","name","value","setState","apiQuestionsDispatch","playersNamesDispatch","apiGravatarDispatch","assertions","score","gravatarEmail","filters","then","reponse","localStorage","setItem","token","MD5","toString","toLowerCase","getItem","display","flexDirection","disabled","marginTop","renderLogin","renderJogar","renderSettings","Component","mapStateToProps","gravatarReducer","playersInfoReducer","filtersReducer","filter","questionsDataReducer","points","apiToken","apiQuestionsReducer","questions","mapDispatchToProps","dispatch","hash","defaultProps"],"mappings":"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","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport CryptoJS from 'crypto-js';\nimport { Link } from 'react-router-dom';\nimport { connect } from 'react-redux';\nimport { getApiQuestions } from '../../actions/apiQuestionsAction';\nimport { getCategoriesRequest } from '../../actions/allCategoriesAction';\nimport { playersNameAction } from '../../actions/playersNameAction';\nimport { getApiGravatar } from '../../actions/gravatarAction';\nimport { gameResetAction } from '../../actions/gameResetAction';\nimport playersInfosLocalStorage from '../../service/functionsService';\nimport apiTokenRequest from '../../service/apiTokenRequest';\nimport './LoginPage.style.css';\n\nclass LoginContainer extends React.Component {\n  static renderSettings() {\n    return (\n      <div>\n        <Link to=\"/Settings\" data-testid=\"btn-settings\">\n          <button type=\"button\" className=\"play-button\">\n            CONFIGURAÇÕES\n          </button>\n        </Link>\n      </div>\n    );\n  }\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      username: '',\n      email: '',\n    };\n    this.handleChange = this.handleChange.bind(this);\n    this.startGame = this.startGame.bind(this);\n  }\n\n  componentDidMount() {\n    const { gameReset, apiCategoriesDispatch } = this.props;\n    apiCategoriesDispatch();\n    gameReset();\n  }\n\n  handleChange(e) {\n    const { name, value } = e.target;\n    this.setState({ [name]: value });\n  }\n\n  async startGame() {\n    const {\n      apiQuestionsDispatch,\n      playersNamesDispatch,\n      apiGravatarDispatch,\n      assertions,\n      score,\n      name,\n      gravatarEmail,\n      filters,\n    } = this.props;\n    playersInfosLocalStorage(assertions, score, name, gravatarEmail);\n    await apiTokenRequest().then((reponse) => localStorage.setItem('token', reponse.token));\n    const { username, email } = this.state;\n    playersNamesDispatch(username, email);\n    apiGravatarDispatch(CryptoJS.MD5(email).toString().toLowerCase());\n    apiQuestionsDispatch(localStorage.getItem('token'), filters);\n  }\n\n  renderLogin() {\n    return (\n      <div style={{ display: 'flex', flexDirection: 'column' }}>\n        <div>\n          <label className=\"login-label\" htmlFor=\"email\">\n            E-mail do Gravatar:\n          </label>\n          <input\n            className=\"login-input\"\n            type=\"text\"\n            data-testid=\"input-gravatar-email\"\n            onChange={(e) => this.handleChange(e)}\n            name=\"email\"\n          />\n        </div>\n        <div>\n          <label className=\"login-label\" htmlFor=\"username\">\n            Nome do Jogador:\n          </label>\n          <input\n            className=\"login-input\"\n            onChange={(e) => this.handleChange(e)}\n            name=\"username\"\n            type=\"name\"\n            data-testid=\"input-player-name\"\n          />\n        </div>\n      </div>\n    );\n  }\n\n  renderJogar() {\n    const { username, email } = this.state;\n    let disabled = false;\n    if (username === '' || email === '') {\n      disabled = true;\n    }\n\n    return (\n      <div style={{ marginTop: '20px' }}>\n        <Link to=\"/game-screen\">\n          <button\n            className=\"play-button\"\n            type=\"button\"\n            data-testid=\"btn-play\"\n            disabled={disabled}\n            onClick={this.startGame}\n          >\n            JOGAR!\n          </button>\n        </Link>\n      </div>\n    );\n  }\n\n  render() {\n    return (\n      <div style={{}}>\n        {this.renderLogin()}\n        {this.renderJogar()}\n        {LoginContainer.renderSettings()}\n      </div>\n    );\n  }\n}\n\nconst mapStateToProps = (state) => ({\n  email: state.gravatarReducer.email,\n  name: state.playersInfoReducer.username,\n  filters: state.filtersReducer.filter,\n  gravatarEmail: state.playersInfoReducer.email,\n  score: state.questionsDataReducer.points,\n  assertions: state.questionsDataReducer.assertions,\n  token: state.gravatarReducer.token,\n  apiToken: state.apiQuestionsReducer.questions,\n});\n\nconst mapDispatchToProps = (dispatch) => ({\n  apiQuestionsDispatch: (token, filters) => dispatch(getApiQuestions(token, filters)),\n  apiCategoriesDispatch: () => dispatch(getCategoriesRequest()),\n  apiGravatarDispatch: (hash) => dispatch(getApiGravatar(hash)),\n  playersNamesDispatch: (username, email) => dispatch(playersNameAction(username, email)),\n  gameReset: () => dispatch(gameResetAction()),\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(LoginContainer);\n\nLoginContainer.propTypes = {\n  apiQuestionsDispatch: PropTypes.func.isRequired,\n  playersNamesDispatch: PropTypes.func.isRequired,\n  apiGravatarDispatch: PropTypes.func.isRequired,\n  gameReset: PropTypes.func.isRequired,\n  assertions: PropTypes.number.isRequired,\n  score: PropTypes.number.isRequired,\n  name: PropTypes.string.isRequired,\n  gravatarEmail: PropTypes.string,\n};\n\nLoginContainer.defaultProps = {\n  gravatarEmail: '',\n};\n"]},"metadata":{},"sourceType":"module"}