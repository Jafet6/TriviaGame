{"ast":null,"code":"var _jsxFileName = \"/home/jafet/projetos/sd-03-project-trivia-react-redux-06/src/components/GameScreen/ShuffledButtons.js\";\nimport React from 'react';\nimport './ShuffledButtons.css';\nimport questions from '../dataTest';\n\nclass ShuffledButtons extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.checkAnswer = (stringToTest, objQuestion) => {\n      this.setState({\n        correctAnswerClass: 'correct-answer',\n        wrongAnswerClass: 'wrong-answer',\n        disabledBtn: true\n      }); // if (stringToTest === objQuestion.correct_answer) return console.log(stringToTest);\n      // return console.log('wrooong');\n    };\n\n    this.arrWithAllButtons = objQuestion => {\n      const incorrect_answers = objQuestion.incorrect_answers,\n            correct_answer = objQuestion.correct_answer;\n      const _this$state = this.state,\n            disabledBtn = _this$state.disabledBtn,\n            correctAnswerClass = _this$state.correctAnswerClass,\n            wrongAnswerClass = _this$state.wrongAnswerClass;\n      const allAnswers = [correct_answer, ...incorrect_answers];\n      return allAnswers;\n    };\n\n    this.shuffleAnswers = array => {\n      let currentIndex = array.length;\n      let temporaryValue = [];\n      let randomIndex;\n\n      while (currentIndex !== 0) {\n        randomIndex = Math.floor(Math.random() * currentIndex);\n        currentIndex -= 1;\n        temporaryValue = array[currentIndex];\n        array[currentIndex] = array[randomIndex];\n        array[randomIndex] = temporaryValue;\n      }\n\n      return array;\n    };\n\n    this.state = {\n      questionIndex: 0,\n      disabledBtn: false,\n      correctAnswerClass: '',\n      wrongAnswerClass: '',\n      allAnswers: []\n    };\n  }\n\n  componentDidMount() {\n    const results = questions.results;\n    const allAnswersArr = results.map(question => this.shuffleAnswers(this.arrWithAllButtons(question)));\n    this.setState({\n      allAnswers: allAnswersArr\n    });\n  }\n\n  shouldShowAnswers() {\n    return this.state.allAnswers.length > 0;\n  }\n\n  render() {\n    const results = questions.results;\n    const _this$state2 = this.state,\n          allAnswers = _this$state2.allAnswers,\n          correctAnswerClass = _this$state2.correctAnswerClass,\n          wrongAnswerClass = _this$state2.wrongAnswerClass,\n          questionIndex = _this$state2.questionIndex;\n    if (!this.shouldShowAnswers()) return null;\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 69\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"answers-buttons\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 70\n      },\n      __self: this\n    }, allAnswers[questionIndex].map(button => {\n      if (button === results[questionIndex].correct_answer) {\n        return React.createElement(\"button\", {\n          className: correctAnswerClass,\n          onClick: () => this.checkAnswer(button),\n          key: button,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 73\n          },\n          __self: this\n        }, button);\n      }\n\n      return React.createElement(\"button\", {\n        className: wrongAnswerClass,\n        onClick: () => this.checkAnswer(button),\n        key: button,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 75\n        },\n        __self: this\n      }, button);\n    })));\n  }\n\n}\n\nexport default ShuffledButtons;","map":{"version":3,"sources":["/home/jafet/projetos/sd-03-project-trivia-react-redux-06/src/components/GameScreen/ShuffledButtons.js"],"names":["React","questions","ShuffledButtons","Component","constructor","props","checkAnswer","stringToTest","objQuestion","setState","correctAnswerClass","wrongAnswerClass","disabledBtn","arrWithAllButtons","incorrect_answers","correct_answer","state","allAnswers","shuffleAnswers","array","currentIndex","length","temporaryValue","randomIndex","Math","floor","random","questionIndex","componentDidMount","results","allAnswersArr","map","question","shouldShowAnswers","render","button"],"mappings":"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","sourcesContent":["import React from 'react';\nimport './ShuffledButtons.css';\nimport questions from '../dataTest';\n\nclass ShuffledButtons extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      questionIndex: 0,\n      disabledBtn: false,\n      correctAnswerClass: '',\n      wrongAnswerClass: '',\n      allAnswers: [],\n    }\n  }\n\n  checkAnswer = (stringToTest, objQuestion) => {\n    this.setState({\n      correctAnswerClass: 'correct-answer',\n      wrongAnswerClass: 'wrong-answer',\n      disabledBtn: true,\n    });\n    // if (stringToTest === objQuestion.correct_answer) return console.log(stringToTest);\n    // return console.log('wrooong');\n  }\n  \n  arrWithAllButtons = (objQuestion) => {\n    const { incorrect_answers, correct_answer } = objQuestion;\n    const { disabledBtn, correctAnswerClass, wrongAnswerClass } = this.state;\n  \n    const allAnswers = [\n      correct_answer,\n      ...incorrect_answers,\n    ];\n    return allAnswers;\n  }\n  \n  shuffleAnswers = (array) => {\n    let currentIndex = array.length;\n    let temporaryValue = [];\n    let randomIndex;\n  \n    while (currentIndex !== 0) {\n      randomIndex = Math.floor(Math.random() * currentIndex);\n      currentIndex -= 1;\n      temporaryValue = array[currentIndex];\n      array[currentIndex] = array[randomIndex];\n      array[randomIndex] = temporaryValue;\n    }\n    return array;\n  }\n\n  componentDidMount() {\n    const { results } = questions;\n    const allAnswersArr = results.map((question) => \n      this.shuffleAnswers(this.arrWithAllButtons(question)));\n    this.setState({ allAnswers: allAnswersArr });\n  }\n\n  shouldShowAnswers() {\n    return this.state.allAnswers.length > 0\n  }\n\n  render() {\n    const { results } = questions;\n    const { allAnswers, correctAnswerClass, wrongAnswerClass, questionIndex } = this.state;\n    if (!this.shouldShowAnswers()) return null\n    return (\n      <div>\n        <div className=\"answers-buttons\">\n          {allAnswers[questionIndex].map((button) => {\n            if (button === results[questionIndex].correct_answer) {\n              return <button className={correctAnswerClass} onClick={() => this.checkAnswer(button )} key={button}>{button}</button>\n            }\n            return <button className={wrongAnswerClass} onClick={() => this.checkAnswer(button )} key={button}>{button}</button>\n          })}\n        </div>\n      </div>\n    )\n  }\n}\n\nexport default ShuffledButtons;\n"]},"metadata":{},"sourceType":"module"}