{"ast":null,"code":"var _jsxFileName = \"/home/jafet/projetos/sd-03-project-trivia-react-redux-06/src/components/GameScreen/NextButtonControl.js\";\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport { withRouter } from 'react-router-dom';\nimport { newQuestionAction } from '../../actions/newQuestionAction';\n\nclass NextButtonControl extends React.Component {\n  constructor(props) {\n    super(props);\n    this.nextPageControler = this.nextPageControler.bind(this);\n  }\n\n  nextPageControler() {\n    const _this$props = this.props,\n          setNextQuestion = _this$props.setNextQuestion,\n          timerFunction = _this$props.timerFunction,\n          questionIndex = _this$props.questionIndex,\n          allAnswers = _this$props.allAnswers,\n          history = _this$props.history;\n    console.log(this.props);\n    if (questionIndex + 1 === allAnswers.length) return history.push('/feedback');\n    setNextQuestion();\n    return timerFunction();\n  }\n\n  render() {\n    const wrongAnswerClass = this.props.wrongAnswerClass;\n    if (wrongAnswerClass === '') return null;\n    return React.createElement(\"div\", {\n      \"data-testid\": \"btn-next\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 27\n      },\n      __self: this\n    }, React.createElement(\"button\", {\n      type: \"button\",\n      onClick: this.nextPageControler,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 28\n      },\n      __self: this\n    }, \"Pr\\xF3xima\"));\n  }\n\n}\n\nconst mapStateToProps = state => ({\n  questionIndex: state.questionsDataReducer.index,\n  wrongAnswerClass: state.questionsDataReducer.wrongAnswerClass,\n  allAnswers: state.allAnswersReducer.allAnswers\n});\n\nconst mapDispatchToProps = dispatch => ({\n  setNextQuestion: () => dispatch(newQuestionAction())\n});\n\nexport default withRouter(connect(mapStateToProps, mapDispatchToProps)(NextButtonControl));\nNextButtonControl.propTypes = {\n  allAnswers: PropTypes.arrayOf(PropTypes.array).isRequired,\n  questionIndex: PropTypes.number.isRequired,\n  setNextQuestion: PropTypes.func.isRequired,\n  timerFunction: PropTypes.func.isRequired,\n  wrongAnswerClass: PropTypes.string,\n  history: PropTypes.objectOf(PropTypes.any).isRequired\n};\nNextButtonControl.defaultProps = {\n  wrongAnswerClass: ''\n};","map":{"version":3,"sources":["/home/jafet/projetos/sd-03-project-trivia-react-redux-06/src/components/GameScreen/NextButtonControl.js"],"names":["React","PropTypes","connect","withRouter","newQuestionAction","NextButtonControl","Component","constructor","props","nextPageControler","bind","setNextQuestion","timerFunction","questionIndex","allAnswers","history","console","log","length","push","render","wrongAnswerClass","mapStateToProps","state","questionsDataReducer","index","allAnswersReducer","mapDispatchToProps","dispatch","propTypes","arrayOf","array","isRequired","number","func","string","objectOf","any","defaultProps"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,SAAP,MAAsB,YAAtB;AACA,SAASC,OAAT,QAAwB,aAAxB;AACA,SAASC,UAAT,QAA2B,kBAA3B;AACA,SAASC,iBAAT,QAAkC,iCAAlC;;AAEA,MAAMC,iBAAN,SAAgCL,KAAK,CAACM,SAAtC,CAAgD;AAC9CC,EAAAA,WAAW,CAACC,KAAD,EAAQ;AACjB,UAAMA,KAAN;AACA,SAAKC,iBAAL,GAAyB,KAAKA,iBAAL,CAAuBC,IAAvB,CAA4B,IAA5B,CAAzB;AACD;;AAEDD,EAAAA,iBAAiB,GAAG;AAAA,wBAGd,KAAKD,KAHS;AAAA,UAEhBG,eAFgB,eAEhBA,eAFgB;AAAA,UAECC,aAFD,eAECA,aAFD;AAAA,UAEgBC,aAFhB,eAEgBA,aAFhB;AAAA,UAE+BC,UAF/B,eAE+BA,UAF/B;AAAA,UAE2CC,OAF3C,eAE2CA,OAF3C;AAIlBC,IAAAA,OAAO,CAACC,GAAR,CAAY,KAAKT,KAAjB;AACA,QAAKK,aAAa,GAAG,CAAjB,KAAwBC,UAAU,CAACI,MAAvC,EAA+C,OAAOH,OAAO,CAACI,IAAR,CAAa,WAAb,CAAP;AAC/CR,IAAAA,eAAe;AACf,WAAOC,aAAa,EAApB;AACD;;AAEDQ,EAAAA,MAAM,GAAG;AAAA,UACCC,gBADD,GACsB,KAAKb,KAD3B,CACCa,gBADD;AAEP,QAAIA,gBAAgB,KAAK,EAAzB,EAA6B,OAAO,IAAP;AAC7B,WACE;AAAK,qBAAY,UAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE;AACE,MAAA,IAAI,EAAC,QADP;AAEE,MAAA,OAAO,EAAE,KAAKZ,iBAFhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBADF,CADF;AAUD;;AA7B6C;;AAgChD,MAAMa,eAAe,GAAIC,KAAD,KAAY;AAClCV,EAAAA,aAAa,EAAEU,KAAK,CAACC,oBAAN,CAA2BC,KADR;AAElCJ,EAAAA,gBAAgB,EAAEE,KAAK,CAACC,oBAAN,CAA2BH,gBAFX;AAGlCP,EAAAA,UAAU,EAAES,KAAK,CAACG,iBAAN,CAAwBZ;AAHF,CAAZ,CAAxB;;AAMA,MAAMa,kBAAkB,GAAIC,QAAD,KAAe;AACxCjB,EAAAA,eAAe,EAAE,MAAMiB,QAAQ,CAACxB,iBAAiB,EAAlB;AADS,CAAf,CAA3B;;AAIA,eAAeD,UAAU,CAACD,OAAO,CAACoB,eAAD,EAAkBK,kBAAlB,CAAP,CAA6CtB,iBAA7C,CAAD,CAAzB;AAEAA,iBAAiB,CAACwB,SAAlB,GAA8B;AAC5Bf,EAAAA,UAAU,EAAEb,SAAS,CAAC6B,OAAV,CAAkB7B,SAAS,CAAC8B,KAA5B,EAAmCC,UADnB;AAE5BnB,EAAAA,aAAa,EAAEZ,SAAS,CAACgC,MAAV,CAAiBD,UAFJ;AAG5BrB,EAAAA,eAAe,EAAEV,SAAS,CAACiC,IAAV,CAAeF,UAHJ;AAI5BpB,EAAAA,aAAa,EAAEX,SAAS,CAACiC,IAAV,CAAeF,UAJF;AAK5BX,EAAAA,gBAAgB,EAAEpB,SAAS,CAACkC,MALA;AAM5BpB,EAAAA,OAAO,EAAEd,SAAS,CAACmC,QAAV,CAAmBnC,SAAS,CAACoC,GAA7B,EAAkCL;AANf,CAA9B;AASA3B,iBAAiB,CAACiC,YAAlB,GAAiC;AAC/BjB,EAAAA,gBAAgB,EAAE;AADa,CAAjC","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport { withRouter } from 'react-router-dom';\nimport { newQuestionAction } from '../../actions/newQuestionAction';\n\nclass NextButtonControl extends React.Component {\n  constructor(props) {\n    super(props);\n    this.nextPageControler = this.nextPageControler.bind(this);\n  }\n\n  nextPageControler() {\n    const {\n      setNextQuestion, timerFunction, questionIndex, allAnswers, history,\n    } = this.props;\n    console.log(this.props);\n    if ((questionIndex + 1) === allAnswers.length) return history.push('/feedback');\n    setNextQuestion();\n    return timerFunction();\n  }\n\n  render() {\n    const { wrongAnswerClass } = this.props;\n    if (wrongAnswerClass === '') return null;\n    return (\n      <div data-testid=\"btn-next\">\n        <button\n          type=\"button\"\n          onClick={this.nextPageControler}\n        >\n          Pr√≥xima\n        </button>\n      </div>\n    );\n  }\n}\n\nconst mapStateToProps = (state) => ({\n  questionIndex: state.questionsDataReducer.index,\n  wrongAnswerClass: state.questionsDataReducer.wrongAnswerClass,\n  allAnswers: state.allAnswersReducer.allAnswers,\n});\n\nconst mapDispatchToProps = (dispatch) => ({\n  setNextQuestion: () => dispatch(newQuestionAction()),\n});\n\nexport default withRouter(connect(mapStateToProps, mapDispatchToProps)(NextButtonControl));\n\nNextButtonControl.propTypes = {\n  allAnswers: PropTypes.arrayOf(PropTypes.array).isRequired,\n  questionIndex: PropTypes.number.isRequired,\n  setNextQuestion: PropTypes.func.isRequired,\n  timerFunction: PropTypes.func.isRequired,\n  wrongAnswerClass: PropTypes.string,\n  history: PropTypes.objectOf(PropTypes.any).isRequired,\n};\n\nNextButtonControl.defaultProps = {\n  wrongAnswerClass: '',\n};\n"]},"metadata":{},"sourceType":"module"}