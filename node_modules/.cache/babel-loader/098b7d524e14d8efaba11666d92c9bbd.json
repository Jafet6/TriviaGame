{"ast":null,"code":"var _jsxFileName = \"/home/jafet/projetos/sd-03-project-trivia-react-redux-06/src/components/GameScreen/ShuffledButtons.js\";\nimport React from 'react';\nimport { connect } from 'react-redux';\nimport { checkAnswerAction } from '../../actions/checkAnswerAction';\nimport './ShuffledButtons.css';\nimport questions from '../dataTest';\n\nconst arrWithAllButtons = objQuestion => {\n  const allAnswers = [objQuestion.correct_answer, ...objQuestion.incorrect_answers];\n  return allAnswers;\n};\n\nconst shuffleAnswers = array => {\n  let currentIndex = array.length;\n  let temporaryValue = [];\n  let randomIndex;\n\n  while (currentIndex !== 0) {\n    randomIndex = Math.floor(Math.random() * currentIndex);\n    currentIndex -= 1;\n    temporaryValue = array[currentIndex];\n    array[currentIndex] = array[randomIndex];\n    array[randomIndex] = temporaryValue;\n  }\n\n  return array;\n};\n\nclass ShuffledButtons extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      allAnswers: []\n    };\n  }\n\n  componentDidMount() {\n    const results = questions.results;\n    const allAnswersArr = results.map(question => shuffleAnswers(arrWithAllButtons(question)));\n    this.setState({\n      allAnswers: allAnswersArr\n    });\n  }\n\n  shouldShowAnswers() {\n    return this.state.allAnswers.length > 0;\n  }\n\n  render() {\n    const results = questions.results;\n    const _this$props = this.props,\n          questionIndex = _this$props.questionIndex,\n          checkAnswer = _this$props.checkAnswer,\n          wrongAnswerClass = _this$props.wrongAnswerClass,\n          correctAnswerClass = _this$props.correctAnswerClass,\n          disabledBtn = _this$props.disabledBtn;\n    const allAnswers = this.state.allAnswers;\n    if (!this.shouldShowAnswers()) return null;\n    return React.createElement(\"div\", {\n      className: \"answers-buttons\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 57\n      },\n      __self: this\n    }, allAnswers[questionIndex].map(button => {\n      if (button === results[questionIndex].correct_answer) {\n        return React.createElement(\"button\", {\n          disabled: disabledBtn,\n          className: correctAnswerClass,\n          onClick: checkAnswer,\n          key: button,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 60\n          },\n          __self: this\n        }, button);\n      }\n\n      return React.createElement(\"button\", {\n        disabled: disabledBtn,\n        className: wrongAnswerClass,\n        onClick: checkAnswer,\n        key: button,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 68\n        },\n        __self: this\n      }, button);\n    }));\n  }\n\n}\n\nconst mapStateToProps = state => ({\n  questionIndex: state.questionsDataReducer.index,\n  wrongAnswerClass: state.questionsDataReducer.wrongAnswerClass,\n  correctAnswerClass: state.questionsDataReducer.correctAnswerClass,\n  disabledBtn: state.questionsDataReducer.disabledBtn\n});\n\nconst mapDispatchToProps = dispatch => ({\n  checkAnswer: () => dispatch(checkAnswerAction())\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(ShuffledButtons);","map":{"version":3,"sources":["/home/jafet/projetos/sd-03-project-trivia-react-redux-06/src/components/GameScreen/ShuffledButtons.js"],"names":["React","connect","checkAnswerAction","questions","arrWithAllButtons","objQuestion","allAnswers","correct_answer","incorrect_answers","shuffleAnswers","array","currentIndex","length","temporaryValue","randomIndex","Math","floor","random","ShuffledButtons","Component","constructor","props","state","componentDidMount","results","allAnswersArr","map","question","setState","shouldShowAnswers","render","questionIndex","checkAnswer","wrongAnswerClass","correctAnswerClass","disabledBtn","button","mapStateToProps","questionsDataReducer","index","mapDispatchToProps","dispatch"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,OAAT,QAAwB,aAAxB;AACA,SAASC,iBAAT,QAAkC,iCAAlC;AACA,OAAO,uBAAP;AACA,OAAOC,SAAP,MAAsB,aAAtB;;AAEA,MAAMC,iBAAiB,GAAIC,WAAD,IAAiB;AAEzC,QAAMC,UAAU,GAAG,CACjBD,WAAW,CAACE,cADK,EAEjB,GAAGF,WAAW,CAACG,iBAFE,CAAnB;AAIA,SAAOF,UAAP;AACD,CAPD;;AASA,MAAMG,cAAc,GAAIC,KAAD,IAAW;AAChC,MAAIC,YAAY,GAAGD,KAAK,CAACE,MAAzB;AACA,MAAIC,cAAc,GAAG,EAArB;AACA,MAAIC,WAAJ;;AAEA,SAAOH,YAAY,KAAK,CAAxB,EAA2B;AACzBG,IAAAA,WAAW,GAAGC,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,MAAL,KAAgBN,YAA3B,CAAd;AACAA,IAAAA,YAAY,IAAI,CAAhB;AACAE,IAAAA,cAAc,GAAGH,KAAK,CAACC,YAAD,CAAtB;AACAD,IAAAA,KAAK,CAACC,YAAD,CAAL,GAAsBD,KAAK,CAACI,WAAD,CAA3B;AACAJ,IAAAA,KAAK,CAACI,WAAD,CAAL,GAAqBD,cAArB;AACD;;AACD,SAAOH,KAAP;AACD,CAbD;;AAeA,MAAMQ,eAAN,SAA8BlB,KAAK,CAACmB,SAApC,CAA8C;AAC5CC,EAAAA,WAAW,CAACC,KAAD,EAAQ;AACjB,UAAMA,KAAN;AACA,SAAKC,KAAL,GAAa;AACXhB,MAAAA,UAAU,EAAE;AADD,KAAb;AAGD;;AAEDiB,EAAAA,iBAAiB,GAAG;AAAA,UACVC,OADU,GACErB,SADF,CACVqB,OADU;AAElB,UAAMC,aAAa,GAAGD,OAAO,CAACE,GAAR,CAAaC,QAAD,IAAclB,cAAc,CAACL,iBAAiB,CAACuB,QAAD,CAAlB,CAAxC,CAAtB;AACA,SAAKC,QAAL,CAAc;AAAEtB,MAAAA,UAAU,EAAEmB;AAAd,KAAd;AACD;;AAEDI,EAAAA,iBAAiB,GAAG;AAClB,WAAO,KAAKP,KAAL,CAAWhB,UAAX,CAAsBM,MAAtB,GAA+B,CAAtC;AACD;;AAEDkB,EAAAA,MAAM,GAAG;AAAA,UACCN,OADD,GACarB,SADb,CACCqB,OADD;AAAA,wBAIH,KAAKH,KAJF;AAAA,UAECU,aAFD,eAECA,aAFD;AAAA,UAEgBC,WAFhB,eAEgBA,WAFhB;AAAA,UAGLC,gBAHK,eAGLA,gBAHK;AAAA,UAGaC,kBAHb,eAGaA,kBAHb;AAAA,UAGiCC,WAHjC,eAGiCA,WAHjC;AAAA,UAKC7B,UALD,GAKgB,KAAKgB,KALrB,CAKChB,UALD;AAMP,QAAI,CAAC,KAAKuB,iBAAL,EAAL,EAA+B,OAAO,IAAP;AAC/B,WACE;AAAK,MAAA,SAAS,EAAC,iBAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACGvB,UAAU,CAACyB,aAAD,CAAV,CAA0BL,GAA1B,CAA+BU,MAAD,IAAY;AACzC,UAAIA,MAAM,KAAKZ,OAAO,CAACO,aAAD,CAAP,CAAuBxB,cAAtC,EAAsD;AACpD,eAAO;AACL,UAAA,QAAQ,EAAE4B,WADL;AAEL,UAAA,SAAS,EAAED,kBAFN;AAGL,UAAA,OAAO,EAAEF,WAHJ;AAIL,UAAA,GAAG,EAAEI,MAJA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WAKFA,MALE,CAAP;AAOD;;AACD,aAAO;AACL,QAAA,QAAQ,EAAED,WADL;AAEL,QAAA,SAAS,EAAEF,gBAFN;AAGL,QAAA,OAAO,EAAED,WAHJ;AAIL,QAAA,GAAG,EAAEI,MAJA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAKFA,MALE,CAAP;AAOD,KAjBA,CADH,CADF;AAsBD;;AA/C2C;;AAkD9C,MAAMC,eAAe,GAAIf,KAAD,KAAY;AAClCS,EAAAA,aAAa,EAAET,KAAK,CAACgB,oBAAN,CAA2BC,KADR;AAElCN,EAAAA,gBAAgB,EAAEX,KAAK,CAACgB,oBAAN,CAA2BL,gBAFX;AAGlCC,EAAAA,kBAAkB,EAAEZ,KAAK,CAACgB,oBAAN,CAA2BJ,kBAHb;AAIlCC,EAAAA,WAAW,EAAEb,KAAK,CAACgB,oBAAN,CAA2BH;AAJN,CAAZ,CAAxB;;AAOA,MAAMK,kBAAkB,GAAIC,QAAD,KAAe;AACxCT,EAAAA,WAAW,EAAE,MAAMS,QAAQ,CAACvC,iBAAiB,EAAlB;AADa,CAAf,CAA3B;;AAIA,eAAeD,OAAO,CAACoC,eAAD,EAAkBG,kBAAlB,CAAP,CAA6CtB,eAA7C,CAAf","sourcesContent":["import React from 'react';\nimport { connect } from 'react-redux';\nimport { checkAnswerAction } from '../../actions/checkAnswerAction';\nimport './ShuffledButtons.css';\nimport questions from '../dataTest';\n\nconst arrWithAllButtons = (objQuestion) => {\n\n  const allAnswers = [\n    objQuestion.correct_answer,\n    ...objQuestion.incorrect_answers,\n  ];\n  return allAnswers;\n};\n\nconst shuffleAnswers = (array) => {\n  let currentIndex = array.length;\n  let temporaryValue = [];\n  let randomIndex;\n\n  while (currentIndex !== 0) {\n    randomIndex = Math.floor(Math.random() * currentIndex);\n    currentIndex -= 1;\n    temporaryValue = array[currentIndex];\n    array[currentIndex] = array[randomIndex];\n    array[randomIndex] = temporaryValue;\n  }\n  return array;\n};\n\nclass ShuffledButtons extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      allAnswers: [],\n    };\n  }\n\n  componentDidMount() {\n    const { results } = questions;\n    const allAnswersArr = results.map((question) => shuffleAnswers(arrWithAllButtons(question)));\n    this.setState({ allAnswers: allAnswersArr });\n  }\n\n  shouldShowAnswers() {\n    return this.state.allAnswers.length > 0;\n  }\n\n  render() {\n    const { results } = questions;\n    const { questionIndex, checkAnswer,\n      wrongAnswerClass, correctAnswerClass, disabledBtn\n    } = this.props;\n    const { allAnswers } = this.state;\n    if (!this.shouldShowAnswers()) return null;\n    return (\n      <div className=\"answers-buttons\">\n        {allAnswers[questionIndex].map((button) => {\n          if (button === results[questionIndex].correct_answer) {\n            return <button\n              disabled={disabledBtn}\n              className={correctAnswerClass}\n              onClick={checkAnswer}\n              key={button}>\n                {button}\n            </button>\n          }\n          return <button\n            disabled={disabledBtn}\n            className={wrongAnswerClass}\n            onClick={checkAnswer}\n            key={button}>\n              {button}\n          </button>\n        })}\n      </div>\n    )\n  }\n}\n\nconst mapStateToProps = (state) => ({\n  questionIndex: state.questionsDataReducer.index,\n  wrongAnswerClass: state.questionsDataReducer.wrongAnswerClass,\n  correctAnswerClass: state.questionsDataReducer.correctAnswerClass,\n  disabledBtn: state.questionsDataReducer.disabledBtn,\n});\n\nconst mapDispatchToProps = (dispatch) => ({\n  checkAnswer: () => dispatch(checkAnswerAction()),\n})\n\nexport default connect(mapStateToProps, mapDispatchToProps)(ShuffledButtons);\n"]},"metadata":{},"sourceType":"module"}