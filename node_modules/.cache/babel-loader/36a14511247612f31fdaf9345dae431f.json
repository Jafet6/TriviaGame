{"ast":null,"code":"var _jsxFileName = \"/home/jafet/projetos/sd-03-project-trivia-react-redux-06/src/components/GameScreen/ShuffledButtons.js\";\nimport React from 'react';\nimport { connect } from 'react-redux';\nimport { checkAnswerAction } from '../../actions/checkAnswerAction';\nimport './ShuffledButtons.css';\nimport questions from '../dataTest';\n\nclass ShuffledButtons extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.arrWithAllButtons = objQuestion => {\n      const incorrect_answers = objQuestion.incorrect_answers,\n            correct_answer = objQuestion.correct_answer;\n      const allAnswers = [correct_answer, ...incorrect_answers];\n      return allAnswers;\n    };\n\n    this.shuffleAnswers = array => {\n      let currentIndex = array.length;\n      let temporaryValue = [];\n      let randomIndex;\n\n      while (currentIndex !== 0) {\n        randomIndex = Math.floor(Math.random() * currentIndex);\n        currentIndex -= 1;\n        temporaryValue = array[currentIndex];\n        array[currentIndex] = array[randomIndex];\n        array[randomIndex] = temporaryValue;\n      }\n\n      return array;\n    };\n\n    this.state = {\n      allAnswers: []\n    };\n  }\n\n  componentDidMount() {\n    const results = questions.results;\n    const allAnswersArr = results.map(question => this.shuffleAnswers(this.arrWithAllButtons(question)));\n    this.setState({\n      allAnswers: allAnswersArr\n    });\n  }\n\n  shouldShowAnswers() {\n    return this.state.allAnswers.length > 0;\n  }\n\n  render() {\n    const results = questions.results;\n    const _this$props = this.props,\n          questionIndex = _this$props.questionIndex,\n          checkAnswer = _this$props.checkAnswer,\n          wrongAnswerClass = _this$props.wrongAnswerClass,\n          correctAnswerClass = _this$props.correctAnswerClass,\n          disabledBtn = _this$props.disabledBtn;\n    const allAnswers = this.state.allAnswers;\n    if (!this.shouldShowAnswers()) return null;\n    return React.createElement(\"div\", {\n      className: \"answers-buttons\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 59\n      },\n      __self: this\n    }, allAnswers[questionIndex].map(button => {\n      if (button === results[questionIndex].correct_answer) {\n        return React.createElement(\"button\", {\n          disabled: disabledBtn,\n          className: correctAnswerClass,\n          onClick: checkAnswer,\n          key: button,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 62\n          },\n          __self: this\n        }, button);\n      }\n\n      return React.createElement(\"button\", {\n        disabled: disabledBtn,\n        className: wrongAnswerClass,\n        onClick: checkAnswer,\n        key: button,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 70\n        },\n        __self: this\n      }, button);\n    }));\n  }\n\n}\n\nconst mapStateToProps = state => ({\n  questionIndex: state.questionsDataReducer.index,\n  wrongAnswerClass: state.questionsDataReducer.wrongAnswerClass,\n  correctAnswerClass: state.questionsDataReducer.correctAnswerClass,\n  disabledBtn: state.questionsDataReducer.disabledBtn\n});\n\nconst mapDispatchToProps = dispatch => ({\n  checkAnswer: () => dispatch(checkAnswerAction())\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(ShuffledButtons);","map":{"version":3,"sources":["/home/jafet/projetos/sd-03-project-trivia-react-redux-06/src/components/GameScreen/ShuffledButtons.js"],"names":["React","connect","checkAnswerAction","questions","ShuffledButtons","Component","constructor","props","arrWithAllButtons","objQuestion","incorrect_answers","correct_answer","allAnswers","shuffleAnswers","array","currentIndex","length","temporaryValue","randomIndex","Math","floor","random","state","componentDidMount","results","allAnswersArr","map","question","setState","shouldShowAnswers","render","questionIndex","checkAnswer","wrongAnswerClass","correctAnswerClass","disabledBtn","button","mapStateToProps","questionsDataReducer","index","mapDispatchToProps","dispatch"],"mappings":"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","sourcesContent":["import React from 'react';\nimport { connect } from 'react-redux';\nimport { checkAnswerAction } from '../../actions/checkAnswerAction';\nimport './ShuffledButtons.css';\nimport questions from '../dataTest';\n\nclass ShuffledButtons extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      allAnswers: [],\n    }\n  }\n  \n  arrWithAllButtons = (objQuestion) => {\n    const { incorrect_answers, correct_answer } = objQuestion;\n  \n    const allAnswers = [\n      correct_answer,\n      ...incorrect_answers,\n    ];\n    return allAnswers;\n  }\n  \n  shuffleAnswers = (array) => {\n    let currentIndex = array.length;\n    let temporaryValue = [];\n    let randomIndex;\n  \n    while (currentIndex !== 0) {\n      randomIndex = Math.floor(Math.random() * currentIndex);\n      currentIndex -= 1;\n      temporaryValue = array[currentIndex];\n      array[currentIndex] = array[randomIndex];\n      array[randomIndex] = temporaryValue;\n    }\n    return array;\n  }\n\n  componentDidMount() {\n    const { results } = questions;\n    const allAnswersArr = results.map((question) => \n      this.shuffleAnswers(this.arrWithAllButtons(question)));\n    this.setState({ allAnswers: allAnswersArr });\n  }\n\n  shouldShowAnswers() {\n    return this.state.allAnswers.length > 0\n  }\n\n  render() {\n    const { results } = questions;\n    const { questionIndex, checkAnswer,\n      wrongAnswerClass, correctAnswerClass, disabledBtn\n    } = this.props;\n    const { allAnswers } = this.state;\n    if (!this.shouldShowAnswers()) return null\n    return (\n      <div className=\"answers-buttons\">\n        {allAnswers[questionIndex].map((button) => {\n          if (button === results[questionIndex].correct_answer) {\n            return <button\n              disabled={disabledBtn}\n              className={correctAnswerClass}\n              onClick={checkAnswer}\n              key={button}>\n                {button}\n            </button>\n          }\n          return <button\n            disabled={disabledBtn}\n            className={wrongAnswerClass}\n            onClick={checkAnswer}\n            key={button}>\n              {button}\n          </button>\n        })}\n      </div>\n    )\n  }\n}\n\nconst mapStateToProps = (state) => ({\n  questionIndex: state.questionsDataReducer.index,\n  wrongAnswerClass: state.questionsDataReducer.wrongAnswerClass,\n  correctAnswerClass: state.questionsDataReducer.correctAnswerClass,\n  disabledBtn: state.questionsDataReducer.disabledBtn,\n});\n\nconst mapDispatchToProps = (dispatch) => ({\n  checkAnswer: () => dispatch(checkAnswerAction()),\n})\n\nexport default connect(mapStateToProps, mapDispatchToProps)(ShuffledButtons);\n"]},"metadata":{},"sourceType":"module"}