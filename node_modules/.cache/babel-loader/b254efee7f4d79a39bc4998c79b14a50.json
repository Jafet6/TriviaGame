{"ast":null,"code":"var _jsxFileName = \"/home/jafet/curso-Trybe/projetos/front-end/projeto-18-ReactJS-Redux-TriviaGame/src/components/GameScreen/QuestionsInfos.js\";\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport he from 'he';\nimport { connect } from 'react-redux';\nimport { newQuestionAction } from '../../actions/newQuestionAction';\nimport { timerCountAction } from '../../actions/timerCountAction';\nimport { timeOutAction } from '../../actions/timeOutAction';\nimport { checkAnswerAction } from '../../actions/checkAnswerAction';\nimport './QuestionsInfos.css';\nimport ShuffledButtons from './ShuffledButtons';\nimport NextButtonControl from './NextButtonControl';\nimport logo from '../../show-do-milhÃ£o.png';\nimport playersInfosLocalStorage from '../../service/functionsService';\n\nclass QuestionsInfos extends React.Component {\n  constructor(props) {\n    super(props);\n    this.answerChoosed = this.answerChoosed.bind(this);\n    this.timerFunction = this.timerFunction.bind(this);\n  }\n\n  componentDidMount() {\n    this.timerFunction();\n  }\n\n  componentWillUnmount() {\n    clearInterval(this.interval);\n  }\n\n  timerFunction() {\n    this.interval = setInterval(() => {\n      const _this$props = this.props,\n            timerCount = _this$props.timerCount,\n            timer = _this$props.timer,\n            timeOut = _this$props.timeOut;\n\n      if (timer === 0) {\n        timeOut();\n        return clearInterval(this.interval);\n      }\n\n      return timerCount();\n    }, 1000);\n  }\n\n  rankingInfoLocalStorage() {\n    const _this$props2 = this.props,\n          picture = _this$props2.picture,\n          score = _this$props2.score,\n          name = _this$props2.name;\n    const personObject = {\n      name,\n      score,\n      picture\n    };\n\n    if (localStorage.getItem('ranking')) {\n      const rankingArray = JSON.parse(localStorage.getItem('ranking'));\n      const newRankingArr = rankingArray.reduce((acc, e) => {\n        if (e.name !== name) acc.push(e);\n        return acc;\n      }, []);\n      newRankingArr.push(personObject);\n      return localStorage.setItem('ranking', JSON.stringify(newRankingArr));\n    }\n\n    const rankingArray = [];\n    rankingArray.push(personObject);\n    return localStorage.setItem('ranking', JSON.stringify(rankingArray));\n  }\n\n  async answerChoosed(event) {\n    const dif = {\n      hard: 3,\n      medium: 2,\n      easy: 1\n    };\n    const _this$props3 = this.props,\n          timer = _this$props3.timer,\n          checkAnswer = _this$props3.checkAnswer,\n          questionsArr = _this$props3.questionsArr,\n          questionIndex = _this$props3.questionIndex;\n    let points = 0;\n    let assertion = 0;\n    const questionAnswer = questionsArr[questionIndex];\n\n    if (event.target.value === questionAnswer.correct_answer) {\n      points = 10 + timer * dif[questionAnswer.difficulty];\n      assertion = 1;\n    }\n\n    await checkAnswer(points, assertion);\n    const _this$props4 = this.props,\n          assertions = _this$props4.assertions,\n          score = _this$props4.score,\n          name = _this$props4.name,\n          gravatarEmail = _this$props4.gravatarEmail;\n    playersInfosLocalStorage(assertions, score, name, gravatarEmail);\n    this.rankingInfoLocalStorage();\n    return clearInterval(this.interval);\n  }\n\n  render() {\n    const _this$props5 = this.props,\n          questionIndex = _this$props5.questionIndex,\n          timer = _this$props5.timer,\n          questionsArr = _this$props5.questionsArr;\n    const question = questionsArr[questionIndex];\n    return React.createElement(\"div\", {\n      className: \"questions-display\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 89\n      },\n      __self: this\n    }, React.createElement(\"section\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 90\n      },\n      __self: this\n    }, React.createElement(\"img\", {\n      src: logo,\n      width: \"400px\",\n      alt: \"logo\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 91\n      },\n      __self: this\n    }), React.createElement(\"div\", {\n      className: \"questions-container\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 92\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"questions-header\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 93\n      },\n      __self: this\n    }, React.createElement(\"span\", {\n      \"data-testid\": \"question-category\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 94\n      },\n      __self: this\n    }, question.category), React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 95\n      },\n      __self: this\n    }, React.createElement(\"p\", {\n      \"data-testid\": \"question-text\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 96\n      },\n      __self: this\n    }, `${he.decode(question.question)}`), React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 97\n      },\n      __self: this\n    }, `Tempo restante: ${timer}s`))), React.createElement(\"div\", {\n      className: \"shuffled-buttons\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 102\n      },\n      __self: this\n    }, React.createElement(ShuffledButtons, {\n      answerChoosed: this.answerChoosed,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 103\n      },\n      __self: this\n    })), React.createElement(NextButtonControl, {\n      timerFunction: this.timerFunction,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 105\n      },\n      __self: this\n    }))));\n  }\n\n}\n\nconst mapStateToProps = state => ({\n  questionIndex: state.questionsDataReducer.index,\n  name: state.playersInfoReducer.username,\n  picture: state.gravatarReducer.picture.url,\n  gravatarEmail: state.playersInfoReducer.email,\n  score: state.questionsDataReducer.points,\n  assertions: state.questionsDataReducer.assertions,\n  questionsArr: state.apiQuestionsReducer.questions.results,\n  timer: state.questionsDataReducer.timerCount,\n  wrongAnswerClass: state.questionsDataReducer.wrongAnswerClass\n});\n\nconst mapDispatchToProps = dispatch => ({\n  setNextQuestion: () => dispatch(newQuestionAction()),\n  timerCount: () => dispatch(timerCountAction()),\n  timeOut: () => dispatch(timeOutAction()),\n  checkAnswer: (points, assertions) => dispatch(checkAnswerAction(points, assertions))\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(QuestionsInfos);\nQuestionsInfos.propTypes = {\n  questionIndex: PropTypes.number.isRequired,\n  questionsArr: PropTypes.arrayOf(PropTypes.object),\n  timer: PropTypes.number.isRequired,\n  timeOut: PropTypes.func.isRequired,\n  timerCount: PropTypes.func.isRequired,\n  checkAnswer: PropTypes.func.isRequired,\n  assertions: PropTypes.number.isRequired,\n  score: PropTypes.number.isRequired,\n  name: PropTypes.string.isRequired,\n  gravatarEmail: PropTypes.string,\n  picture: PropTypes.string\n};\nQuestionsInfos.defaultProps = {\n  questionsArr: [],\n  picture: '',\n  gravatarEmail: ''\n};","map":{"version":3,"sources":["/home/jafet/curso-Trybe/projetos/front-end/projeto-18-ReactJS-Redux-TriviaGame/src/components/GameScreen/QuestionsInfos.js"],"names":["React","PropTypes","he","connect","newQuestionAction","timerCountAction","timeOutAction","checkAnswerAction","ShuffledButtons","NextButtonControl","logo","playersInfosLocalStorage","QuestionsInfos","Component","constructor","props","answerChoosed","bind","timerFunction","componentDidMount","componentWillUnmount","clearInterval","interval","setInterval","timerCount","timer","timeOut","rankingInfoLocalStorage","picture","score","name","personObject","localStorage","getItem","rankingArray","JSON","parse","newRankingArr","reduce","acc","e","push","setItem","stringify","event","dif","hard","medium","easy","checkAnswer","questionsArr","questionIndex","points","assertion","questionAnswer","target","value","correct_answer","difficulty","assertions","gravatarEmail","render","question","category","decode","mapStateToProps","state","questionsDataReducer","index","playersInfoReducer","username","gravatarReducer","url","email","apiQuestionsReducer","questions","results","wrongAnswerClass","mapDispatchToProps","dispatch","setNextQuestion","propTypes","number","isRequired","arrayOf","object","func","string","defaultProps"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,SAAP,MAAsB,YAAtB;AACA,OAAOC,EAAP,MAAe,IAAf;AACA,SAASC,OAAT,QAAwB,aAAxB;AACA,SAASC,iBAAT,QAAkC,iCAAlC;AACA,SAASC,gBAAT,QAAiC,gCAAjC;AACA,SAASC,aAAT,QAA8B,6BAA9B;AACA,SAASC,iBAAT,QAAkC,iCAAlC;AACA,OAAO,sBAAP;AACA,OAAOC,eAAP,MAA4B,mBAA5B;AACA,OAAOC,iBAAP,MAA8B,qBAA9B;AACA,OAAOC,IAAP,MAAiB,0BAAjB;AACA,OAAOC,wBAAP,MAAqC,gCAArC;;AAEA,MAAMC,cAAN,SAA6BZ,KAAK,CAACa,SAAnC,CAA6C;AAC3CC,EAAAA,WAAW,CAACC,KAAD,EAAQ;AACjB,UAAMA,KAAN;AACA,SAAKC,aAAL,GAAqB,KAAKA,aAAL,CAAmBC,IAAnB,CAAwB,IAAxB,CAArB;AACA,SAAKC,aAAL,GAAqB,KAAKA,aAAL,CAAmBD,IAAnB,CAAwB,IAAxB,CAArB;AACD;;AAEDE,EAAAA,iBAAiB,GAAG;AAClB,SAAKD,aAAL;AACD;;AAEDE,EAAAA,oBAAoB,GAAG;AACrBC,IAAAA,aAAa,CAAC,KAAKC,QAAN,CAAb;AACD;;AAEDJ,EAAAA,aAAa,GAAG;AACd,SAAKI,QAAL,GAAgBC,WAAW,CAAC,MAAM;AAAA,0BACO,KAAKR,KADZ;AAAA,YACxBS,UADwB,eACxBA,UADwB;AAAA,YACZC,KADY,eACZA,KADY;AAAA,YACLC,OADK,eACLA,OADK;;AAGhC,UAAID,KAAK,KAAK,CAAd,EAAiB;AACfC,QAAAA,OAAO;AACP,eAAOL,aAAa,CAAC,KAAKC,QAAN,CAApB;AACD;;AAED,aAAOE,UAAU,EAAjB;AACD,KAT0B,EASxB,IATwB,CAA3B;AAUD;;AAEDG,EAAAA,uBAAuB,GAAG;AAAA,yBACS,KAAKZ,KADd;AAAA,UAChBa,OADgB,gBAChBA,OADgB;AAAA,UACPC,KADO,gBACPA,KADO;AAAA,UACAC,IADA,gBACAA,IADA;AAExB,UAAMC,YAAY,GAAG;AAAED,MAAAA,IAAF;AAAQD,MAAAA,KAAR;AAAeD,MAAAA;AAAf,KAArB;;AACA,QAAII,YAAY,CAACC,OAAb,CAAqB,SAArB,CAAJ,EAAqC;AACnC,YAAMC,YAAY,GAAGC,IAAI,CAACC,KAAL,CAAWJ,YAAY,CAACC,OAAb,CAAqB,SAArB,CAAX,CAArB;AACA,YAAMI,aAAa,GAAGH,YAAY,CAACI,MAAb,CAAoB,CAACC,GAAD,EAAMC,CAAN,KAAY;AACpD,YAAIA,CAAC,CAACV,IAAF,KAAWA,IAAf,EAAqBS,GAAG,CAACE,IAAJ,CAASD,CAAT;AACrB,eAAOD,GAAP;AACD,OAHqB,EAGnB,EAHmB,CAAtB;AAIAF,MAAAA,aAAa,CAACI,IAAd,CAAmBV,YAAnB;AACA,aAAOC,YAAY,CAACU,OAAb,CAAqB,SAArB,EAAgCP,IAAI,CAACQ,SAAL,CAAeN,aAAf,CAAhC,CAAP;AACD;;AACD,UAAMH,YAAY,GAAG,EAArB;AACAA,IAAAA,YAAY,CAACO,IAAb,CAAkBV,YAAlB;AACA,WAAOC,YAAY,CAACU,OAAb,CAAqB,SAArB,EAAgCP,IAAI,CAACQ,SAAL,CAAeT,YAAf,CAAhC,CAAP;AACD;;AAED,QAAMlB,aAAN,CAAoB4B,KAApB,EAA2B;AACzB,UAAMC,GAAG,GAAG;AACVC,MAAAA,IAAI,EAAE,CADI;AAEVC,MAAAA,MAAM,EAAE,CAFE;AAGVC,MAAAA,IAAI,EAAE;AAHI,KAAZ;AADyB,yBAQrB,KAAKjC,KARgB;AAAA,UAOvBU,KAPuB,gBAOvBA,KAPuB;AAAA,UAOhBwB,WAPgB,gBAOhBA,WAPgB;AAAA,UAOHC,YAPG,gBAOHA,YAPG;AAAA,UAOWC,aAPX,gBAOWA,aAPX;AASzB,QAAIC,MAAM,GAAG,CAAb;AACA,QAAIC,SAAS,GAAG,CAAhB;AACA,UAAMC,cAAc,GAAGJ,YAAY,CAACC,aAAD,CAAnC;;AACA,QAAIP,KAAK,CAACW,MAAN,CAAaC,KAAb,KAAuBF,cAAc,CAACG,cAA1C,EAA0D;AACxDL,MAAAA,MAAM,GAAG,KAAM3B,KAAK,GAAGoB,GAAG,CAACS,cAAc,CAACI,UAAhB,CAA1B;AACAL,MAAAA,SAAS,GAAG,CAAZ;AACD;;AACD,UAAMJ,WAAW,CAACG,MAAD,EAASC,SAAT,CAAjB;AAhByB,yBAmBrB,KAAKtC,KAnBgB;AAAA,UAkBvB4C,UAlBuB,gBAkBvBA,UAlBuB;AAAA,UAkBX9B,KAlBW,gBAkBXA,KAlBW;AAAA,UAkBJC,IAlBI,gBAkBJA,IAlBI;AAAA,UAkBE8B,aAlBF,gBAkBEA,aAlBF;AAoBzBjD,IAAAA,wBAAwB,CAACgD,UAAD,EAAa9B,KAAb,EAAoBC,IAApB,EAA0B8B,aAA1B,CAAxB;AACA,SAAKjC,uBAAL;AACA,WAAON,aAAa,CAAC,KAAKC,QAAN,CAApB;AACD;;AAEDuC,EAAAA,MAAM,GAAG;AAAA,yBACwC,KAAK9C,KAD7C;AAAA,UACCoC,aADD,gBACCA,aADD;AAAA,UACgB1B,KADhB,gBACgBA,KADhB;AAAA,UACuByB,YADvB,gBACuBA,YADvB;AAEP,UAAMY,QAAQ,GAAGZ,YAAY,CAACC,aAAD,CAA7B;AACA,WACE;AAAK,MAAA,SAAS,EAAC,mBAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE;AAAK,MAAA,GAAG,EAAEzC,IAAV;AAAgB,MAAA,KAAK,EAAC,OAAtB;AAA8B,MAAA,GAAG,EAAC,MAAlC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADF,EAEE;AAAK,MAAA,SAAS,EAAC,qBAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE;AAAK,MAAA,SAAS,EAAC,kBAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE;AAAM,qBAAY,mBAAlB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAuCoD,QAAQ,CAACC,QAAhD,CADF,EAEE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE;AAAG,qBAAY,eAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAiC,GAAE7D,EAAE,CAAC8D,MAAH,CAAUF,QAAQ,CAACA,QAAnB,CAA6B,EAAhE,CADF,EAEE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACI,mBAAkBrC,KAAM,GAD5B,CAFF,CAFF,CADF,EAUE;AAAK,MAAA,SAAS,EAAC,kBAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE,oBAAC,eAAD;AAAiB,MAAA,aAAa,EAAE,KAAKT,aAArC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADF,CAVF,EAaE,oBAAC,iBAAD;AAAmB,MAAA,aAAa,EAAE,KAAKE,aAAvC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAbF,CAFF,CADF,CADF;AAsBD;;AA/F0C;;AAkG7C,MAAM+C,eAAe,GAAIC,KAAD,KAAY;AAClCf,EAAAA,aAAa,EAAEe,KAAK,CAACC,oBAAN,CAA2BC,KADR;AAElCtC,EAAAA,IAAI,EAAEoC,KAAK,CAACG,kBAAN,CAAyBC,QAFG;AAGlC1C,EAAAA,OAAO,EAAEsC,KAAK,CAACK,eAAN,CAAsB3C,OAAtB,CAA8B4C,GAHL;AAIlCZ,EAAAA,aAAa,EAAEM,KAAK,CAACG,kBAAN,CAAyBI,KAJN;AAKlC5C,EAAAA,KAAK,EAAEqC,KAAK,CAACC,oBAAN,CAA2Bf,MALA;AAMlCO,EAAAA,UAAU,EAAEO,KAAK,CAACC,oBAAN,CAA2BR,UANL;AAOlCT,EAAAA,YAAY,EAAEgB,KAAK,CAACQ,mBAAN,CAA0BC,SAA1B,CAAoCC,OAPhB;AAQlCnD,EAAAA,KAAK,EAAEyC,KAAK,CAACC,oBAAN,CAA2B3C,UARA;AASlCqD,EAAAA,gBAAgB,EAAEX,KAAK,CAACC,oBAAN,CAA2BU;AATX,CAAZ,CAAxB;;AAYA,MAAMC,kBAAkB,GAAIC,QAAD,KAAe;AACxCC,EAAAA,eAAe,EAAE,MAAMD,QAAQ,CAAC3E,iBAAiB,EAAlB,CADS;AAExCoB,EAAAA,UAAU,EAAE,MAAMuD,QAAQ,CAAC1E,gBAAgB,EAAjB,CAFc;AAGxCqB,EAAAA,OAAO,EAAE,MAAMqD,QAAQ,CAACzE,aAAa,EAAd,CAHiB;AAIxC2C,EAAAA,WAAW,EAAE,CAACG,MAAD,EAASO,UAAT,KAAwBoB,QAAQ,CAACxE,iBAAiB,CAAC6C,MAAD,EAASO,UAAT,CAAlB;AAJL,CAAf,CAA3B;;AAOA,eAAexD,OAAO,CAAC8D,eAAD,EAAkBa,kBAAlB,CAAP,CAA6ClE,cAA7C,CAAf;AAEAA,cAAc,CAACqE,SAAf,GAA2B;AACzB9B,EAAAA,aAAa,EAAElD,SAAS,CAACiF,MAAV,CAAiBC,UADP;AAEzBjC,EAAAA,YAAY,EAAEjD,SAAS,CAACmF,OAAV,CAAkBnF,SAAS,CAACoF,MAA5B,CAFW;AAGzB5D,EAAAA,KAAK,EAAExB,SAAS,CAACiF,MAAV,CAAiBC,UAHC;AAIzBzD,EAAAA,OAAO,EAAEzB,SAAS,CAACqF,IAAV,CAAeH,UAJC;AAKzB3D,EAAAA,UAAU,EAAEvB,SAAS,CAACqF,IAAV,CAAeH,UALF;AAMzBlC,EAAAA,WAAW,EAAEhD,SAAS,CAACqF,IAAV,CAAeH,UANH;AAOzBxB,EAAAA,UAAU,EAAE1D,SAAS,CAACiF,MAAV,CAAiBC,UAPJ;AAQzBtD,EAAAA,KAAK,EAAE5B,SAAS,CAACiF,MAAV,CAAiBC,UARC;AASzBrD,EAAAA,IAAI,EAAE7B,SAAS,CAACsF,MAAV,CAAiBJ,UATE;AAUzBvB,EAAAA,aAAa,EAAE3D,SAAS,CAACsF,MAVA;AAWzB3D,EAAAA,OAAO,EAAE3B,SAAS,CAACsF;AAXM,CAA3B;AAcA3E,cAAc,CAAC4E,YAAf,GAA8B;AAC5BtC,EAAAA,YAAY,EAAE,EADc;AAE5BtB,EAAAA,OAAO,EAAE,EAFmB;AAG5BgC,EAAAA,aAAa,EAAE;AAHa,CAA9B","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport he from 'he';\nimport { connect } from 'react-redux';\nimport { newQuestionAction } from '../../actions/newQuestionAction';\nimport { timerCountAction } from '../../actions/timerCountAction';\nimport { timeOutAction } from '../../actions/timeOutAction';\nimport { checkAnswerAction } from '../../actions/checkAnswerAction';\nimport './QuestionsInfos.css';\nimport ShuffledButtons from './ShuffledButtons';\nimport NextButtonControl from './NextButtonControl';\nimport logo from '../../show-do-milhÃ£o.png';\nimport playersInfosLocalStorage from '../../service/functionsService';\n\nclass QuestionsInfos extends React.Component {\n  constructor(props) {\n    super(props);\n    this.answerChoosed = this.answerChoosed.bind(this);\n    this.timerFunction = this.timerFunction.bind(this);\n  }\n\n  componentDidMount() {\n    this.timerFunction();\n  }\n\n  componentWillUnmount() {\n    clearInterval(this.interval);\n  }\n\n  timerFunction() {\n    this.interval = setInterval(() => {\n      const { timerCount, timer, timeOut } = this.props;\n\n      if (timer === 0) {\n        timeOut();\n        return clearInterval(this.interval);\n      }\n\n      return timerCount();\n    }, 1000);\n  }\n\n  rankingInfoLocalStorage() {\n    const { picture, score, name } = this.props;\n    const personObject = { name, score, picture };\n    if (localStorage.getItem('ranking')) {\n      const rankingArray = JSON.parse(localStorage.getItem('ranking'));\n      const newRankingArr = rankingArray.reduce((acc, e) => {\n        if (e.name !== name) acc.push(e);\n        return acc;\n      }, []);\n      newRankingArr.push(personObject);\n      return localStorage.setItem('ranking', JSON.stringify(newRankingArr));\n    }\n    const rankingArray = [];\n    rankingArray.push(personObject);\n    return localStorage.setItem('ranking', JSON.stringify(rankingArray));\n  }\n\n  async answerChoosed(event) {\n    const dif = {\n      hard: 3,\n      medium: 2,\n      easy: 1,\n    };\n    const {\n      timer, checkAnswer, questionsArr, questionIndex,\n    } = this.props;\n    let points = 0;\n    let assertion = 0;\n    const questionAnswer = questionsArr[questionIndex];\n    if (event.target.value === questionAnswer.correct_answer) {\n      points = 10 + (timer * dif[questionAnswer.difficulty]);\n      assertion = 1;\n    }\n    await checkAnswer(points, assertion);\n    const {\n      assertions, score, name, gravatarEmail,\n    } = this.props;\n    playersInfosLocalStorage(assertions, score, name, gravatarEmail);\n    this.rankingInfoLocalStorage();\n    return clearInterval(this.interval);\n  }\n\n  render() {\n    const { questionIndex, timer, questionsArr } = this.props;\n    const question = questionsArr[questionIndex];\n    return (\n      <div className=\"questions-display\">\n        <section>\n          <img src={logo} width=\"400px\" alt=\"logo\" />\n          <div className=\"questions-container\">\n            <div className=\"questions-header\">\n              <span data-testid=\"question-category\">{question.category}</span>\n              <div>\n                <p data-testid=\"question-text\">{`${he.decode(question.question)}`}</p>\n                <p>\n                  {`Tempo restante: ${timer}s`}\n                </p>\n              </div>\n            </div>\n            <div className=\"shuffled-buttons\">\n              <ShuffledButtons answerChoosed={this.answerChoosed} />\n            </div>\n            <NextButtonControl timerFunction={this.timerFunction} />\n          </div>\n        </section>\n      </div>\n    );\n  }\n}\n\nconst mapStateToProps = (state) => ({\n  questionIndex: state.questionsDataReducer.index,\n  name: state.playersInfoReducer.username,\n  picture: state.gravatarReducer.picture.url,\n  gravatarEmail: state.playersInfoReducer.email,\n  score: state.questionsDataReducer.points,\n  assertions: state.questionsDataReducer.assertions,\n  questionsArr: state.apiQuestionsReducer.questions.results,\n  timer: state.questionsDataReducer.timerCount,\n  wrongAnswerClass: state.questionsDataReducer.wrongAnswerClass,\n});\n\nconst mapDispatchToProps = (dispatch) => ({\n  setNextQuestion: () => dispatch(newQuestionAction()),\n  timerCount: () => dispatch(timerCountAction()),\n  timeOut: () => dispatch(timeOutAction()),\n  checkAnswer: (points, assertions) => dispatch(checkAnswerAction(points, assertions)),\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(QuestionsInfos);\n\nQuestionsInfos.propTypes = {\n  questionIndex: PropTypes.number.isRequired,\n  questionsArr: PropTypes.arrayOf(PropTypes.object),\n  timer: PropTypes.number.isRequired,\n  timeOut: PropTypes.func.isRequired,\n  timerCount: PropTypes.func.isRequired,\n  checkAnswer: PropTypes.func.isRequired,\n  assertions: PropTypes.number.isRequired,\n  score: PropTypes.number.isRequired,\n  name: PropTypes.string.isRequired,\n  gravatarEmail: PropTypes.string,\n  picture: PropTypes.string,\n};\n\nQuestionsInfos.defaultProps = {\n  questionsArr: [],\n  picture: '',\n  gravatarEmail: '',\n};\n"]},"metadata":{},"sourceType":"module"}