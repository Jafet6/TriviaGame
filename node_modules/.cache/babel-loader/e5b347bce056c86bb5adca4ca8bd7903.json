{"ast":null,"code":"var _jsxFileName = \"/home/jafet/projetos/sd-03-project-trivia-react-redux-06/src/components/GameScreen/ShuffledButtons.js\";\nimport React from 'react';\nimport './ShuffledButtons.css';\n\nclass ShuffledButtons extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.checkAnswer = stringToTest => {\n      const question = this.props.question;\n      this.setState({\n        correctAnswerClass: 'correct-answer',\n        wrongAnswerClass: 'wrong-answer',\n        disabledBtn: true\n      });\n      if (stringToTest === question.correct_answer) return console.log(stringToTest);\n      return console.log('wrooong');\n    };\n\n    this.arrWithAllButtons = objQuestion => {\n      const incorrect_answers = objQuestion.incorrect_answers;\n      const _this$state = this.state,\n            disabledBtn = _this$state.disabledBtn,\n            correctAnswerClass = _this$state.correctAnswerClass,\n            wrongAnswerClass = _this$state.wrongAnswerClass;\n      const incorrectAnswersArr = incorrect_answers.map((e, index) => React.createElement(\"button\", {\n        className: wrongAnswerClass,\n        disabled: disabledBtn,\n        onClick: () => this.checkAnswer(e),\n        \"data-testid\": `wrong-answer-${index}`,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 31\n        },\n        __self: this\n      }, e));\n      const allAnswers = [React.createElement(\"button\", {\n        className: correctAnswerClass,\n        disabled: disabledBtn,\n        onClick: () => this.checkAnswer(objQuestion.correct_answer),\n        \"data-testid\": \"correct-answer\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 40\n        },\n        __self: this\n      }, objQuestion.correct_answer), ...incorrectAnswersArr];\n      return allAnswers;\n    };\n\n    this.shuffleAnswers = array => {\n      let currentIndex = array.length;\n      let temporaryValue = [];\n      let randomIndex;\n\n      while (currentIndex !== 0) {\n        randomIndex = Math.floor(Math.random() * currentIndex);\n        currentIndex -= 1;\n        temporaryValue = array[currentIndex];\n        array[currentIndex] = array[randomIndex];\n        array[randomIndex] = temporaryValue;\n      }\n\n      return array;\n    };\n\n    this.state = {\n      disabledBtn: false,\n      correctAnswerClass: '',\n      wrongAnswerClass: '',\n      answersArray: []\n    };\n  }\n\n  componentDidUpdate(_, prevState) {\n    if (this.state.answersArray !== prevState.answersArray) {\n      const question = this.props.question;\n      const kkk = this.shuffleAnswers(this.arrWithAllButtons(question));\n      this.setState({\n        answersArray: kkk\n      });\n    }\n  }\n\n  render() {\n    const question = this.props.question;\n    const answersArray = this.state.answersArray; // console.log(question)\n\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 81\n      },\n      __self: this\n    }, answersArray.map(e => React.createElement(\"div\", {\n      key: e.props.children,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 86\n      },\n      __self: this\n    }, e)));\n  }\n\n}\n\nexport default ShuffledButtons;","map":{"version":3,"sources":["/home/jafet/projetos/sd-03-project-trivia-react-redux-06/src/components/GameScreen/ShuffledButtons.js"],"names":["React","ShuffledButtons","Component","constructor","props","checkAnswer","stringToTest","question","setState","correctAnswerClass","wrongAnswerClass","disabledBtn","correct_answer","console","log","arrWithAllButtons","objQuestion","incorrect_answers","state","incorrectAnswersArr","map","e","index","allAnswers","shuffleAnswers","array","currentIndex","length","temporaryValue","randomIndex","Math","floor","random","answersArray","componentDidUpdate","_","prevState","kkk","render","children"],"mappings":"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","sourcesContent":["import React from 'react';\nimport './ShuffledButtons.css';\n\nclass ShuffledButtons extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      disabledBtn: false,\n      correctAnswerClass: '',\n      wrongAnswerClass: '',\n      answersArray: [],\n    }\n  }\n\n  checkAnswer = (stringToTest) => {\n    const { question } = this.props;\n    this.setState({\n      correctAnswerClass: 'correct-answer',\n      wrongAnswerClass: 'wrong-answer',\n      disabledBtn: true,\n    });\n    if (stringToTest === question.correct_answer) return console.log(stringToTest)\n    return console.log('wrooong')\n  }\n  \n  arrWithAllButtons = (objQuestion) => {\n    const { incorrect_answers } = objQuestion;\n    const { disabledBtn, correctAnswerClass, wrongAnswerClass } = this.state;\n\n    const incorrectAnswersArr = incorrect_answers.map((e, index) => \n      (<button\n        className={wrongAnswerClass}\n        disabled={disabledBtn}\n        onClick={() => this.checkAnswer(e)}\n        data-testid={`wrong-answer-${index}`}>\n          {e}\n      </button>));\n  \n    const allAnswers = [\n    <button\n      className={correctAnswerClass}\n      disabled={disabledBtn}\n      onClick={() => this.checkAnswer(objQuestion.correct_answer)}\n      data-testid=\"correct-answer\">\n        {objQuestion.correct_answer}\n    </button>,\n    ...incorrectAnswersArr,\n    ];\n    return allAnswers;\n  }\n  \n  shuffleAnswers = (array) => {\n    let currentIndex = array.length;\n    let temporaryValue = [];\n    let randomIndex;\n  \n    while (currentIndex !== 0) {\n      randomIndex = Math.floor(Math.random() * currentIndex);\n      currentIndex -= 1;\n  \n      temporaryValue = array[currentIndex];\n      array[currentIndex] = array[randomIndex];\n      array[randomIndex] = temporaryValue;\n    }\n    return array;\n  }\n\n  componentDidUpdate(_, prevState) {\n    if (this.state.answersArray !== prevState.answersArray) {\n      const { question } = this.props;\n      const kkk = this.shuffleAnswers(this.arrWithAllButtons(question))\n      this.setState({ answersArray: kkk })\n    }\n  }\n\n  render() {\n    const { question } = this.props;\n    const { answersArray } = this.state;\n    // console.log(question)\n    return (\n      <div>\n        {/* {this.shuffleAnswers(this.arrWithAllButtons(question)).map((e) =>\n          (<div key={e.props.children}>{e}</div>))\n        } */}\n        {answersArray.map((e) =>\n          (<div key={e.props.children}>{e}</div>))\n        }\n      </div>\n    )\n  }\n}\n\nexport default ShuffledButtons;\n"]},"metadata":{},"sourceType":"module"}