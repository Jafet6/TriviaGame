{"ast":null,"code":"var _jsxFileName = \"/home/jafet/projetos/sd-03-project-trivia-react-redux-06/src/components/GameScreen/QuestionsInfos.js\";\nimport React from 'react';\nimport './QuestionsInfos.css';\nimport questions from '../dataTest';\n\nclass QuestionsInfos extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      questionIndex: 0\n    };\n    this.nextQuestion = this.nextQuestion.bind(this);\n  }\n\n  nextQuestion() {\n    this.setState(state => ({\n      questionIndex: state.questionIndex + 1\n    }));\n  }\n\n  shuffleAnswers(objQuestion) {\n    const incorrect_answers = objQuestion.incorrect_answers;\n    const incorrectAnswersArr = incorrect_answers.map((e, index) => React.createElement(\"button\", {\n      \"data-testid\": `answer-${index}`,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 21\n      },\n      __self: this\n    }, e));\n    const shuffledAnswers = [React.createElement(\"button\", {\n      \"data-testid\": \"correct-answer\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 24\n      },\n      __self: this\n    }, objQuestion.correct_answer), ...incorrectAnswersArr];\n  }\n\n  render() {\n    const results = questions.results;\n    const questionIndex = this.state.questionIndex;\n    const question = results[questionIndex];\n    this.shuffleAnswers(question);\n    return React.createElement(\"section\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 37\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"questions-container\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 38\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"questions-header\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 39\n      },\n      __self: this\n    }, React.createElement(\"span\", {\n      \"data-testid\": \"question-category\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 40\n      },\n      __self: this\n    }, question.category), React.createElement(\"p\", {\n      \"data-testid\": \"question-text\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 41\n      },\n      __self: this\n    }, question.question)), React.createElement(\"div\", {\n      className: \"answers-buttons\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 43\n      },\n      __self: this\n    }, React.createElement(\"button\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 44\n      },\n      __self: this\n    }, \"Alternativas aqui\"), React.createElement(\"button\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 45\n      },\n      __self: this\n    }, \"Alternativas aqui\"), React.createElement(\"button\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 46\n      },\n      __self: this\n    }, \"Alternativas aqui\"), React.createElement(\"button\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 47\n      },\n      __self: this\n    }, \"Alternativas aqui\"))), React.createElement(\"button\", {\n      type: \"button\",\n      onClick: this.nextQuestion,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 50\n      },\n      __self: this\n    }, \"Pr\\xF3xima\"));\n  }\n\n}\n\nexport default QuestionsInfos;","map":{"version":3,"sources":["/home/jafet/projetos/sd-03-project-trivia-react-redux-06/src/components/GameScreen/QuestionsInfos.js"],"names":["React","questions","QuestionsInfos","Component","constructor","props","state","questionIndex","nextQuestion","bind","setState","shuffleAnswers","objQuestion","incorrect_answers","incorrectAnswersArr","map","e","index","shuffledAnswers","correct_answer","render","results","question","category"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAO,sBAAP;AACA,OAAOC,SAAP,MAAsB,aAAtB;;AAEA,MAAMC,cAAN,SAA6BF,KAAK,CAACG,SAAnC,CAA6C;AAC3CC,EAAAA,WAAW,CAAEC,KAAF,EAAS;AAClB,UAAMA,KAAN;AACA,SAAKC,KAAL,GAAa;AACXC,MAAAA,aAAa,EAAE;AADJ,KAAb;AAGA,SAAKC,YAAL,GAAoB,KAAKA,YAAL,CAAkBC,IAAlB,CAAuB,IAAvB,CAApB;AACD;;AAEDD,EAAAA,YAAY,GAAG;AACb,SAAKE,QAAL,CAAeJ,KAAD,KAAY;AAAEC,MAAAA,aAAa,EAAED,KAAK,CAACC,aAAN,GAAsB;AAAvC,KAAZ,CAAd;AACD;;AAEDI,EAAAA,cAAc,CAACC,WAAD,EAAc;AAAA,UAClBC,iBADkB,GACID,WADJ,CAClBC,iBADkB;AAE1B,UAAMC,mBAAmB,GAAGD,iBAAiB,CAACE,GAAlB,CAAsB,CAACC,CAAD,EAAIC,KAAJ,KAC/C;AAAQ,qBAAc,UAASA,KAAM,EAArC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAyCD,CAAzC,CADyB,CAA5B;AAGA,UAAME,eAAe,GAAG,CACxB;AAAQ,qBAAY,gBAApB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAsCN,WAAW,CAACO,cAAlD,CADwB,EAExB,GAAGL,mBAFqB,CAAxB;AAMD;;AAEDM,EAAAA,MAAM,GAAG;AAAA,UACCC,OADD,GACapB,SADb,CACCoB,OADD;AAAA,UAECd,aAFD,GAEmB,KAAKD,KAFxB,CAECC,aAFD;AAGP,UAAMe,QAAQ,GAAGD,OAAO,CAACd,aAAD,CAAxB;AACA,SAAKI,cAAL,CAAoBW,QAApB;AACA,WACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE;AAAK,MAAA,SAAS,EAAC,qBAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE;AAAK,MAAA,SAAS,EAAC,kBAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE;AAAM,qBAAY,mBAAlB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAuCA,QAAQ,CAACC,QAAhD,CADF,EAEE;AAAG,qBAAY,eAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAgCD,QAAQ,CAACA,QAAzC,CAFF,CADF,EAKE;AAAK,MAAA,SAAS,EAAC,iBAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,2BADF,EAEE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,2BAFF,EAGE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,2BAHF,EAIE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,2BAJF,CALF,CADF,EAaE;AAAQ,MAAA,IAAI,EAAC,QAAb;AAAsB,MAAA,OAAO,EAAE,KAAKd,YAApC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBAbF,CADF;AAiBD;;AAhD0C;;AAmD7C,eAAeN,cAAf","sourcesContent":["import React from 'react';\nimport './QuestionsInfos.css';\nimport questions from '../dataTest';\n\nclass QuestionsInfos extends React.Component {\n  constructor (props) {\n    super(props);\n    this.state = {\n      questionIndex: 0\n    }\n    this.nextQuestion = this.nextQuestion.bind(this);\n  }\n\n  nextQuestion() {\n    this.setState((state) => ({ questionIndex: state.questionIndex + 1}))\n  }\n\n  shuffleAnswers(objQuestion) {\n    const { incorrect_answers } = objQuestion\n    const incorrectAnswersArr = incorrect_answers.map((e, index) => \n      (<button data-testid={`answer-${index}`}>{e}</button>));\n\n    const shuffledAnswers = [\n    <button data-testid=\"correct-answer\">{objQuestion.correct_answer}</button>,\n    ...incorrectAnswersArr,\n    ];\n\n\n  }\n\n  render() {\n    const { results } = questions;\n    const { questionIndex } = this.state;\n    const question = results[questionIndex];\n    this.shuffleAnswers(question)\n    return (\n      <section>\n        <div className=\"questions-container\">\n          <div className=\"questions-header\">\n            <span data-testid=\"question-category\">{question.category}</span>\n            <p data-testid=\"question-text\">{question.question}</p>\n          </div>\n          <div className=\"answers-buttons\">\n            <button>Alternativas aqui</button>\n            <button>Alternativas aqui</button>\n            <button>Alternativas aqui</button>\n            <button>Alternativas aqui</button>\n          </div>\n        </div>\n        <button type=\"button\" onClick={this.nextQuestion} >Pr√≥xima</button>\n      </section>\n    )\n  }\n}\n\nexport default QuestionsInfos;\n"]},"metadata":{},"sourceType":"module"}