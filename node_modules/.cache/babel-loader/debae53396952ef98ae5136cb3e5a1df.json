{"ast":null,"code":"var _jsxFileName = \"/home/jafet/projetos/sd-03-project-trivia-react-redux-06/src/components/GameScreen/QuestionsInfos.js\";\nimport React from 'react';\nimport './QuestionsInfos.css';\nimport questions from '../dataTest';\nimport ShuffledButtons from './ShuffledButtons';\n\nclass QuestionsInfos extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.checkAnswer = stringToTest => {\n      // const { question } = this.props;\n      this.setState({\n        // correctAnswerClass: 'correct-answer',\n        // wrongAnswerClass: 'wrong-answer',\n        disabledBtn: true\n      });\n      if (stringToTest === questions.correct_answer) return console.log(stringToTest);\n      return console.log('wrooong');\n    };\n\n    this.arrWithAllButtons = objQuestion => {\n      const incorrect_answers = objQuestion.incorrect_answers,\n            correct_answer = objQuestion.correct_answer;\n      const _this$state = this.state,\n            disabledBtn = _this$state.disabledBtn,\n            correctAnswerClass = _this$state.correctAnswerClass,\n            wrongAnswerClass = _this$state.wrongAnswerClass;\n      const incorrectAnswersArr = incorrect_answers.map((e, index) => React.createElement(\"button\", {\n        className: wrongAnswerClass,\n        disabled: disabledBtn,\n        onClick: () => this.checkAnswer(e),\n        \"data-testid\": `wrong-answer-${index}`,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 35\n        },\n        __self: this\n      }, e));\n      const allAnswers = [React.createElement(\"button\", {\n        className: correctAnswerClass,\n        disabled: disabledBtn,\n        onClick: () => this.checkAnswer(objQuestion.correct_answer),\n        \"data-testid\": \"correct-answer\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 44\n        },\n        __self: this\n      }, correct_answer), ...incorrectAnswersArr];\n      return allAnswers;\n    };\n\n    this.shuffleAnswers = array => {\n      let currentIndex = array.length;\n      let temporaryValue = [];\n      let randomIndex;\n\n      while (currentIndex !== 0) {\n        randomIndex = Math.floor(Math.random() * currentIndex);\n        currentIndex -= 1;\n        temporaryValue = array[currentIndex];\n        array[currentIndex] = array[randomIndex];\n        array[randomIndex] = temporaryValue;\n      }\n\n      return array;\n    };\n\n    this.state = {\n      questionIndex: 0\n    };\n    this.nextQuestion = this.nextQuestion.bind(this);\n  }\n\n  nextQuestion() {\n    this.setState(state => ({\n      questionIndex: state.questionIndex + 1\n    }));\n  }\n\n  render() {\n    const results = questions.results;\n    const questionIndex = this.state.questionIndex;\n    const question = results[questionIndex];\n    return React.createElement(\"section\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 77\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"questions-container\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 78\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"questions-header\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 79\n      },\n      __self: this\n    }, React.createElement(\"span\", {\n      \"data-testid\": \"question-category\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 80\n      },\n      __self: this\n    }, question.category), React.createElement(\"p\", {\n      \"data-testid\": \"question-text\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 81\n      },\n      __self: this\n    }, question.question)), React.createElement(\"div\", {\n      className: \"answers-buttons\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 83\n      },\n      __self: this\n    }, React.createElement(ShuffledButtons, {\n      buttons: this.shuffleAnswers(this.arrWithAllButtons(question)),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 84\n      },\n      __self: this\n    }))), React.createElement(\"button\", {\n      type: \"button\",\n      onClick: this.nextQuestion,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 87\n      },\n      __self: this\n    }, \"Pr\\xF3xima\"));\n  }\n\n}\n\nexport default QuestionsInfos;","map":{"version":3,"sources":["/home/jafet/projetos/sd-03-project-trivia-react-redux-06/src/components/GameScreen/QuestionsInfos.js"],"names":["React","questions","ShuffledButtons","QuestionsInfos","Component","constructor","props","checkAnswer","stringToTest","setState","disabledBtn","correct_answer","console","log","arrWithAllButtons","objQuestion","incorrect_answers","state","correctAnswerClass","wrongAnswerClass","incorrectAnswersArr","map","e","index","allAnswers","shuffleAnswers","array","currentIndex","length","temporaryValue","randomIndex","Math","floor","random","questionIndex","nextQuestion","bind","render","results","question","category"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAO,sBAAP;AACA,OAAOC,SAAP,MAAsB,aAAtB;AACA,OAAOC,eAAP,MAA4B,mBAA5B;;AAEA,MAAMC,cAAN,SAA6BH,KAAK,CAACI,SAAnC,CAA6C;AAC3CC,EAAAA,WAAW,CAAEC,KAAF,EAAS;AAClB,UAAMA,KAAN;;AADkB,SAYpBC,WAZoB,GAYLC,YAAD,IAAkB;AAC9B;AACA,WAAKC,QAAL,CAAc;AACZ;AACA;AACAC,QAAAA,WAAW,EAAE;AAHD,OAAd;AAKA,UAAIF,YAAY,KAAKP,SAAS,CAACU,cAA/B,EAA+C,OAAOC,OAAO,CAACC,GAAR,CAAYL,YAAZ,CAAP;AAC/C,aAAOI,OAAO,CAACC,GAAR,CAAY,SAAZ,CAAP;AACD,KArBmB;;AAAA,SAuBpBC,iBAvBoB,GAuBCC,WAAD,IAAiB;AAAA,YAC3BC,iBAD2B,GACWD,WADX,CAC3BC,iBAD2B;AAAA,YACRL,cADQ,GACWI,WADX,CACRJ,cADQ;AAAA,0BAE2B,KAAKM,KAFhC;AAAA,YAE3BP,WAF2B,eAE3BA,WAF2B;AAAA,YAEdQ,kBAFc,eAEdA,kBAFc;AAAA,YAEMC,gBAFN,eAEMA,gBAFN;AAInC,YAAMC,mBAAmB,GAAGJ,iBAAiB,CAACK,GAAlB,CAAsB,CAACC,CAAD,EAAIC,KAAJ,KAC/C;AACC,QAAA,SAAS,EAAEJ,gBADZ;AAEC,QAAA,QAAQ,EAAET,WAFX;AAGC,QAAA,OAAO,EAAE,MAAM,KAAKH,WAAL,CAAiBe,CAAjB,CAHhB;AAIC,uBAAc,gBAAeC,KAAM,EAJpC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAKID,CALJ,CADyB,CAA5B;AASA,YAAME,UAAU,GAAG,CACjB;AACE,QAAA,SAAS,EAAEN,kBADb;AAEE,QAAA,QAAQ,EAAER,WAFZ;AAGE,QAAA,OAAO,EAAE,MAAM,KAAKH,WAAL,CAAiBQ,WAAW,CAACJ,cAA7B,CAHjB;AAIE,uBAAY,gBAJd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAKKA,cALL,CADiB,EAQjB,GAAGS,mBARc,CAAnB;AAUA,aAAOI,UAAP;AACD,KA/CmB;;AAAA,SAiDpBC,cAjDoB,GAiDFC,KAAD,IAAW;AAC1B,UAAIC,YAAY,GAAGD,KAAK,CAACE,MAAzB;AACA,UAAIC,cAAc,GAAG,EAArB;AACA,UAAIC,WAAJ;;AAEA,aAAOH,YAAY,KAAK,CAAxB,EAA2B;AACzBG,QAAAA,WAAW,GAAGC,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,MAAL,KAAgBN,YAA3B,CAAd;AACAA,QAAAA,YAAY,IAAI,CAAhB;AAEAE,QAAAA,cAAc,GAAGH,KAAK,CAACC,YAAD,CAAtB;AACAD,QAAAA,KAAK,CAACC,YAAD,CAAL,GAAsBD,KAAK,CAACI,WAAD,CAA3B;AACAJ,QAAAA,KAAK,CAACI,WAAD,CAAL,GAAqBD,cAArB;AACD;;AACD,aAAOH,KAAP;AACD,KA/DmB;;AAElB,SAAKT,KAAL,GAAa;AACXiB,MAAAA,aAAa,EAAE;AADJ,KAAb;AAGA,SAAKC,YAAL,GAAoB,KAAKA,YAAL,CAAkBC,IAAlB,CAAuB,IAAvB,CAApB;AACD;;AAEDD,EAAAA,YAAY,GAAG;AACb,SAAK1B,QAAL,CAAeQ,KAAD,KAAY;AAAEiB,MAAAA,aAAa,EAAEjB,KAAK,CAACiB,aAAN,GAAsB;AAAvC,KAAZ,CAAd;AACD;;AAuDDG,EAAAA,MAAM,GAAG;AAAA,UACCC,OADD,GACarC,SADb,CACCqC,OADD;AAAA,UAECJ,aAFD,GAEmB,KAAKjB,KAFxB,CAECiB,aAFD;AAGP,UAAMK,QAAQ,GAAGD,OAAO,CAACJ,aAAD,CAAxB;AACA,WACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE;AAAK,MAAA,SAAS,EAAC,qBAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE;AAAK,MAAA,SAAS,EAAC,kBAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE;AAAM,qBAAY,mBAAlB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAuCK,QAAQ,CAACC,QAAhD,CADF,EAEE;AAAG,qBAAY,eAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAgCD,QAAQ,CAACA,QAAzC,CAFF,CADF,EAKE;AAAK,MAAA,SAAS,EAAC,iBAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE,oBAAC,eAAD;AAAiB,MAAA,OAAO,EAAE,KAAKd,cAAL,CAAoB,KAAKX,iBAAL,CAAuByB,QAAvB,CAApB,CAA1B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADF,CALF,CADF,EAUE;AAAQ,MAAA,IAAI,EAAC,QAAb;AAAsB,MAAA,OAAO,EAAE,KAAKJ,YAApC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBAVF,CADF;AAcD;;AApF0C;;AAuF7C,eAAehC,cAAf","sourcesContent":["import React from 'react';\nimport './QuestionsInfos.css';\nimport questions from '../dataTest';\nimport ShuffledButtons from './ShuffledButtons';\n\nclass QuestionsInfos extends React.Component {\n  constructor (props) {\n    super(props);\n    this.state = {\n      questionIndex: 0\n    }\n    this.nextQuestion = this.nextQuestion.bind(this);\n  }\n\n  nextQuestion() {\n    this.setState((state) => ({ questionIndex: state.questionIndex + 1}))\n  }\n\n  checkAnswer = (stringToTest) => {\n    // const { question } = this.props;\n    this.setState({\n      // correctAnswerClass: 'correct-answer',\n      // wrongAnswerClass: 'wrong-answer',\n      disabledBtn: true,\n    });\n    if (stringToTest === questions.correct_answer) return console.log(stringToTest)\n    return console.log('wrooong')\n  }\n\n  arrWithAllButtons = (objQuestion) => {\n    const { incorrect_answers, correct_answer } = objQuestion;\n    const { disabledBtn, correctAnswerClass, wrongAnswerClass } = this.state;\n\n    const incorrectAnswersArr = incorrect_answers.map((e, index) => \n      (<button\n        className={wrongAnswerClass}\n        disabled={disabledBtn}\n        onClick={() => this.checkAnswer(e)}\n        data-testid={`wrong-answer-${index}`}>\n          {e}\n      </button>));\n  \n    const allAnswers = [\n      <button\n        className={correctAnswerClass}\n        disabled={disabledBtn}\n        onClick={() => this.checkAnswer(objQuestion.correct_answer)}\n        data-testid=\"correct-answer\">\n          {correct_answer}\n      </button>,\n      ...incorrectAnswersArr,\n    ];\n    return allAnswers;\n  }\n  \n  shuffleAnswers = (array) => {\n    let currentIndex = array.length;\n    let temporaryValue = [];\n    let randomIndex;\n  \n    while (currentIndex !== 0) {\n      randomIndex = Math.floor(Math.random() * currentIndex);\n      currentIndex -= 1;\n  \n      temporaryValue = array[currentIndex];\n      array[currentIndex] = array[randomIndex];\n      array[randomIndex] = temporaryValue;\n    }\n    return array;\n  }\n\n  render() {\n    const { results } = questions;\n    const { questionIndex } = this.state;\n    const question = results[questionIndex];\n    return (\n      <section>\n        <div className=\"questions-container\">\n          <div className=\"questions-header\">\n            <span data-testid=\"question-category\">{question.category}</span>\n            <p data-testid=\"question-text\">{question.question}</p>\n          </div>\n          <div className=\"answers-buttons\">\n            <ShuffledButtons buttons={this.shuffleAnswers(this.arrWithAllButtons(question))} />\n          </div>\n        </div>\n        <button type=\"button\" onClick={this.nextQuestion} >Próxima</button>\n      </section>\n    )\n  }\n}\n\nexport default QuestionsInfos;\n"]},"metadata":{},"sourceType":"module"}