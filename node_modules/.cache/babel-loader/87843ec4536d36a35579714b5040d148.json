{"ast":null,"code":"var _jsxFileName = \"/home/jafet/projetos/sd-03-project-trivia-react-redux-06/src/components/GameScreen/ShuffledButtons.js\";\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport { allAnswersAction } from '../../actions/allAnswersAction';\nimport './ShuffledButtons.css';\n\nconst arrWithAllButtons = objQuestion => {\n  const allAnswers = [objQuestion.correct_answer, ...objQuestion.incorrect_answers];\n  return allAnswers;\n};\n\nconst shuffleAnswers = array => {\n  let currentIndex = array.length;\n  let temporaryValue = [];\n  let randomIndex;\n  const newArr = [...array];\n\n  while (currentIndex !== 0) {\n    randomIndex = Math.floor(Math.random() * currentIndex);\n    currentIndex -= 1;\n    temporaryValue = newArr[currentIndex];\n    newArr[currentIndex] = newArr[randomIndex];\n    newArr[randomIndex] = temporaryValue;\n  }\n\n  return newArr;\n};\n\nclass ShuffledButtons extends React.Component {\n  componentDidMount() {\n    const _this$props = this.props,\n          questionsArr = _this$props.questionsArr,\n          allAnswersDispatch = _this$props.allAnswersDispatch;\n    const allAnswersArr = questionsArr.map(question => shuffleAnswers(arrWithAllButtons(question)));\n    allAnswersDispatch(allAnswersArr);\n  }\n\n  shouldShowAnswers() {\n    const allAnswers = this.props.allAnswers;\n    return allAnswers.length > 0;\n  }\n\n  renderButton(value, className, key) {\n    const _this$props2 = this.props,\n          disabledBtn = _this$props2.disabledBtn,\n          answerChoosed = _this$props2.answerChoosed;\n    return React.createElement(\"button\", {\n      type: \"button\",\n      value: value,\n      disabled: disabledBtn,\n      className: className,\n      onClick: answerChoosed,\n      key: key,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 45\n      },\n      __self: this\n    }, value);\n  }\n\n  render() {\n    const _this$props3 = this.props,\n          questionsArr = _this$props3.questionsArr,\n          questionIndex = _this$props3.questionIndex,\n          wrongAnswerClass = _this$props3.wrongAnswerClass,\n          correctAnswerClass = _this$props3.correctAnswerClass,\n          allAnswers = _this$props3.allAnswers;\n    if (!this.shouldShowAnswers()) return null;\n    return React.createElement(\"div\", {\n      className: \"answers-buttons\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 64\n      },\n      __self: this\n    }, allAnswers[questionIndex].map(button => {\n      if (button === questionsArr[questionIndex].correct_answer) {\n        return this.renderButton(button, correctAnswerClass, button) // <button\n        //   type=\"button\"\n        //   value={button}\n        //   disabled={disabledBtn}\n        //   className={correctAnswerClass}\n        //   onClick={answerChoosed}\n        //   key={button}\n        // >\n        //   {button}\n        // </button>\n        ;\n      }\n\n      return this.renderButton(button, wrongAnswerClass, button) // <button\n      //   type=\"button\"\n      //   value={button}\n      //   disabled={disabledBtn}\n      //   className={wrongAnswerClass}\n      //   onClick={answerChoosed}\n      //   key={button}\n      // >\n      //   {button}\n      // </button>\n      ;\n    }));\n  }\n\n}\n\nconst mapStateToProps = state => ({\n  questionIndex: state.questionsDataReducer.index,\n  questionsArr: state.apiQuestionsReducer.questions.results,\n  wrongAnswerClass: state.questionsDataReducer.wrongAnswerClass,\n  correctAnswerClass: state.questionsDataReducer.correctAnswerClass,\n  disabledBtn: state.questionsDataReducer.disabledBtn,\n  allAnswers: state.allAnswersReducer.allAnswers\n});\n\nconst mapDispatchToProps = dispatch => ({\n  allAnswersDispatch: arrayOfAnswers => dispatch(allAnswersAction(arrayOfAnswers))\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(ShuffledButtons);\nShuffledButtons.propTypes = {\n  questionIndex: PropTypes.number.isRequired,\n  answerChoosed: PropTypes.func.isRequired,\n  allAnswersDispatch: PropTypes.func.isRequired,\n  wrongAnswerClass: PropTypes.string,\n  correctAnswerClass: PropTypes.string,\n  disabledBtn: PropTypes.bool.isRequired,\n  questionsArr: PropTypes.arrayOf(PropTypes.object).isRequired,\n  allAnswers: PropTypes.arrayOf(PropTypes.array).isRequired\n};\nShuffledButtons.defaultProps = {\n  wrongAnswerClass: '',\n  correctAnswerClass: ''\n};","map":{"version":3,"sources":["/home/jafet/projetos/sd-03-project-trivia-react-redux-06/src/components/GameScreen/ShuffledButtons.js"],"names":["React","PropTypes","connect","allAnswersAction","arrWithAllButtons","objQuestion","allAnswers","correct_answer","incorrect_answers","shuffleAnswers","array","currentIndex","length","temporaryValue","randomIndex","newArr","Math","floor","random","ShuffledButtons","Component","componentDidMount","props","questionsArr","allAnswersDispatch","allAnswersArr","map","question","shouldShowAnswers","renderButton","value","className","key","disabledBtn","answerChoosed","render","questionIndex","wrongAnswerClass","correctAnswerClass","button","mapStateToProps","state","questionsDataReducer","index","apiQuestionsReducer","questions","results","allAnswersReducer","mapDispatchToProps","dispatch","arrayOfAnswers","propTypes","number","isRequired","func","string","bool","arrayOf","object","defaultProps"],"mappings":"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","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport { allAnswersAction } from '../../actions/allAnswersAction';\nimport './ShuffledButtons.css';\n\nconst arrWithAllButtons = (objQuestion) => {\n  const allAnswers = [objQuestion.correct_answer, ...objQuestion.incorrect_answers];\n  return allAnswers;\n};\n\nconst shuffleAnswers = (array) => {\n  let currentIndex = array.length;\n  let temporaryValue = [];\n  let randomIndex;\n  const newArr = [...array];\n\n  while (currentIndex !== 0) {\n    randomIndex = Math.floor(Math.random() * currentIndex);\n    currentIndex -= 1;\n    temporaryValue = newArr[currentIndex];\n    newArr[currentIndex] = newArr[randomIndex];\n    newArr[randomIndex] = temporaryValue;\n  }\n  return newArr;\n};\n\nclass ShuffledButtons extends React.Component {\n\n  componentDidMount() {\n    const { questionsArr, allAnswersDispatch } = this.props;\n    const allAnswersArr = questionsArr\n      .map((question) => shuffleAnswers(arrWithAllButtons(question)));\n    allAnswersDispatch(allAnswersArr);\n  }\n\n  shouldShowAnswers() {\n    const { allAnswers } = this.props;\n    return allAnswers.length > 0;\n  }\n\n  renderButton(value, className, key) {\n    const { disabledBtn, answerChoosed } = this.props;\n    return (\n      <button\n        type=\"button\"\n        value={value}\n        disabled={disabledBtn}\n        className={className}\n        onClick={answerChoosed}\n        key={key}\n      >\n        {value}\n      </button>\n    );\n  }\n\n  render() {\n    const {\n      questionsArr, questionIndex, wrongAnswerClass, correctAnswerClass, allAnswers\n    } = this.props;\n    if (!this.shouldShowAnswers()) return null;\n    return (\n      <div className=\"answers-buttons\">\n        {allAnswers[questionIndex].map((button) => {\n          if (button === questionsArr[questionIndex].correct_answer) {\n            return (\n              this.renderButton(button, correctAnswerClass, button)\n              // <button\n              //   type=\"button\"\n              //   value={button}\n              //   disabled={disabledBtn}\n              //   className={correctAnswerClass}\n              //   onClick={answerChoosed}\n              //   key={button}\n              // >\n              //   {button}\n              // </button>\n            );\n          }\n          return (\n            this.renderButton(button, wrongAnswerClass, button)\n            // <button\n            //   type=\"button\"\n            //   value={button}\n            //   disabled={disabledBtn}\n            //   className={wrongAnswerClass}\n            //   onClick={answerChoosed}\n            //   key={button}\n            // >\n            //   {button}\n            // </button>\n          );\n        })}\n      </div>\n    );\n  }\n}\n\nconst mapStateToProps = (state) => ({\n  questionIndex: state.questionsDataReducer.index,\n  questionsArr: state.apiQuestionsReducer.questions.results,\n  wrongAnswerClass: state.questionsDataReducer.wrongAnswerClass,\n  correctAnswerClass: state.questionsDataReducer.correctAnswerClass,\n  disabledBtn: state.questionsDataReducer.disabledBtn,\n  allAnswers: state.allAnswersReducer.allAnswers,\n});\n\nconst mapDispatchToProps = (dispatch) => ({\n  allAnswersDispatch: (arrayOfAnswers) => dispatch(allAnswersAction(arrayOfAnswers)),\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(ShuffledButtons);\n\nShuffledButtons.propTypes = {\n  questionIndex: PropTypes.number.isRequired,\n  answerChoosed: PropTypes.func.isRequired,\n  allAnswersDispatch: PropTypes.func.isRequired,\n  wrongAnswerClass: PropTypes.string,\n  correctAnswerClass: PropTypes.string,\n  disabledBtn: PropTypes.bool.isRequired,\n  questionsArr: PropTypes.arrayOf(PropTypes.object).isRequired,\n  allAnswers: PropTypes.arrayOf(PropTypes.array).isRequired,\n};\n\nShuffledButtons.defaultProps = {\n  wrongAnswerClass: '',\n  correctAnswerClass: '',\n};\n"]},"metadata":{},"sourceType":"module"}