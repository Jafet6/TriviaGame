{"ast":null,"code":"var _jsxFileName = \"/home/jafet/projetos/sd-03-project-trivia-react-redux-06/src/components/LoginPage/LoginContainer.js\";\nimport React from 'react';\nimport MD5 from 'crypto-js/md5';\nimport PropTypes from 'prop-types';\nimport { Link } from 'react-router-dom';\nimport { connect } from 'react-redux';\nimport { thunkQuestions, thunkToken, questionsAction } from '../../actions';\nimport { pegarEmail } from '../../actions/gravatarAction';\nimport { dadosUser } from '../../actions/dadosUser';\n\nclass LoginContainer extends React.Component {\n  static renderSettings() {\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 14\n      },\n      __self: this\n    }, React.createElement(Link, {\n      to: \" \",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 15\n      },\n      __self: this\n    }, \"Settings\"));\n  }\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      username: '',\n      email: ''\n    };\n    this.handleChange = this.handleChange.bind(this);\n    this.gerarTokenQuestions = this.gerarTokenQuestions.bind(this);\n  }\n\n  handleChange(e) {\n    const _e$target = e.target,\n          name = _e$target.name,\n          value = _e$target.value;\n    this.setState({\n      [name]: value\n    });\n  }\n\n  gerarTokenQuestions() {\n    const _this$state = this.state,\n          email = _this$state.email,\n          username = _this$state.username;\n    const _this$props = this.props,\n          importarGravatar = _this$props.importarGravatar,\n          setName = _this$props.setName,\n          userToken = _this$props.userToken,\n          importedQuestionThunk = _this$props.importedQuestionThunk;\n    importarGravatar(MD5(email).toString(), email);\n    userToken().then(({\n      token\n    }) => {\n      localStorage.setItem('token', token);\n      return importedQuestionThunk(token);\n    });\n    setName(username);\n  }\n\n  renderLogin() {\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 56\n      },\n      __self: this\n    }, React.createElement(\"label\", {\n      htmlFor: \"email\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 57\n      },\n      __self: this\n    }, \"E-mail do Gravatar:\"), React.createElement(\"input\", {\n      plasceholder: \"Email Gravatar\",\n      type: \"text\",\n      \"data-testid\": \"input-player-name\",\n      onChange: e => this.handleChange(e),\n      name: \"email\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 58\n      },\n      __self: this\n    }), React.createElement(\"label\", {\n      htmlFor: \"name\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 65\n      },\n      __self: this\n    }, \"Nome do Jogador:\"), React.createElement(\"input\", {\n      placeholder: \"Nome\",\n      onChange: e => this.handleChange(e),\n      name: \"username\",\n      type: \"name\",\n      \"data-testid\": \"input-gravatar-email\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 66\n      },\n      __self: this\n    }));\n  }\n\n  renderJogar() {\n    const _this$state2 = this.state,\n          username = _this$state2.username,\n          email = _this$state2.email;\n    let disabled = false;\n\n    if (username === '' || email === '') {\n      disabled = true;\n    }\n\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 84\n      },\n      __self: this\n    }, React.createElement(Link, {\n      to: \"/GameScreen\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 85\n      },\n      __self: this\n    }, React.createElement(\"button\", {\n      type: \"button\",\n      \"data-testid\": \"btn-play\",\n      disabled: disabled,\n      onClick: () => this.gerarTokenQuestions(),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 86\n      },\n      __self: this\n    }, \"JOGAR!\")));\n  }\n\n  render() {\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 101\n      },\n      __self: this\n    }, this.renderLogin(), this.renderJogar(), LoginContainer.renderSettings());\n  }\n\n}\n\nconst mapStateToProps = ({\n  gravatarReducer: {\n    email,\n    token\n  }\n}) => ({\n  email,\n  token\n});\n\nconst mapDispatch = dispatch => ({\n  loadingDispatch: () => dispatch(questionsAction()),\n  importedQuestionThunk: token => dispatch(thunkQuestions(token)),\n  userToken: () => dispatch(thunkToken()),\n  importarGravatar: (token, email) => dispatch(pegarEmail(token, email)),\n  setName: name => dispatch(dadosUser(name, ''))\n});\n\nexport default connect(mapStateToProps, mapDispatch)(LoginContainer);\nLoginContainer.propTypes = {\n  importedQuestionThunk: PropTypes.func.isRequired,\n  userToken: PropTypes.func.isRequired,\n  importarGravatar: PropTypes.func.isRequired,\n  setName: PropTypes.func.isRequired\n};","map":{"version":3,"sources":["/home/jafet/projetos/sd-03-project-trivia-react-redux-06/src/components/LoginPage/LoginContainer.js"],"names":["React","MD5","PropTypes","Link","connect","thunkQuestions","thunkToken","questionsAction","pegarEmail","dadosUser","LoginContainer","Component","renderSettings","constructor","props","state","username","email","handleChange","bind","gerarTokenQuestions","e","target","name","value","setState","importarGravatar","setName","userToken","importedQuestionThunk","toString","then","token","localStorage","setItem","renderLogin","renderJogar","disabled","render","mapStateToProps","gravatarReducer","mapDispatch","dispatch","loadingDispatch","propTypes","func","isRequired"],"mappings":"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","sourcesContent":["import React from 'react';\nimport MD5 from 'crypto-js/md5';\nimport PropTypes from 'prop-types';\nimport { Link } from 'react-router-dom';\nimport { connect } from 'react-redux';\nimport { thunkQuestions, thunkToken, questionsAction } from '../../actions';\nimport { pegarEmail } from '../../actions/gravatarAction';\nimport { dadosUser } from '../../actions/dadosUser';\n\n\nclass LoginContainer extends React.Component {\n  static renderSettings() {\n    return (\n      <div>\n        <Link to=\" \">\n          Settings\n        </Link>\n      </div>\n    );\n  }\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      username: '',\n      email: '',\n    };\n    this.handleChange = this.handleChange.bind(this);\n    this.gerarTokenQuestions = this.gerarTokenQuestions.bind(this);\n  }\n\n  handleChange(e) {\n    const { name, value } = e.target;\n    this.setState({ [name]: value });\n  }\n\n  gerarTokenQuestions() {\n    const { email, username } = this.state;\n    const {\n      importarGravatar,\n      setName,\n      userToken,\n      importedQuestionThunk,\n    } = this.props;\n    importarGravatar(MD5(email).toString(), email);\n    userToken()\n      .then(({ token }) => {\n        localStorage.setItem('token', token);\n        return (importedQuestionThunk(token));\n      });\n    setName(username);\n  }\n\n  renderLogin() {\n    return (\n      <div>\n        <label htmlFor=\"email\">E-mail do Gravatar:</label>\n        <input\n          plasceholder=\"Email Gravatar\"\n          type=\"text\"\n          data-testid=\"input-player-name\"\n          onChange={(e) => this.handleChange(e)}\n          name=\"email\"\n        />\n        <label htmlFor=\"name\">Nome do Jogador:</label>\n        <input\n          placeholder=\"Nome\"\n          onChange={(e) => this.handleChange(e)}\n          name=\"username\"\n          type=\"name\"\n          data-testid=\"input-gravatar-email\"\n        />\n      </div>\n    );\n  }\n\n  renderJogar() {\n    const { username, email } = this.state;\n    let disabled = false;\n    if (username === '' || email === '') {\n      disabled = true;\n    }\n    return (\n      <div>\n        <Link to=\"/GameScreen\">\n          <button\n            type=\"button\"\n            data-testid=\"btn-play\"\n            disabled={disabled}\n            onClick={() => this.gerarTokenQuestions()}\n          >\n            JOGAR!\n          </button>\n        </Link>\n      </div>\n    );\n  }\n\n  render() {\n    return (\n      <div>\n        {this.renderLogin()}\n        {this.renderJogar()}\n        {LoginContainer.renderSettings()}\n      </div>\n    );\n  }\n}\n\nconst mapStateToProps = ({\n  gravatarReducer: { email, token },\n}) => ({\n  email,\n  token,\n});\n\nconst mapDispatch = (dispatch) => ({\n  loadingDispatch: () => dispatch(questionsAction()),\n  importedQuestionThunk: (token) => (\n    dispatch(thunkQuestions(token))\n  ),\n  userToken: () => dispatch(thunkToken()),\n  importarGravatar: (token, email) => dispatch(pegarEmail(token, email)),\n  setName: (name) => dispatch(dadosUser(name, '')),\n});\n\nexport default connect(mapStateToProps, mapDispatch)(LoginContainer);\n\nLoginContainer.propTypes = {\n  importedQuestionThunk: PropTypes.func.isRequired,\n  userToken: PropTypes.func.isRequired,\n  importarGravatar: PropTypes.func.isRequired,\n  setName: PropTypes.func.isRequired,\n};\n"]},"metadata":{},"sourceType":"module"}