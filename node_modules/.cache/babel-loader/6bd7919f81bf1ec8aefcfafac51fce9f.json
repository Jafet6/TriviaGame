{"ast":null,"code":"var _jsxFileName = \"/home/jafet/projetos/sd-03-project-trivia-react-redux-06/src/components/GameScreen/QuestionsInfos.js\";\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport { newQuestionAction } from '../../actions/newQuestionAction';\nimport { timerCountAction } from '../../actions/timerCountAction';\nimport { timeOutAction } from '../../actions/timeOutAction';\nimport { checkAnswerAction } from '../../actions/checkAnswerAction';\nimport './QuestionsInfos.css';\nimport ShuffledButtons from './ShuffledButtons';\nimport NextButtonControl from './NextButtonControl';\n\nclass QuestionsInfos extends React.Component {\n  constructor(props) {\n    super(props);\n    this.answerChoosed = this.answerChoosed.bind(this);\n    this.timerFunction = this.timerFunction.bind(this);\n  }\n\n  componentDidMount() {\n    this.timerFunction();\n  }\n\n  componentWillUnmount() {\n    clearInterval(this.interval);\n  }\n\n  timerFunction() {\n    this.interval = setInterval(() => {\n      const _this$props = this.props,\n            timerCount = _this$props.timerCount,\n            timer = _this$props.timer,\n            timeOut = _this$props.timeOut;\n\n      if (timer === 0) {\n        timeOut();\n        return clearInterval(this.interval);\n      }\n\n      return timerCount();\n    }, 1000);\n  }\n\n  playersInfosLocalStorage() {\n    const _this$props2 = this.props,\n          assertions = _this$props2.assertions,\n          score = _this$props2.score,\n          name = _this$props2.name,\n          gravatarEmail = _this$props2.gravatarEmail;\n    const state = {\n      player: {\n        name,\n        assertions,\n        score,\n        gravatarEmail\n      }\n    };\n    localStorage.setItem('state', JSON.stringify(state));\n  }\n\n  rankingInfoLocalStorage() {\n    const _this$props3 = this.props,\n          picture = _this$props3.picture,\n          score = _this$props3.score,\n          name = _this$props3.name;\n    const personObject = {\n      name,\n      score,\n      picture\n    };\n\n    if (localStorage.getItem('ranking')) {\n      const rankingArray = JSON.parse(localStorage.getItem('ranking'));\n      const newRankingArr = rankingArray.reduce((acc, e) => {\n        if (e.name !== name) acc.push(e);\n        return acc;\n      }, []);\n      newRankingArr.push(personObject);\n      return localStorage.setItem('ranking', JSON.stringify(newRankingArr));\n    }\n\n    const rankingArray = [];\n    rankingArray.push(personObject);\n    return localStorage.setItem('ranking', JSON.stringify(rankingArray));\n  }\n\n  async answerChoosed(event) {\n    const _this$props4 = this.props,\n          timer = _this$props4.timer,\n          difficulty = _this$props4.difficulty,\n          checkAnswer = _this$props4.checkAnswer,\n          questionsArr = _this$props4.questionsArr,\n          questionIndex = _this$props4.questionIndex;\n    let points = 0;\n    let assertions = 0;\n    const questionAnswer = questionsArr[questionIndex];\n\n    if (event.target.value === questionAnswer.correct_answer) {\n      points = 10 + timer * difficulty;\n      assertions = 1;\n    }\n\n    await checkAnswer(points, assertions);\n    this.playersInfosLocalStorage();\n    this.rankingInfoLocalStorage();\n    return clearInterval(this.interval);\n  }\n\n  render() {\n    const _this$props5 = this.props,\n          questionIndex = _this$props5.questionIndex,\n          timer = _this$props5.timer,\n          questionsArr = _this$props5.questionsArr;\n    const question = questionsArr[questionIndex];\n    return React.createElement(\"section\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 91\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"questions-container\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 92\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"questions-header\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 93\n      },\n      __self: this\n    }, React.createElement(\"span\", {\n      \"data-testid\": \"question-category\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 94\n      },\n      __self: this\n    }, question.category), React.createElement(\"p\", {\n      \"data-testid\": \"question-text\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 95\n      },\n      __self: this\n    }, question.question)), React.createElement(ShuffledButtons, {\n      answerChoosed: this.answerChoosed,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 97\n      },\n      __self: this\n    })), React.createElement(NextButtonControl, {\n      timerFunction: this.timerFunction,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 99\n      },\n      __self: this\n    }), React.createElement(\"span\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 100\n      },\n      __self: this\n    }, timer));\n  }\n\n}\n\nconst mapStateToProps = state => ({\n  questionIndex: state.questionsDataReducer.index,\n  name: state.playersInfoReducer.username,\n  // gravatarEmail: state.\n  score: state.questionsDataReducer.points,\n  assertions: state.questionsDataReducer.assertions,\n  questionsArr: state.apiQuestionsReducer.questions.results,\n  timer: state.questionsDataReducer.timerCount,\n  wrongAnswerClass: state.questionsDataReducer.wrongAnswerClass,\n  difficulty: state.questionsDataReducer.difficulty\n});\n\nconst mapDispatchToProps = dispatch => ({\n  setNextQuestion: () => dispatch(newQuestionAction()),\n  timerCount: () => dispatch(timerCountAction()),\n  timeOut: () => dispatch(timeOutAction()),\n  checkAnswer: (points, assertions) => dispatch(checkAnswerAction(points, assertions))\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(QuestionsInfos);\nQuestionsInfos.propTypes = {\n  questionIndex: PropTypes.number.isRequired,\n  difficulty: PropTypes.number.isRequired,\n  questionsArr: PropTypes.arrayOf(PropTypes.object),\n  timer: PropTypes.number.isRequired,\n  timeOut: PropTypes.func.isRequired,\n  timerCount: PropTypes.func.isRequired,\n  checkAnswer: PropTypes.func.isRequired,\n  assertions: PropTypes.number.isRequired,\n  score: PropTypes.number.isRequired,\n  name: PropTypes.string.isRequired,\n  picture: PropTypes.string\n};\nQuestionsInfos.defaultProps = {\n  questionsArr: [],\n  picture: ''\n};","map":{"version":3,"sources":["/home/jafet/projetos/sd-03-project-trivia-react-redux-06/src/components/GameScreen/QuestionsInfos.js"],"names":["React","PropTypes","connect","newQuestionAction","timerCountAction","timeOutAction","checkAnswerAction","ShuffledButtons","NextButtonControl","QuestionsInfos","Component","constructor","props","answerChoosed","bind","timerFunction","componentDidMount","componentWillUnmount","clearInterval","interval","setInterval","timerCount","timer","timeOut","playersInfosLocalStorage","assertions","score","name","gravatarEmail","state","player","localStorage","setItem","JSON","stringify","rankingInfoLocalStorage","picture","personObject","getItem","rankingArray","parse","newRankingArr","reduce","acc","e","push","event","difficulty","checkAnswer","questionsArr","questionIndex","points","questionAnswer","target","value","correct_answer","render","question","category","mapStateToProps","questionsDataReducer","index","playersInfoReducer","username","apiQuestionsReducer","questions","results","wrongAnswerClass","mapDispatchToProps","dispatch","setNextQuestion","propTypes","number","isRequired","arrayOf","object","func","string","defaultProps"],"mappings":"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","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport { newQuestionAction } from '../../actions/newQuestionAction';\nimport { timerCountAction } from '../../actions/timerCountAction';\nimport { timeOutAction } from '../../actions/timeOutAction';\nimport { checkAnswerAction } from '../../actions/checkAnswerAction';\nimport './QuestionsInfos.css';\nimport ShuffledButtons from './ShuffledButtons';\nimport NextButtonControl from './NextButtonControl';\n\nclass QuestionsInfos extends React.Component {\n  constructor(props) {\n    super(props);\n    this.answerChoosed = this.answerChoosed.bind(this);\n    this.timerFunction = this.timerFunction.bind(this);\n  }\n\n  componentDidMount() {\n    this.timerFunction();\n  }\n\n  componentWillUnmount() {\n    clearInterval(this.interval);\n  }\n\n  timerFunction() {\n    this.interval = setInterval(() => {\n      const { timerCount, timer, timeOut } = this.props;\n\n      if (timer === 0) {\n        timeOut();\n        return clearInterval(this.interval);\n      }\n\n      return timerCount();\n    }, 1000);\n  }\n\n  playersInfosLocalStorage() {\n    const { assertions, score, name, gravatarEmail } = this.props;\n    const state = {\n      player: {\n        name,\n        assertions,\n        score,\n        gravatarEmail,\n      }\n    };\n    localStorage.setItem('state', JSON.stringify(state));\n  }\n\n  rankingInfoLocalStorage() {\n    const { picture, score, name } = this.props;\n    const personObject = { name, score, picture };\n    if (localStorage.getItem('ranking')) {\n      const rankingArray = JSON.parse(localStorage.getItem('ranking'));\n      const newRankingArr = rankingArray.reduce((acc, e) => {\n        if (e.name !== name) acc.push(e);\n        return acc;\n      }, []);\n      newRankingArr.push(personObject);\n      return localStorage.setItem('ranking', JSON.stringify(newRankingArr));\n    }\n    const rankingArray = [];\n    rankingArray.push(personObject);\n    return localStorage.setItem('ranking', JSON.stringify(rankingArray));\n  }\n\n  async answerChoosed(event) {\n    const {\n      timer, difficulty, checkAnswer, questionsArr, questionIndex,\n    } = this.props;\n    let points = 0;\n    let assertions = 0;\n    const questionAnswer = questionsArr[questionIndex];\n    if (event.target.value === questionAnswer.correct_answer) {\n      points = 10 + (timer * difficulty);\n      assertions = 1;\n    }\n    await checkAnswer(points, assertions);\n    this.playersInfosLocalStorage();\n    this.rankingInfoLocalStorage();\n    return clearInterval(this.interval);\n  }\n\n  render() {\n    const { questionIndex, timer, questionsArr } = this.props;\n    const question = questionsArr[questionIndex];\n    return (\n      <section>\n        <div className=\"questions-container\">\n          <div className=\"questions-header\">\n            <span data-testid=\"question-category\">{question.category}</span>\n            <p data-testid=\"question-text\">{question.question}</p>\n          </div>\n          <ShuffledButtons answerChoosed={this.answerChoosed} />\n        </div>\n        <NextButtonControl timerFunction={this.timerFunction} />\n        <span>{timer}</span>\n      </section>\n    );\n  }\n}\n\nconst mapStateToProps = (state) => ({\n  questionIndex: state.questionsDataReducer.index,\n  name: state.playersInfoReducer.username,\n  // gravatarEmail: state.\n  score: state.questionsDataReducer.points,\n  assertions: state.questionsDataReducer.assertions,\n  questionsArr: state.apiQuestionsReducer.questions.results,\n  timer: state.questionsDataReducer.timerCount,\n  wrongAnswerClass: state.questionsDataReducer.wrongAnswerClass,\n  difficulty: state.questionsDataReducer.difficulty,\n});\n\nconst mapDispatchToProps = (dispatch) => ({\n  setNextQuestion: () => dispatch(newQuestionAction()),\n  timerCount: () => dispatch(timerCountAction()),\n  timeOut: () => dispatch(timeOutAction()),\n  checkAnswer: (points, assertions) => dispatch(checkAnswerAction(points, assertions)),\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(QuestionsInfos);\n\nQuestionsInfos.propTypes = {\n  questionIndex: PropTypes.number.isRequired,\n  difficulty: PropTypes.number.isRequired,\n  questionsArr: PropTypes.arrayOf(PropTypes.object),\n  timer: PropTypes.number.isRequired,\n  timeOut: PropTypes.func.isRequired,\n  timerCount: PropTypes.func.isRequired,\n  checkAnswer: PropTypes.func.isRequired,\n  assertions: PropTypes.number.isRequired,\n  score: PropTypes.number.isRequired,\n  name: PropTypes.string.isRequired,\n  picture: PropTypes.string,\n};\n\nQuestionsInfos.defaultProps = {\n  questionsArr: [],\n  picture: '',\n};\n"]},"metadata":{},"sourceType":"module"}