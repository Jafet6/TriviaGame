{"ast":null,"code":"var _jsxFileName = \"/home/jafet/projetos/sd-03-project-trivia-react-redux-06/src/components/LoginPage/LoginContainer.js\";\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport CryptoJS from 'crypto-js';\nimport { Link } from 'react-router-dom';\nimport { connect } from 'react-redux';\nimport { getApiQuestions } from '../../actions/apiQuestionsAction';\nimport { getCategoriesRequest } from '../../actions/allCategoriesAction';\nimport { playersNameAction } from '../../actions/playersNameAction';\nimport { getApiGravatar } from '../../actions/gravatarAction';\nimport { gameResetAction } from '../../actions/gameResetAction';\nimport playersInfosLocalStorage from '../../service/functionsService';\nimport apiTokenRequest from '../../service/apiTokenRequest';\nimport './LoginPage.style.css';\n\nclass LoginContainer extends React.Component {\n  static renderSettings() {\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 18\n      },\n      __self: this\n    }, React.createElement(Link, {\n      to: \"/Settings\",\n      \"data-testid\": \"btn-settings\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 19\n      },\n      __self: this\n    }, React.createElement(\"button\", {\n      type: \"button\",\n      className: \"play-button\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 20\n      },\n      __self: this\n    }, \"CONFIGURA\\xC7\\xD5ES\")));\n  }\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      username: '',\n      email: ''\n    };\n    this.handleChange = this.handleChange.bind(this);\n    this.startGame = this.startGame.bind(this);\n  }\n\n  componentDidMount() {\n    const gameReset = this.props.gameReset;\n    gameReset();\n  }\n\n  handleChange(e) {\n    const _e$target = e.target,\n          name = _e$target.name,\n          value = _e$target.value;\n    this.setState({\n      [name]: value\n    });\n  }\n\n  async startGame() {\n    const _this$props = this.props,\n          apiQuestionsDispatch = _this$props.apiQuestionsDispatch,\n          playersNamesDispatch = _this$props.playersNamesDispatch,\n          apiGravatarDispatch = _this$props.apiGravatarDispatch,\n          assertions = _this$props.assertions,\n          score = _this$props.score,\n          name = _this$props.name,\n          gravatarEmail = _this$props.gravatarEmail;\n    playersInfosLocalStorage(assertions, score, name, gravatarEmail);\n    await apiTokenRequest().then(reponse => localStorage.setItem('token', reponse.token));\n    const _this$state = this.state,\n          username = _this$state.username,\n          email = _this$state.email;\n    playersNamesDispatch(username, email);\n    apiGravatarDispatch(CryptoJS.MD5(email).toString().toLowerCase());\n    apiQuestionsDispatch(localStorage.getItem('token'));\n  }\n\n  renderLogin() {\n    return React.createElement(\"div\", {\n      style: {\n        display: 'flex',\n        flexDirection: 'column'\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 68\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 69\n      },\n      __self: this\n    }, React.createElement(\"label\", {\n      className: \"login-label\",\n      htmlFor: \"email\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 70\n      },\n      __self: this\n    }, \"E-mail do Gravatar:\"), React.createElement(\"input\", {\n      className: \"login-input\",\n      type: \"text\",\n      \"data-testid\": \"input-gravatar-email\",\n      onChange: e => this.handleChange(e),\n      name: \"email\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 73\n      },\n      __self: this\n    })), React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 81\n      },\n      __self: this\n    }, React.createElement(\"label\", {\n      className: \"login-label\",\n      htmlFor: \"username\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 82\n      },\n      __self: this\n    }, \"Nome do Jogador:\"), React.createElement(\"input\", {\n      className: \"login-input\",\n      onChange: e => this.handleChange(e),\n      name: \"username\",\n      type: \"name\",\n      \"data-testid\": \"input-player-name\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 85\n      },\n      __self: this\n    })));\n  }\n\n  renderJogar() {\n    const _this$state2 = this.state,\n          username = _this$state2.username,\n          email = _this$state2.email;\n    let disabled = false;\n\n    if (username === '' || email === '') {\n      disabled = true;\n    }\n\n    return React.createElement(\"div\", {\n      style: {\n        marginTop: '20px'\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 105\n      },\n      __self: this\n    }, React.createElement(Link, {\n      to: \"/game-screen\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 106\n      },\n      __self: this\n    }, React.createElement(\"button\", {\n      className: \"play-button\",\n      type: \"button\",\n      \"data-testid\": \"btn-play\",\n      disabled: disabled,\n      onClick: this.startGame,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 107\n      },\n      __self: this\n    }, \"JOGAR!\")));\n  }\n\n  render() {\n    return React.createElement(\"div\", {\n      style: {},\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 123\n      },\n      __self: this\n    }, this.renderLogin(), this.renderJogar(), LoginContainer.renderSettings());\n  }\n\n}\n\nconst mapStateToProps = state => ({\n  email: state.gravatarReducer.email,\n  name: state.playersInfoReducer.username,\n  gravatarEmail: state.playersInfoReducer.email,\n  score: state.questionsDataReducer.points,\n  assertions: state.questionsDataReducer.assertions,\n  token: state.gravatarReducer.token,\n  apiToken: state.apiQuestionsReducer.questions\n});\n\nconst mapDispatchToProps = dispatch => ({\n  apiQuestionsDispatch: token => dispatch(getApiQuestions(token)),\n  apiCategoriesDispatch: () => dispatch(getCategoriesRequest()),\n  apiGravatarDispatch: hash => dispatch(getApiGravatar(hash)),\n  playersNamesDispatch: (username, email) => dispatch(playersNameAction(username, email)),\n  gameReset: () => dispatch(gameResetAction())\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(LoginContainer);\nLoginContainer.propTypes = {\n  apiQuestionsDispatch: PropTypes.func.isRequired,\n  playersNamesDispatch: PropTypes.func.isRequired,\n  apiGravatarDispatch: PropTypes.func.isRequired,\n  gameReset: PropTypes.func.isRequired,\n  assertions: PropTypes.number.isRequired,\n  score: PropTypes.number.isRequired,\n  name: PropTypes.string.isRequired,\n  gravatarEmail: PropTypes.string\n};\nLoginContainer.defaultProps = {\n  gravatarEmail: ''\n};","map":{"version":3,"sources":["/home/jafet/projetos/sd-03-project-trivia-react-redux-06/src/components/LoginPage/LoginContainer.js"],"names":["React","PropTypes","CryptoJS","Link","connect","getApiQuestions","getCategoriesRequest","playersNameAction","getApiGravatar","gameResetAction","playersInfosLocalStorage","apiTokenRequest","LoginContainer","Component","renderSettings","constructor","props","state","username","email","handleChange","bind","startGame","componentDidMount","gameReset","e","target","name","value","setState","apiQuestionsDispatch","playersNamesDispatch","apiGravatarDispatch","assertions","score","gravatarEmail","then","reponse","localStorage","setItem","token","MD5","toString","toLowerCase","getItem","renderLogin","display","flexDirection","renderJogar","disabled","marginTop","render","mapStateToProps","gravatarReducer","playersInfoReducer","questionsDataReducer","points","apiToken","apiQuestionsReducer","questions","mapDispatchToProps","dispatch","apiCategoriesDispatch","hash","propTypes","func","isRequired","number","string","defaultProps"],"mappings":"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","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport CryptoJS from 'crypto-js';\nimport { Link } from 'react-router-dom';\nimport { connect } from 'react-redux';\nimport { getApiQuestions } from '../../actions/apiQuestionsAction';\nimport { getCategoriesRequest } from '../../actions/allCategoriesAction';\nimport { playersNameAction } from '../../actions/playersNameAction';\nimport { getApiGravatar } from '../../actions/gravatarAction';\nimport { gameResetAction } from '../../actions/gameResetAction';\nimport playersInfosLocalStorage from '../../service/functionsService';\nimport apiTokenRequest from '../../service/apiTokenRequest';\nimport './LoginPage.style.css';\n\nclass LoginContainer extends React.Component {\n  static renderSettings() {\n    return (\n      <div>\n        <Link to=\"/Settings\" data-testid=\"btn-settings\">\n          <button type=\"button\" className=\"play-button\">\n            CONFIGURAÇÕES\n          </button>\n        </Link>\n      </div>\n    );\n  }\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      username: '',\n      email: '',\n    };\n    this.handleChange = this.handleChange.bind(this);\n    this.startGame = this.startGame.bind(this);\n  }\n\n  componentDidMount() {\n    const { gameReset } = this.props;\n    gameReset();\n  }\n\n  handleChange(e) {\n    const { name, value } = e.target;\n    this.setState({ [name]: value });\n  }\n\n  async startGame() {\n    const {\n      apiQuestionsDispatch,\n      playersNamesDispatch,\n      apiGravatarDispatch,\n      assertions,\n      score,\n      name,\n      gravatarEmail,\n    } = this.props;\n    playersInfosLocalStorage(assertions, score, name, gravatarEmail);\n    await apiTokenRequest().then((reponse) => localStorage.setItem('token', reponse.token));\n    const { username, email } = this.state;\n    playersNamesDispatch(username, email);\n    apiGravatarDispatch(CryptoJS.MD5(email).toString().toLowerCase());\n    apiQuestionsDispatch(localStorage.getItem('token'));\n  }\n\n  renderLogin() {\n    return (\n      <div style={{ display: 'flex', flexDirection: 'column' }}>\n        <div>\n          <label className=\"login-label\" htmlFor=\"email\">\n            E-mail do Gravatar:\n          </label>\n          <input\n            className=\"login-input\"\n            type=\"text\"\n            data-testid=\"input-gravatar-email\"\n            onChange={(e) => this.handleChange(e)}\n            name=\"email\"\n          />\n        </div>\n        <div>\n          <label className=\"login-label\" htmlFor=\"username\">\n            Nome do Jogador:\n          </label>\n          <input\n            className=\"login-input\"\n            onChange={(e) => this.handleChange(e)}\n            name=\"username\"\n            type=\"name\"\n            data-testid=\"input-player-name\"\n          />\n        </div>\n      </div>\n    );\n  }\n\n  renderJogar() {\n    const { username, email } = this.state;\n    let disabled = false;\n    if (username === '' || email === '') {\n      disabled = true;\n    }\n\n    return (\n      <div style={{ marginTop: '20px' }}>\n        <Link to=\"/game-screen\">\n          <button\n            className=\"play-button\"\n            type=\"button\"\n            data-testid=\"btn-play\"\n            disabled={disabled}\n            onClick={this.startGame}\n          >\n            JOGAR!\n          </button>\n        </Link>\n      </div>\n    );\n  }\n\n  render() {\n    return (\n      <div style={{}}>\n        {this.renderLogin()}\n        {this.renderJogar()}\n        {LoginContainer.renderSettings()}\n      </div>\n    );\n  }\n}\n\nconst mapStateToProps = (state) => ({\n  email: state.gravatarReducer.email,\n  name: state.playersInfoReducer.username,\n  gravatarEmail: state.playersInfoReducer.email,\n  score: state.questionsDataReducer.points,\n  assertions: state.questionsDataReducer.assertions,\n  token: state.gravatarReducer.token,\n  apiToken: state.apiQuestionsReducer.questions,\n});\n\nconst mapDispatchToProps = (dispatch) => ({\n  apiQuestionsDispatch: (token) => dispatch(getApiQuestions(token)),\n  apiCategoriesDispatch: () => dispatch(getCategoriesRequest()),\n  apiGravatarDispatch: (hash) => dispatch(getApiGravatar(hash)),\n  playersNamesDispatch: (username, email) => dispatch(playersNameAction(username, email)),\n  gameReset: () => dispatch(gameResetAction()),\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(LoginContainer);\n\nLoginContainer.propTypes = {\n  apiQuestionsDispatch: PropTypes.func.isRequired,\n  playersNamesDispatch: PropTypes.func.isRequired,\n  apiGravatarDispatch: PropTypes.func.isRequired,\n  gameReset: PropTypes.func.isRequired,\n  assertions: PropTypes.number.isRequired,\n  score: PropTypes.number.isRequired,\n  name: PropTypes.string.isRequired,\n  gravatarEmail: PropTypes.string,\n};\n\nLoginContainer.defaultProps = {\n  gravatarEmail: '',\n};\n"]},"metadata":{},"sourceType":"module"}