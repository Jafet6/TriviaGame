{"ast":null,"code":"var _jsxFileName = \"/home/jafet/projetos/sd-03-project-trivia-react-redux-06/src/components/GameScreen/ShuffledButtons.js\";\nimport React from 'react';\nimport { connect } from 'react-redux';\nimport { checkAnswerAction } from '../../actions/checkAnswerAction';\nimport './ShuffledButtons.css';\nimport questions from '../dataTest';\n\nclass ShuffledButtons extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.arrWithAllButtons = objQuestion => {\n      const incorrect_answers = objQuestion.incorrect_answers,\n            correct_answer = objQuestion.correct_answer;\n      const _this$state = this.state,\n            disabledBtn = _this$state.disabledBtn,\n            correctAnswerClass = _this$state.correctAnswerClass,\n            wrongAnswerClass = _this$state.wrongAnswerClass;\n      const allAnswers = [correct_answer, ...incorrect_answers];\n      return allAnswers;\n    };\n\n    this.shuffleAnswers = array => {\n      let currentIndex = array.length;\n      let temporaryValue = [];\n      let randomIndex;\n\n      while (currentIndex !== 0) {\n        randomIndex = Math.floor(Math.random() * currentIndex);\n        currentIndex -= 1;\n        temporaryValue = array[currentIndex];\n        array[currentIndex] = array[randomIndex];\n        array[randomIndex] = temporaryValue;\n      }\n\n      return array;\n    };\n\n    this.state = {\n      allAnswers: []\n    };\n  }\n\n  componentDidMount() {\n    const results = questions.results;\n    const allAnswersArr = results.map(question => this.shuffleAnswers(this.arrWithAllButtons(question)));\n    this.setState({\n      allAnswers: allAnswersArr\n    });\n  }\n\n  shouldShowAnswers() {\n    return this.state.allAnswers.length > 0;\n  }\n\n  render() {\n    const results = questions.results;\n    const _this$props = this.props,\n          questionIndex = _this$props.questionIndex,\n          checkAnswer = _this$props.checkAnswer,\n          wrongAnswerClass = _this$props.wrongAnswerClass,\n          correctAnswerClass = _this$props.correctAnswerClass,\n          disabledBtn = _this$props.disabledBtn;\n    const allAnswers = this.state.allAnswers;\n    if (!this.shouldShowAnswers()) return null;\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 58\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"answers-buttons\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 59\n      },\n      __self: this\n    }, allAnswers[questionIndex].map(button => {\n      if (button === results[questionIndex].correct_answer) {\n        return React.createElement(\"button\", {\n          disabled: disabledBtn,\n          className: correctAnswerClass,\n          onClick: checkAnswer,\n          key: button,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 62\n          },\n          __self: this\n        }, button);\n      }\n\n      return React.createElement(\"button\", {\n        disabled: disabledBtn,\n        className: wrongAnswerClass,\n        onClick: checkAnswer,\n        key: button,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 64\n        },\n        __self: this\n      }, button);\n    })));\n  }\n\n}\n\nconst mapStateToProps = state => ({\n  questionIndex: state.questionsDataReducer.index,\n  wrongAnswerClass: state.questionsDataReducer.wrongAnswerClass,\n  correctAnswerClass: state.questionsDataReducer.correctAnswerClass,\n  disabledBtn: state.questionsDataReducer.disabledBtn\n});\n\nconst mapDispatchToProps = dispatch => ({\n  checkAnswer: () => dispatch(checkAnswerAction())\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(ShuffledButtons);","map":{"version":3,"sources":["/home/jafet/projetos/sd-03-project-trivia-react-redux-06/src/components/GameScreen/ShuffledButtons.js"],"names":["React","connect","checkAnswerAction","questions","ShuffledButtons","Component","constructor","props","arrWithAllButtons","objQuestion","incorrect_answers","correct_answer","state","disabledBtn","correctAnswerClass","wrongAnswerClass","allAnswers","shuffleAnswers","array","currentIndex","length","temporaryValue","randomIndex","Math","floor","random","componentDidMount","results","allAnswersArr","map","question","setState","shouldShowAnswers","render","questionIndex","checkAnswer","button","mapStateToProps","questionsDataReducer","index","mapDispatchToProps","dispatch"],"mappings":"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","sourcesContent":["import React from 'react';\nimport { connect } from 'react-redux';\nimport { checkAnswerAction } from '../../actions/checkAnswerAction';\nimport './ShuffledButtons.css';\nimport questions from '../dataTest';\n\nclass ShuffledButtons extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      allAnswers: [],\n    }\n  }\n  \n  arrWithAllButtons = (objQuestion) => {\n    const { incorrect_answers, correct_answer } = objQuestion;\n    const { disabledBtn, correctAnswerClass, wrongAnswerClass } = this.state;\n  \n    const allAnswers = [\n      correct_answer,\n      ...incorrect_answers,\n    ];\n    return allAnswers;\n  }\n  \n  shuffleAnswers = (array) => {\n    let currentIndex = array.length;\n    let temporaryValue = [];\n    let randomIndex;\n  \n    while (currentIndex !== 0) {\n      randomIndex = Math.floor(Math.random() * currentIndex);\n      currentIndex -= 1;\n      temporaryValue = array[currentIndex];\n      array[currentIndex] = array[randomIndex];\n      array[randomIndex] = temporaryValue;\n    }\n    return array;\n  }\n\n  componentDidMount() {\n    const { results } = questions;\n    const allAnswersArr = results.map((question) => \n      this.shuffleAnswers(this.arrWithAllButtons(question)));\n    this.setState({ allAnswers: allAnswersArr });\n  }\n\n  shouldShowAnswers() {\n    return this.state.allAnswers.length > 0\n  }\n\n  render() {\n    const { results } = questions;\n    const { questionIndex, checkAnswer, wrongAnswerClass, correctAnswerClass, disabledBtn } = this.props;\n    const { allAnswers } = this.state;\n    if (!this.shouldShowAnswers()) return null\n    return (\n      <div>\n        <div className=\"answers-buttons\">\n          {allAnswers[questionIndex].map((button) => {\n            if (button === results[questionIndex].correct_answer) {\n              return <button disabled={disabledBtn} className={correctAnswerClass} onClick={checkAnswer} key={button}>{button}</button>\n            }\n            return <button disabled={disabledBtn} className={wrongAnswerClass} onClick={checkAnswer} key={button}>{button}</button>\n          })}\n        </div>\n      </div>\n    )\n  }\n}\n\nconst mapStateToProps = (state) => ({\n  questionIndex: state.questionsDataReducer.index,\n  wrongAnswerClass: state.questionsDataReducer.wrongAnswerClass,\n  correctAnswerClass: state.questionsDataReducer.correctAnswerClass,\n  disabledBtn: state.questionsDataReducer.disabledBtn,\n});\n\nconst mapDispatchToProps = (dispatch) => ({\n  checkAnswer: () => dispatch(checkAnswerAction()),\n})\n\nexport default connect(mapStateToProps, mapDispatchToProps)(ShuffledButtons);\n"]},"metadata":{},"sourceType":"module"}