{"ast":null,"code":"var _jsxFileName = \"/home/jafet/projetos/sd-03-project-trivia-react-redux-06/src/components/LoginPage/LoginContainer.js\";\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport { Link } from 'react-router-dom';\nimport { connect } from 'react-redux';\nimport { getApiQuestions } from '../../actions/apiQuestionsAction';\nimport { playersNameAction } from '../../actions/playersNameAction';\nimport apiTokenRequest from '../../service/apiTokenRequest';\n\nclass LoginContainer extends React.Component {\n  static renderSettings() {\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 12\n      },\n      __self: this\n    }, React.createElement(Link, {\n      to: \" \",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 13\n      },\n      __self: this\n    }, \"Settings\"));\n  }\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      username: '' // email: '',\n\n    };\n    this.handleChange = this.handleChange.bind(this);\n    this.startGame = this.startGame.bind(this);\n  }\n\n  handleChange(e) {\n    const _e$target = e.target,\n          name = _e$target.name,\n          value = _e$target.value;\n    this.setState({\n      [name]: value\n    });\n  }\n\n  async startGame() {\n    await apiTokenRequest().then(reponse => localStorage.setItem('token', reponse.token));\n    const username = this.state.username;\n    const _this$props = this.props,\n          apiQuestionsDispatch = _this$props.apiQuestionsDispatch,\n          playersNamesDispatch = _this$props.playersNamesDispatch;\n    playersNamesDispatch(username);\n    apiQuestionsDispatch(localStorage.getItem('token'));\n  }\n\n  renderLogin() {\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 45\n      },\n      __self: this\n    }, React.createElement(\"label\", {\n      htmlFor: \"email\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 46\n      },\n      __self: this\n    }, \"E-mail do Gravatar:\"), React.createElement(\"input\", {\n      plasceholder: \"Email Gravatar\",\n      type: \"email\",\n      \"data-testid\": \"input-player-name\",\n      onChange: e => this.handleChange(e),\n      name: \"email\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 47\n      },\n      __self: this\n    }), React.createElement(\"label\", {\n      htmlFor: \"name\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 54\n      },\n      __self: this\n    }, \"Nome do Jogador:\"), React.createElement(\"input\", {\n      placeholder: \"Nome\",\n      onChange: e => this.handleChange(e),\n      name: \"name\",\n      type: \"text\",\n      \"data-testid\": \"input-gravatar-email\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 55\n      },\n      __self: this\n    }));\n  }\n\n  renderJogar() {\n    // const { username, email } = this.state;\n    // let disabled = false;\n    // if (username === '' || email === '') {\n    //   disabled = true;\n    // }\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 73\n      },\n      __self: this\n    }, React.createElement(Link, {\n      to: \"/game-screen\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 74\n      },\n      __self: this\n    }, React.createElement(\"button\", {\n      type: \"button\",\n      \"data-testid\": \"btn-play\" // disabled={disabled}\n      ,\n      onClick: this.startGame,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 75\n      },\n      __self: this\n    }, \"JOGAR!\")));\n  }\n\n  render() {\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 90\n      },\n      __self: this\n    }, this.renderLogin(), this.renderJogar(), LoginContainer.renderSettings());\n  }\n\n}\n\nconst mapStateToProps = state => ({\n  email: state.gravatarReducer.email,\n  token: state.gravatarReducer.token,\n  apiToken: state.apiQuestionsReducer.questions\n});\n\nconst mapDispatchToProps = dispatch => ({\n  apiQuestionsDispatch: token => dispatch(getApiQuestions(token)),\n  playersNamesDispatch: username => dispatch(playersNameAction(username))\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(LoginContainer);\nLoginContainer.propTypes = {\n  apiQuestionsDispatch: PropTypes.func.isRequired,\n  playersNamesDispatch: PropTypes.func.isRequired\n};","map":{"version":3,"sources":["/home/jafet/projetos/sd-03-project-trivia-react-redux-06/src/components/LoginPage/LoginContainer.js"],"names":["React","PropTypes","Link","connect","getApiQuestions","playersNameAction","apiTokenRequest","LoginContainer","Component","renderSettings","constructor","props","state","username","handleChange","bind","startGame","e","target","name","value","setState","then","reponse","localStorage","setItem","token","apiQuestionsDispatch","playersNamesDispatch","getItem","renderLogin","renderJogar","render","mapStateToProps","email","gravatarReducer","apiToken","apiQuestionsReducer","questions","mapDispatchToProps","dispatch","propTypes","func","isRequired"],"mappings":"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","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport { Link } from 'react-router-dom';\nimport { connect } from 'react-redux';\nimport { getApiQuestions } from '../../actions/apiQuestionsAction';\nimport { playersNameAction } from '../../actions/playersNameAction';\nimport apiTokenRequest from '../../service/apiTokenRequest';\n\nclass LoginContainer extends React.Component {\n  static renderSettings() {\n    return (\n      <div>\n        <Link to=\" \">\n          Settings\n        </Link>\n      </div>\n    );\n  }\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      username: '',\n      // email: '',\n    };\n    this.handleChange = this.handleChange.bind(this);\n    this.startGame = this.startGame.bind(this);\n  }\n\n  handleChange(e) {\n    const { name, value } = e.target;\n    this.setState({ [name]: value });\n  }\n\n  async startGame() {\n    await apiTokenRequest().then((reponse) => localStorage.setItem('token', reponse.token));\n    const { username } = this.state;\n    const { apiQuestionsDispatch, playersNamesDispatch } = this.props;\n    playersNamesDispatch(username);\n    apiQuestionsDispatch(localStorage.getItem('token'));\n  }\n\n  renderLogin() {\n    return (\n      <div>\n        <label htmlFor=\"email\">E-mail do Gravatar:</label>\n        <input\n          plasceholder=\"Email Gravatar\"\n          type=\"email\"\n          data-testid=\"input-player-name\"\n          onChange={(e) => this.handleChange(e)}\n          name=\"email\"\n        />\n        <label htmlFor=\"name\">Nome do Jogador:</label>\n        <input\n          placeholder=\"Nome\"\n          onChange={(e) => this.handleChange(e)}\n          name=\"name\"\n          type=\"text\"\n          data-testid=\"input-gravatar-email\"\n        />\n      </div>\n    );\n  }\n\n  renderJogar() {\n    // const { username, email } = this.state;\n    // let disabled = false;\n    // if (username === '' || email === '') {\n    //   disabled = true;\n    // }\n    return (\n      <div>\n        <Link to=\"/game-screen\">\n          <button\n            type=\"button\"\n            data-testid=\"btn-play\"\n            // disabled={disabled}\n            onClick={this.startGame}\n          >\n            JOGAR!\n          </button>\n        </Link>\n      </div>\n    );\n  }\n\n  render() {\n    return (\n      <div>\n        {this.renderLogin()}\n        {this.renderJogar()}\n        {LoginContainer.renderSettings()}\n      </div>\n    );\n  }\n}\n\nconst mapStateToProps = (state) => ({\n  email: state.gravatarReducer.email,\n  token: state.gravatarReducer.token,\n  apiToken: state.apiQuestionsReducer.questions,\n});\n\nconst mapDispatchToProps = (dispatch) => ({\n  apiQuestionsDispatch: (token) => dispatch(getApiQuestions(token)),\n  playersNamesDispatch: (username) => dispatch(playersNameAction(username)),\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(LoginContainer);\n\nLoginContainer.propTypes = {\n  apiQuestionsDispatch: PropTypes.func.isRequired,\n  playersNamesDispatch: PropTypes.func.isRequired,\n};\n"]},"metadata":{},"sourceType":"module"}