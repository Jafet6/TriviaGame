{"ast":null,"code":"var _jsxFileName = \"/home/jafet/projetos/sd-03-project-trivia-react-redux-06/src/components/GameScreen/ShuffledButtons.js\";\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport './ShuffledButtons.css';\n\nconst arrWithAllButtons = objQuestion => {\n  const allAnswers = [objQuestion.correct_answer, ...objQuestion.incorrect_answers];\n  return allAnswers;\n};\n\nconst shuffleAnswers = array => {\n  let currentIndex = array.length;\n  let temporaryValue = [];\n  let randomIndex;\n\n  while (currentIndex !== 0) {\n    randomIndex = Math.floor(Math.random() * currentIndex);\n    currentIndex -= 1;\n    temporaryValue = array[currentIndex];\n    array[currentIndex] = array[randomIndex];\n    array[randomIndex] = temporaryValue;\n  }\n\n  return array;\n};\n\nclass ShuffledButtons extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      allAnswers: []\n    };\n  }\n\n  componentDidMount() {\n    const questionsArr = this.props.questionsArr;\n    const allAnswersArr = questionsArr.map(question => shuffleAnswers(arrWithAllButtons(question)));\n    this.setState({\n      allAnswers: allAnswersArr\n    });\n  }\n\n  shouldShowAnswers() {\n    const allAnswers = this.state.allAnswers;\n    return allAnswers.length > 0;\n  }\n\n  render() {\n    const _this$props = this.props,\n          questionsArr = _this$props.questionsArr,\n          questionIndex = _this$props.questionIndex,\n          answerChoosed = _this$props.answerChoosed,\n          wrongAnswerClass = _this$props.wrongAnswerClass,\n          correctAnswerClass = _this$props.correctAnswerClass,\n          disabledBtn = _this$props.disabledBtn;\n    const allAnswers = this.state.allAnswers;\n    if (!this.shouldShowAnswers()) return null;\n    return React.createElement(\"div\", {\n      className: \"answers-buttons\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 58\n      },\n      __self: this\n    }, allAnswers[questionIndex].map(button => {\n      if (button === questionsArr[questionIndex].correct_answer) {\n        return React.createElement(\"button\", {\n          type: \"button\",\n          value: button,\n          disabled: disabledBtn,\n          className: correctAnswerClass,\n          onClick: answerChoosed,\n          key: button,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 62\n          },\n          __self: this\n        }, button);\n      }\n\n      return React.createElement(\"button\", {\n        type: \"button\",\n        value: button,\n        disabled: disabledBtn,\n        className: wrongAnswerClass,\n        onClick: answerChoosed,\n        key: button,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 75\n        },\n        __self: this\n      }, button);\n    }));\n  }\n\n}\n\nconst mapStateToProps = state => ({\n  questionIndex: state.questionsDataReducer.index,\n  questionsArr: state.apiQuestionsReducer.questions.results,\n  wrongAnswerClass: state.questionsDataReducer.wrongAnswerClass,\n  correctAnswerClass: state.questionsDataReducer.correctAnswerClass,\n  disabledBtn: state.questionsDataReducer.disabledBtn\n});\n\nexport default connect(mapStateToProps)(ShuffledButtons);\nShuffledButtons.propTypes = {\n  questionIndex: PropTypes.number.isRequired,\n  answerChoosed: PropTypes.func.isRequired,\n  wrongAnswerClass: PropTypes.string,\n  correctAnswerClass: PropTypes.string,\n  disabledBtn: PropTypes.bool.isRequired,\n  questionsArr: PropTypes.arrayOf(PropTypes.object).isRequired\n};\nShuffledButtons.defaultProps = {\n  wrongAnswerClass: '',\n  correctAnswerClass: ''\n};","map":{"version":3,"sources":["/home/jafet/projetos/sd-03-project-trivia-react-redux-06/src/components/GameScreen/ShuffledButtons.js"],"names":["React","PropTypes","connect","arrWithAllButtons","objQuestion","allAnswers","correct_answer","incorrect_answers","shuffleAnswers","array","currentIndex","length","temporaryValue","randomIndex","Math","floor","random","ShuffledButtons","Component","constructor","props","state","componentDidMount","questionsArr","allAnswersArr","map","question","setState","shouldShowAnswers","render","questionIndex","answerChoosed","wrongAnswerClass","correctAnswerClass","disabledBtn","button","mapStateToProps","questionsDataReducer","index","apiQuestionsReducer","questions","results","propTypes","number","isRequired","func","string","bool","arrayOf","object","defaultProps"],"mappings":"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","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport './ShuffledButtons.css';\n\nconst arrWithAllButtons = (objQuestion) => {\n  const allAnswers = [objQuestion.correct_answer, ...objQuestion.incorrect_answers];\n  return allAnswers;\n};\n\nconst shuffleAnswers = (array) => {\n  let currentIndex = array.length;\n  let temporaryValue = [];\n  let randomIndex;\n\n  while (currentIndex !== 0) {\n    randomIndex = Math.floor(Math.random() * currentIndex);\n    currentIndex -= 1;\n    temporaryValue = array[currentIndex];\n    array[currentIndex] = array[randomIndex];\n    array[randomIndex] = temporaryValue;\n  }\n  return array;\n};\n\nclass ShuffledButtons extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      allAnswers: [],\n    };\n  }\n\n  componentDidMount() {\n    const { questionsArr } = this.props;\n    const allAnswersArr = questionsArr\n      .map((question) => shuffleAnswers(arrWithAllButtons(question)));\n    this.setState({ allAnswers: allAnswersArr });\n  }\n\n  shouldShowAnswers() {\n    const { allAnswers } = this.state;\n    return allAnswers.length > 0;\n  }\n\n  render() {\n    const {\n      questionsArr,\n      questionIndex,\n      answerChoosed,\n      wrongAnswerClass,\n      correctAnswerClass,\n      disabledBtn,\n    } = this.props;\n    const { allAnswers } = this.state;\n    if (!this.shouldShowAnswers()) return null;\n    return (\n      <div className=\"answers-buttons\">\n        {allAnswers[questionIndex].map((button) => {\n          if (button === questionsArr[questionIndex].correct_answer) {\n            return (\n              <button\n                type=\"button\"\n                value={button}\n                disabled={disabledBtn}\n                className={correctAnswerClass}\n                onClick={answerChoosed}\n                key={button}\n              >\n                {button}\n              </button>\n            );\n          }\n          return (\n            <button\n              type=\"button\"\n              value={button}\n              disabled={disabledBtn}\n              className={wrongAnswerClass}\n              onClick={answerChoosed}\n              key={button}\n            >\n              {button}\n            </button>\n          );\n        })}\n      </div>\n    );\n  }\n}\n\nconst mapStateToProps = (state) => ({\n  questionIndex: state.questionsDataReducer.index,\n  questionsArr: state.apiQuestionsReducer.questions.results,\n  wrongAnswerClass: state.questionsDataReducer.wrongAnswerClass,\n  correctAnswerClass: state.questionsDataReducer.correctAnswerClass,\n  disabledBtn: state.questionsDataReducer.disabledBtn,\n});\n\nexport default connect(mapStateToProps)(ShuffledButtons);\n\nShuffledButtons.propTypes = {\n  questionIndex: PropTypes.number.isRequired,\n  answerChoosed: PropTypes.func.isRequired,\n  wrongAnswerClass: PropTypes.string,\n  correctAnswerClass: PropTypes.string,\n  disabledBtn: PropTypes.bool.isRequired,\n  questionsArr: PropTypes.arrayOf(PropTypes.object).isRequired,\n};\n\nShuffledButtons.defaultProps = {\n  wrongAnswerClass: '',\n  correctAnswerClass: '',\n};\n"]},"metadata":{},"sourceType":"module"}