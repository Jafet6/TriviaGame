{"ast":null,"code":"var _jsxFileName = \"/home/jafet/projetos/sd-03-project-trivia-react-redux-06/src/components/GameScreen/QuestionsInfos.js\";\nimport React from 'react';\nimport './QuestionsInfos.css';\nimport questions from '../dataTest';\n\nclass QuestionsInfos extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      questionIndex: 0\n    };\n    this.nextQuestion = this.nextQuestion.bind(this);\n  }\n\n  nextQuestion() {\n    this.setState(state => ({\n      questionIndex: state.questionIndex + 1\n    }));\n  }\n\n  arrWithAllButtons(objQuestion) {\n    const incorrect_answers = objQuestion.incorrect_answers;\n    const incorrectAnswersArr = incorrect_answers.map((e, index) => React.createElement(\"button\", {\n      \"data-testid\": `answer-${index}`,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 21\n      },\n      __self: this\n    }, e));\n    const allAnswers = [React.createElement(\"button\", {\n      \"data-testid\": \"correct-answer\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 23\n      },\n      __self: this\n    }, objQuestion.correct_answer), ...incorrectAnswersArr];\n    return allAnswers;\n  }\n\n  shuffleAnswers(array) {\n    const currentIndex = array.length;\n\n    while (currentIndex !== 0) {\n      randomIndex = Math.floor(Math.random() * currentIndex);\n      currentIndex -= 1;\n      temporaryValue = array[currentIndex];\n      array[currentIndex] = array[randomIndex];\n      array[randomIndex] = temporaryValue;\n    }\n\n    return array;\n  }\n\n  render() {\n    const results = questions.results;\n    const questionIndex = this.state.questionIndex;\n    const question = results[questionIndex];\n    return React.createElement(\"section\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 49\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"questions-container\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 50\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"questions-header\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 51\n      },\n      __self: this\n    }, React.createElement(\"span\", {\n      \"data-testid\": \"question-category\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 52\n      },\n      __self: this\n    }, question.category), React.createElement(\"p\", {\n      \"data-testid\": \"question-text\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 53\n      },\n      __self: this\n    }, question.question)), React.createElement(\"div\", {\n      className: \"answers-buttons\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 55\n      },\n      __self: this\n    }, this.shuffleAnswers(arrWithAllButtons(question)).map(e => e))), React.createElement(\"button\", {\n      type: \"button\",\n      onClick: this.nextQuestion,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 59\n      },\n      __self: this\n    }, \"Pr\\xF3xima\"));\n  }\n\n}\n\nexport default QuestionsInfos;","map":{"version":3,"sources":["/home/jafet/projetos/sd-03-project-trivia-react-redux-06/src/components/GameScreen/QuestionsInfos.js"],"names":["React","questions","QuestionsInfos","Component","constructor","props","state","questionIndex","nextQuestion","bind","setState","arrWithAllButtons","objQuestion","incorrect_answers","incorrectAnswersArr","map","e","index","allAnswers","correct_answer","shuffleAnswers","array","currentIndex","length","randomIndex","Math","floor","random","temporaryValue","render","results","question","category"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAO,sBAAP;AACA,OAAOC,SAAP,MAAsB,aAAtB;;AAEA,MAAMC,cAAN,SAA6BF,KAAK,CAACG,SAAnC,CAA6C;AAC3CC,EAAAA,WAAW,CAAEC,KAAF,EAAS;AAClB,UAAMA,KAAN;AACA,SAAKC,KAAL,GAAa;AACXC,MAAAA,aAAa,EAAE;AADJ,KAAb;AAGA,SAAKC,YAAL,GAAoB,KAAKA,YAAL,CAAkBC,IAAlB,CAAuB,IAAvB,CAApB;AACD;;AAEDD,EAAAA,YAAY,GAAG;AACb,SAAKE,QAAL,CAAeJ,KAAD,KAAY;AAAEC,MAAAA,aAAa,EAAED,KAAK,CAACC,aAAN,GAAsB;AAAvC,KAAZ,CAAd;AACD;;AAEDI,EAAAA,iBAAiB,CAACC,WAAD,EAAc;AAAA,UACrBC,iBADqB,GACCD,WADD,CACrBC,iBADqB;AAE7B,UAAMC,mBAAmB,GAAGD,iBAAiB,CAACE,GAAlB,CAAsB,CAACC,CAAD,EAAIC,KAAJ,KAC/C;AAAQ,qBAAc,UAASA,KAAM,EAArC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAyCD,CAAzC,CADyB,CAA5B;AAEA,UAAME,UAAU,GAAG,CACnB;AAAQ,qBAAY,gBAApB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAsCN,WAAW,CAACO,cAAlD,CADmB,EAEnB,GAAGL,mBAFgB,CAAnB;AAIA,WAAOI,UAAP;AACD;;AAEDE,EAAAA,cAAc,CAACC,KAAD,EAAQ;AACpB,UAAMC,YAAY,GAAGD,KAAK,CAACE,MAA3B;;AAEA,WAAOD,YAAY,KAAK,CAAxB,EAA2B;AACzBE,MAAAA,WAAW,GAAGC,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,MAAL,KAAgBL,YAA3B,CAAd;AACAA,MAAAA,YAAY,IAAI,CAAhB;AAEAM,MAAAA,cAAc,GAAGP,KAAK,CAACC,YAAD,CAAtB;AACAD,MAAAA,KAAK,CAACC,YAAD,CAAL,GAAsBD,KAAK,CAACG,WAAD,CAA3B;AACAH,MAAAA,KAAK,CAACG,WAAD,CAAL,GAAqBI,cAArB;AACD;;AACD,WAAOP,KAAP;AACD;;AAGDQ,EAAAA,MAAM,GAAG;AAAA,UACCC,OADD,GACa7B,SADb,CACC6B,OADD;AAAA,UAECvB,aAFD,GAEmB,KAAKD,KAFxB,CAECC,aAFD;AAGP,UAAMwB,QAAQ,GAAGD,OAAO,CAACvB,aAAD,CAAxB;AACA,WACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE;AAAK,MAAA,SAAS,EAAC,qBAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE;AAAK,MAAA,SAAS,EAAC,kBAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE;AAAM,qBAAY,mBAAlB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAuCwB,QAAQ,CAACC,QAAhD,CADF,EAEE;AAAG,qBAAY,eAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAgCD,QAAQ,CAACA,QAAzC,CAFF,CADF,EAKE;AAAK,MAAA,SAAS,EAAC,iBAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACG,KAAKX,cAAL,CAAoBT,iBAAiB,CAACoB,QAAD,CAArC,EAAiDhB,GAAjD,CAAsDC,CAAD,IAAOA,CAA5D,CADH,CALF,CADF,EAUE;AAAQ,MAAA,IAAI,EAAC,QAAb;AAAsB,MAAA,OAAO,EAAE,KAAKR,YAApC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBAVF,CADF;AAcD;;AAzD0C;;AA4D7C,eAAeN,cAAf","sourcesContent":["import React from 'react';\nimport './QuestionsInfos.css';\nimport questions from '../dataTest';\n\nclass QuestionsInfos extends React.Component {\n  constructor (props) {\n    super(props);\n    this.state = {\n      questionIndex: 0\n    }\n    this.nextQuestion = this.nextQuestion.bind(this);\n  }\n\n  nextQuestion() {\n    this.setState((state) => ({ questionIndex: state.questionIndex + 1}))\n  }\n\n  arrWithAllButtons(objQuestion) {\n    const { incorrect_answers } = objQuestion\n    const incorrectAnswersArr = incorrect_answers.map((e, index) => \n      (<button data-testid={`answer-${index}`}>{e}</button>));\n    const allAnswers = [\n    <button data-testid=\"correct-answer\">{objQuestion.correct_answer}</button>,\n    ...incorrectAnswersArr,\n    ];\n    return allAnswers;\n  }\n\n  shuffleAnswers(array) {\n    const currentIndex = array.length;\n\n    while (currentIndex !== 0) {\n      randomIndex = Math.floor(Math.random() * currentIndex);\n      currentIndex -= 1;\n\n      temporaryValue = array[currentIndex];\n      array[currentIndex] = array[randomIndex];\n      array[randomIndex] = temporaryValue;\n    }\n    return array;\n  }\n\n\n  render() {\n    const { results } = questions;\n    const { questionIndex } = this.state;\n    const question = results[questionIndex];\n    return (\n      <section>\n        <div className=\"questions-container\">\n          <div className=\"questions-header\">\n            <span data-testid=\"question-category\">{question.category}</span>\n            <p data-testid=\"question-text\">{question.question}</p>\n          </div>\n          <div className=\"answers-buttons\">\n            {this.shuffleAnswers(arrWithAllButtons(question)).map((e) => e)}\n          </div>\n        </div>\n        <button type=\"button\" onClick={this.nextQuestion} >Pr√≥xima</button>\n      </section>\n    )\n  }\n}\n\nexport default QuestionsInfos;\n"]},"metadata":{},"sourceType":"module"}