{"ast":null,"code":"import _classCallCheck from\"/home/jafet/GithubPages/triviaGame/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";import _createClass from\"/home/jafet/GithubPages/triviaGame/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";import _possibleConstructorReturn from\"/home/jafet/GithubPages/triviaGame/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";import _getPrototypeOf from\"/home/jafet/GithubPages/triviaGame/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";import _inherits from\"/home/jafet/GithubPages/triviaGame/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";import _toConsumableArray from\"/home/jafet/GithubPages/triviaGame/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";import React from'react';import{connect}from'react-redux';import he from'he';import{allAnswersAction}from'../../actions/allAnswersAction';import'./ShuffledButtons.css';var arrWithAllButtons=function arrWithAllButtons(objQuestion){var allAnswers=[objQuestion.correct_answer].concat(_toConsumableArray(objQuestion.incorrect_answers));return allAnswers;};var shuffleAnswers=function shuffleAnswers(array){var currentIndex=array.length;var temporaryValue=[];var randomIndex;var newArr=_toConsumableArray(array);while(currentIndex!==0){randomIndex=Math.floor(Math.random()*currentIndex);currentIndex-=1;temporaryValue=newArr[currentIndex];newArr[currentIndex]=newArr[randomIndex];newArr[randomIndex]=temporaryValue;}return newArr;};var ShuffledButtons=/*#__PURE__*/function(_React$Component){_inherits(ShuffledButtons,_React$Component);function ShuffledButtons(){_classCallCheck(this,ShuffledButtons);return _possibleConstructorReturn(this,_getPrototypeOf(ShuffledButtons).apply(this,arguments));}_createClass(ShuffledButtons,[{key:\"componentDidMount\",value:function componentDidMount(){var _this$props=this.props,questionsArr=_this$props.questionsArr,allAnswersDispatch=_this$props.allAnswersDispatch;var allAnswersArr=questionsArr.map(function(question){return shuffleAnswers(arrWithAllButtons(question));});allAnswersDispatch(allAnswersArr);}},{key:\"shouldShowAnswers\",value:function shouldShowAnswers(){var allAnswers=this.props.allAnswers;return allAnswers.length>0;}},{key:\"renderButton\",value:function renderButton(value,className,key,datatestId,index){var _this$props2=this.props,disabledBtn=_this$props2.disabledBtn,answerChoosed=_this$props2.answerChoosed;return React.createElement(\"div\",{className:\"button-display question-button\"},React.createElement(\"div\",null,React.createElement(\"p\",{className:\"button-display-text\"},index+1)),React.createElement(\"div\",null,React.createElement(\"button\",{\"data-testid\":datatestId,type:\"button\",value:value,disabled:disabledBtn,className:\"\".concat(className,\" button-style\"),onClick:answerChoosed,key:key},he.decode(value))));}},{key:\"render\",value:function render(){var _this=this;var _this$props3=this.props,questionsArr=_this$props3.questionsArr,questionIndex=_this$props3.questionIndex,wrongAnswerClass=_this$props3.wrongAnswerClass,correctAnswerClass=_this$props3.correctAnswerClass,allAnswers=_this$props3.allAnswers;if(!this.shouldShowAnswers())return null;return React.createElement(\"div\",{className:\"answers-buttons\"},allAnswers[questionIndex].map(function(button,index){if(button===questionsArr[questionIndex].correct_answer){return _this.renderButton(button,correctAnswerClass,button,'correct-answer',index);}return _this.renderButton(button,wrongAnswerClass,button,\"wrong-answer-\".concat(index),index);}));}}]);return ShuffledButtons;}(React.Component);var mapStateToProps=function mapStateToProps(state){return{questionIndex:state.questionsDataReducer.index,questionsArr:state.apiQuestionsReducer.questions.results,wrongAnswerClass:state.questionsDataReducer.wrongAnswerClass,correctAnswerClass:state.questionsDataReducer.correctAnswerClass,disabledBtn:state.questionsDataReducer.disabledBtn,allAnswers:state.allAnswersReducer.allAnswers};};var mapDispatchToProps=function mapDispatchToProps(dispatch){return{allAnswersDispatch:function allAnswersDispatch(arrayOfAnswers){return dispatch(allAnswersAction(arrayOfAnswers));}};};export default connect(mapStateToProps,mapDispatchToProps)(ShuffledButtons);ShuffledButtons.defaultProps={wrongAnswerClass:'',correctAnswerClass:''};","map":{"version":3,"sources":["/home/jafet/GithubPages/triviaGame/src/components/GameScreen/ShuffledButtons.js"],"names":["React","connect","he","allAnswersAction","arrWithAllButtons","objQuestion","allAnswers","correct_answer","incorrect_answers","shuffleAnswers","array","currentIndex","length","temporaryValue","randomIndex","newArr","Math","floor","random","ShuffledButtons","props","questionsArr","allAnswersDispatch","allAnswersArr","map","question","value","className","key","datatestId","index","disabledBtn","answerChoosed","decode","questionIndex","wrongAnswerClass","correctAnswerClass","shouldShowAnswers","button","renderButton","Component","mapStateToProps","state","questionsDataReducer","apiQuestionsReducer","questions","results","allAnswersReducer","mapDispatchToProps","dispatch","arrayOfAnswers","defaultProps"],"mappings":"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","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport he from 'he';\nimport { allAnswersAction } from '../../actions/allAnswersAction';\nimport './ShuffledButtons.css';\n\nconst arrWithAllButtons = (objQuestion) => {\n  const allAnswers = [objQuestion.correct_answer, ...objQuestion.incorrect_answers];\n  return allAnswers;\n};\n\nconst shuffleAnswers = (array) => {\n  let currentIndex = array.length;\n  let temporaryValue = [];\n  let randomIndex;\n  const newArr = [...array];\n\n  while (currentIndex !== 0) {\n    randomIndex = Math.floor(Math.random() * currentIndex);\n    currentIndex -= 1;\n    temporaryValue = newArr[currentIndex];\n    newArr[currentIndex] = newArr[randomIndex];\n    newArr[randomIndex] = temporaryValue;\n  }\n  return newArr;\n};\n\nclass ShuffledButtons extends React.Component {\n  componentDidMount() {\n    const { questionsArr, allAnswersDispatch } = this.props;\n    const allAnswersArr = questionsArr\n      .map((question) => shuffleAnswers(arrWithAllButtons(question)));\n    allAnswersDispatch(allAnswersArr);\n  }\n\n  shouldShowAnswers() {\n    const { allAnswers } = this.props;\n    return allAnswers.length > 0;\n  }\n\n  renderButton(value, className, key, datatestId, index) {\n    const { disabledBtn, answerChoosed } = this.props;\n    return (\n      <div className=\"button-display question-button\">\n        <div>\n          <p className=\"button-display-text\">{index + 1}</p>\n        </div>\n        <div>\n          <button\n            data-testid={datatestId}\n            type=\"button\"\n            value={value}\n            disabled={disabledBtn}\n            className={`${className} button-style`}\n            onClick={answerChoosed}\n            key={key}\n          >\n            {he.decode(value)}\n          </button>\n        </div>\n      </div>\n    );\n  }\n\n  render() {\n    const {\n      questionsArr,\n      questionIndex,\n      wrongAnswerClass,\n      correctAnswerClass,\n      allAnswers,\n    } = this.props;\n    if (!this.shouldShowAnswers()) return null;\n    return (\n      <div className=\"answers-buttons\">\n        {allAnswers[questionIndex].map((button, index) => {\n          if (button === questionsArr[questionIndex].correct_answer) {\n            return this.renderButton(\n              button,\n              correctAnswerClass,\n              button,\n              'correct-answer',\n              index,\n            );\n          }\n          return this.renderButton(\n            button,\n            wrongAnswerClass,\n            button,\n            `wrong-answer-${index}`,\n            index,\n          );\n        })}\n      </div>\n    );\n  }\n}\n\nconst mapStateToProps = (state) => ({\n  questionIndex: state.questionsDataReducer.index,\n  questionsArr: state.apiQuestionsReducer.questions.results,\n  wrongAnswerClass: state.questionsDataReducer.wrongAnswerClass,\n  correctAnswerClass: state.questionsDataReducer.correctAnswerClass,\n  disabledBtn: state.questionsDataReducer.disabledBtn,\n  allAnswers: state.allAnswersReducer.allAnswers,\n});\n\nconst mapDispatchToProps = (dispatch) => ({\n  allAnswersDispatch: (arrayOfAnswers) => dispatch(allAnswersAction(arrayOfAnswers)),\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(ShuffledButtons);\n\nShuffledButtons.propTypes = {\n  questionIndex: PropTypes.number.isRequired,\n  answerChoosed: PropTypes.func.isRequired,\n  allAnswersDispatch: PropTypes.func.isRequired,\n  wrongAnswerClass: PropTypes.string,\n  correctAnswerClass: PropTypes.string,\n  disabledBtn: PropTypes.bool.isRequired,\n  questionsArr: PropTypes.arrayOf(PropTypes.object).isRequired,\n  allAnswers: PropTypes.arrayOf(PropTypes.array).isRequired,\n};\n\nShuffledButtons.defaultProps = {\n  wrongAnswerClass: '',\n  correctAnswerClass: '',\n};\n"]},"metadata":{},"sourceType":"module"}