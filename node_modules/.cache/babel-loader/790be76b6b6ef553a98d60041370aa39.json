{"ast":null,"code":"var _jsxFileName = \"/home/jafet/projetos/sd-03-project-trivia-react-redux-06/src/components/GameScreen/QuestionsInfos.js\";\nimport React from 'react';\nimport './QuestionsInfos.css';\nimport questions from '../dataTest';\nimport ShuffledButtons from './ShuffledButtons';\n\nclass QuestionsInfos extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.shuffleAnswers = array => {\n      let currentIndex = array.length;\n      let temporaryValue = [];\n      let randomIndex;\n\n      while (currentIndex !== 0) {\n        randomIndex = Math.floor(Math.random() * currentIndex);\n        currentIndex -= 1;\n        temporaryValue = array[currentIndex];\n        array[currentIndex] = array[randomIndex];\n        array[randomIndex] = temporaryValue;\n      }\n\n      this.setState({\n        answersArray: array\n      });\n      return array;\n    };\n\n    this.state = {\n      questionIndex: 0,\n      disabledBtn: false,\n      correctAnswerClass: '',\n      wrongAnswerClass: '',\n      buttonsArray: []\n    };\n    this.nextQuestion = this.nextQuestion.bind(this);\n  }\n\n  componentDidMount() {\n    const results = questions.results;\n    const questionIndex = this.state.questionIndex;\n    const question = results[questionIndex];\n    console.log(questions);\n    const newArr = this.shuffleAnswers(this.arrWithAllButtons(question));\n    this.setState({\n      buttonsArray: newArr\n    });\n  }\n\n  nextQuestion() {\n    this.setState(state => ({\n      questionIndex: state.questionIndex + 1\n    }));\n  } // checkAnswer = (stringToTest, objQuestion) => {\n  // const { question } = this.props;\n  // this.setState({\n  //   correctAnswerClass: 'correct-answer',\n  //   wrongAnswerClass: 'wrong-answer',\n  //   disabledBtn: true,\n  // });\n  // if (stringToTest === objQuestion.correct_answer) return console.log(stringToTest)\n  // return console.log('wrooong')\n  // }\n  // arrWithAllButtons = (objQuestion) => {\n  //   console.log(objQuestion)\n  //   const { incorrect_answers, correct_answer } = objQuestion;\n  //   const { disabledBtn, correctAnswerClass, wrongAnswerClass } = this.state;\n  //   const incorrectAnswersArr = incorrect_answers.map((e, index) => \n  //     (<button\n  //       className={wrongAnswerClass}\n  //       disabled={disabledBtn}\n  //       onClick={() => this.checkAnswer(e, objQuestion)}\n  //       data-testid={`wrong-answer-${index}`}>\n  //         {e}\n  //     </button>));\n  //   const allAnswers = [\n  //     <button\n  //       className={correctAnswerClass}\n  //       disabled={disabledBtn}\n  //       onClick={() => this.checkAnswer(correct_answer, objQuestion)}\n  //       data-testid=\"correct-answer\">\n  //         {correct_answer}\n  //     </button>,\n  //     ...incorrectAnswersArr,\n  //   ];\n  //   return allAnswers;\n  // }\n\n\n  render() {\n    const results = questions.results;\n    const _this$state = this.state,\n          questionIndex = _this$state.questionIndex,\n          buttonsArray = _this$state.buttonsArray;\n    const question = results[questionIndex]; // console.log(question)\n\n    return React.createElement(\"section\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 95\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"questions-container\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 96\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"questions-header\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 97\n      },\n      __self: this\n    }, React.createElement(\"span\", {\n      \"data-testid\": \"question-category\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 98\n      },\n      __self: this\n    }, question.category), React.createElement(\"p\", {\n      \"data-testid\": \"question-text\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 99\n      },\n      __self: this\n    }, question.question)), React.createElement(\"div\", {\n      className: \"answers-buttons\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 101\n      },\n      __self: this\n    }, React.createElement(ShuffledButtons, {\n      buttonsArray: buttonsArray,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 102\n      },\n      __self: this\n    }))), React.createElement(\"button\", {\n      type: \"button\",\n      onClick: this.nextQuestion,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 105\n      },\n      __self: this\n    }, \"Pr\\xF3xima\"));\n  }\n\n}\n\nexport default QuestionsInfos;","map":{"version":3,"sources":["/home/jafet/projetos/sd-03-project-trivia-react-redux-06/src/components/GameScreen/QuestionsInfos.js"],"names":["React","questions","ShuffledButtons","QuestionsInfos","Component","constructor","props","shuffleAnswers","array","currentIndex","length","temporaryValue","randomIndex","Math","floor","random","setState","answersArray","state","questionIndex","disabledBtn","correctAnswerClass","wrongAnswerClass","buttonsArray","nextQuestion","bind","componentDidMount","results","question","console","log","newArr","arrWithAllButtons","render","category"],"mappings":"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","sourcesContent":["import React from 'react';\nimport './QuestionsInfos.css';\nimport questions from '../dataTest';\nimport ShuffledButtons from './ShuffledButtons';\n\nclass QuestionsInfos extends React.Component {\n  constructor (props) {\n    super(props);\n    this.state = {\n      questionIndex: 0,\n      disabledBtn: false,\n      correctAnswerClass: '',\n      wrongAnswerClass: '',\n      buttonsArray: [],\n    }\n    this.nextQuestion = this.nextQuestion.bind(this);\n  }\n\n  componentDidMount() {\n    const { results } = questions;\n    const { questionIndex } = this.state;\n    const question = results[questionIndex];\n    console.log(questions)\n    const newArr = this.shuffleAnswers(this.arrWithAllButtons(question));\n    this.setState({ buttonsArray: newArr });\n  }\n\n  nextQuestion() {\n    this.setState((state) => ({ questionIndex: state.questionIndex + 1 }))\n  }\n\n  // checkAnswer = (stringToTest, objQuestion) => {\n    // const { question } = this.props;\n    // this.setState({\n    //   correctAnswerClass: 'correct-answer',\n    //   wrongAnswerClass: 'wrong-answer',\n    //   disabledBtn: true,\n    // });\n    // if (stringToTest === objQuestion.correct_answer) return console.log(stringToTest)\n    // return console.log('wrooong')\n  // }\n  \n  // arrWithAllButtons = (objQuestion) => {\n  //   console.log(objQuestion)\n  //   const { incorrect_answers, correct_answer } = objQuestion;\n  //   const { disabledBtn, correctAnswerClass, wrongAnswerClass } = this.state;\n\n  //   const incorrectAnswersArr = incorrect_answers.map((e, index) => \n  //     (<button\n  //       className={wrongAnswerClass}\n  //       disabled={disabledBtn}\n  //       onClick={() => this.checkAnswer(e, objQuestion)}\n  //       data-testid={`wrong-answer-${index}`}>\n  //         {e}\n  //     </button>));\n  \n  //   const allAnswers = [\n  //     <button\n  //       className={correctAnswerClass}\n  //       disabled={disabledBtn}\n  //       onClick={() => this.checkAnswer(correct_answer, objQuestion)}\n  //       data-testid=\"correct-answer\">\n  //         {correct_answer}\n  //     </button>,\n  //     ...incorrectAnswersArr,\n  //   ];\n  //   return allAnswers;\n  // }\n  \n  shuffleAnswers = (array) => {\n    let currentIndex = array.length;\n    let temporaryValue = [];\n    let randomIndex;\n  \n    while (currentIndex !== 0) {\n      randomIndex = Math.floor(Math.random() * currentIndex);\n      currentIndex -= 1;\n  \n      temporaryValue = array[currentIndex];\n      array[currentIndex] = array[randomIndex];\n      array[randomIndex] = temporaryValue;\n    }\n    this.setState({\n      answersArray: array,\n     })\n    return array;\n  }\n\n  render() {\n    const { results } = questions;\n    const { questionIndex, buttonsArray } = this.state;\n    const question = results[questionIndex];\n    // console.log(question)\n    return (\n      <section>\n        <div className=\"questions-container\">\n          <div className=\"questions-header\">\n            <span data-testid=\"question-category\">{question.category}</span>\n            <p data-testid=\"question-text\">{question.question}</p>\n          </div>\n          <div className=\"answers-buttons\">\n            <ShuffledButtons buttonsArray={buttonsArray} />\n          </div>\n        </div>\n        <button type=\"button\" onClick={this.nextQuestion} >Próxima</button>\n      </section>\n    )\n  }\n}\n\nexport default QuestionsInfos;\n"]},"metadata":{},"sourceType":"module"}