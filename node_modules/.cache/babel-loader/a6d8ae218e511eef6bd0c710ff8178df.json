{"ast":null,"code":"var _jsxFileName = \"/home/jafet/projetos/sd-03-project-trivia-react-redux-06/src/components/GameScreen/ShuffledButtons.js\";\nimport React from 'react';\nimport './ShuffledButtons.css';\nimport questions from '../dataTest';\n\nclass ShuffledButtons extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.checkAnswer = (stringToTest, objQuestion) => {\n      this.setState({\n        correctAnswerClass: 'correct-answer',\n        wrongAnswerClass: 'wrong-answer',\n        disabledBtn: true,\n        answerChoosed: true\n      });\n      if (stringToTest === objQuestion.correct_answer) return console.log(stringToTest);\n      return console.log('wrooong');\n    };\n\n    this.arrWithAllButtons = objQuestion => {\n      const incorrect_answers = objQuestion.incorrect_answers,\n            correct_answer = objQuestion.correct_answer;\n      const _this$state = this.state,\n            disabledBtn = _this$state.disabledBtn,\n            correctAnswerClass = _this$state.correctAnswerClass,\n            wrongAnswerClass = _this$state.wrongAnswerClass;\n      const incorrectAnswersArr = incorrect_answers.map((e, index) => React.createElement(\"button\", {\n        className: wrongAnswerClass,\n        disabled: disabledBtn,\n        onClick: () => this.checkAnswer(e, objQuestion),\n        \"data-testid\": `wrong-answer-${index}`,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 32\n        },\n        __self: this\n      }, e));\n      const allAnswers = [React.createElement(\"button\", {\n        className: correctAnswerClass,\n        disabled: disabledBtn,\n        onClick: () => this.checkAnswer(correct_answer, objQuestion),\n        \"data-testid\": \"correct-answer\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 41\n        },\n        __self: this\n      }, correct_answer), ...incorrectAnswersArr];\n      return allAnswers;\n    };\n\n    this.shuffleAnswers = array => {\n      let currentIndex = array.length;\n      let temporaryValue = [];\n      let randomIndex;\n\n      while (currentIndex !== 0) {\n        randomIndex = Math.floor(Math.random() * currentIndex);\n        currentIndex -= 1;\n        temporaryValue = array[currentIndex];\n        array[currentIndex] = array[randomIndex];\n        array[randomIndex] = temporaryValue;\n      }\n\n      return array;\n    };\n\n    this.state = {\n      disabledBtn: false,\n      correctAnswerClass: '',\n      wrongAnswerClass: '',\n      allAnswers: []\n    };\n  }\n\n  componentWillMount() {\n    const results = questions.results;\n    console.log(results);\n    const allAnswersArr = results.map(question => this.shuffleAnswers(this.arrWithAllButtons(question)));\n    this.setState({\n      allAnswers: allAnswersArr\n    });\n  }\n\n  render() {\n    const _this$props = this.props,\n          buttonsArray = _this$props.buttonsArray,\n          index = _this$props.index;\n    const allAnswers = this.state.allAnswers;\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 80\n      },\n      __self: this\n    }, allAnswers[index].map(button => React.createElement(\"div\", {\n      key: button.props.children,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 82\n      },\n      __self: this\n    }, button)));\n  }\n\n}\n\nexport default ShuffledButtons;","map":{"version":3,"sources":["/home/jafet/projetos/sd-03-project-trivia-react-redux-06/src/components/GameScreen/ShuffledButtons.js"],"names":["React","questions","ShuffledButtons","Component","constructor","props","checkAnswer","stringToTest","objQuestion","setState","correctAnswerClass","wrongAnswerClass","disabledBtn","answerChoosed","correct_answer","console","log","arrWithAllButtons","incorrect_answers","state","incorrectAnswersArr","map","e","index","allAnswers","shuffleAnswers","array","currentIndex","length","temporaryValue","randomIndex","Math","floor","random","componentWillMount","results","allAnswersArr","question","render","buttonsArray","button","children"],"mappings":"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","sourcesContent":["import React from 'react';\nimport './ShuffledButtons.css';\nimport questions from '../dataTest';\n\nclass ShuffledButtons extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      disabledBtn: false,\n      correctAnswerClass: '',\n      wrongAnswerClass: '',\n      allAnswers: [],\n    }\n  }\n\n  checkAnswer = (stringToTest, objQuestion) => {\n    this.setState({\n      correctAnswerClass: 'correct-answer',\n      wrongAnswerClass: 'wrong-answer',\n      disabledBtn: true,\n      answerChoosed: true,\n    });\n    if (stringToTest === objQuestion.correct_answer) return console.log(stringToTest)\n    return console.log('wrooong')\n  }\n  \n  arrWithAllButtons = (objQuestion) => {\n    const { incorrect_answers, correct_answer } = objQuestion;\n    const { disabledBtn, correctAnswerClass, wrongAnswerClass } = this.state;\n\n    const incorrectAnswersArr = incorrect_answers.map((e, index) => \n      (<button\n        className={wrongAnswerClass}\n        disabled={disabledBtn}\n        onClick={() => this.checkAnswer(e, objQuestion)}\n        data-testid={`wrong-answer-${index}`}>\n          {e}\n      </button>));\n  \n    const allAnswers = [\n      <button\n        className={correctAnswerClass}\n        disabled={disabledBtn}\n        onClick={() => this.checkAnswer(correct_answer, objQuestion)}\n        data-testid=\"correct-answer\">\n          {correct_answer}\n      </button>,\n      ...incorrectAnswersArr,\n    ];\n    return allAnswers;\n  }\n  \n  shuffleAnswers = (array) => {\n    let currentIndex = array.length;\n    let temporaryValue = [];\n    let randomIndex;\n  \n    while (currentIndex !== 0) {\n      randomIndex = Math.floor(Math.random() * currentIndex);\n      currentIndex -= 1;\n      temporaryValue = array[currentIndex];\n      array[currentIndex] = array[randomIndex];\n      array[randomIndex] = temporaryValue;\n    }\n    return array;\n  }\n\n  componentWillMount() {\n    const { results } = questions;\n    console.log(results)\n    const allAnswersArr = results.map((question) => \n      this.shuffleAnswers(this.arrWithAllButtons(question)));\n    this.setState({ allAnswers: allAnswersArr });\n  }\n\n  render() {\n    const { buttonsArray, index } = this.props;\n    const { allAnswers } = this.state;\n      return (\n        <div>\n          {allAnswers[index].map((button) =>\n            (<div key={button.props.children}>{button}</div>))\n          }\n        </div>\n      )\n  }\n}\n\nexport default ShuffledButtons;\n"]},"metadata":{},"sourceType":"module"}