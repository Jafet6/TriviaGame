{"ast":null,"code":"var _jsxFileName = \"/home/jafet/projetos/sd-03-project-trivia-react-redux-06/src/components/GameScreen/QuestionsInfos.js\";\nimport React from 'react';\nimport './QuestionsInfos.css';\nimport questions from '../dataTest';\nimport ShuffledButtons from './ShuffledButtons';\n\nclass QuestionsInfos extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.checkAnswer = (stringToTest, objQuestion) => {\n      this.setState({\n        correctAnswerClass: 'correct-answer',\n        wrongAnswerClass: 'wrong-answer',\n        disabledBtn: true\n      });\n      if (stringToTest === objQuestion.correct_answer) return console.log(stringToTest);\n      return console.log('wrooong');\n    };\n\n    this.arrWithAllButtons = objQuestion => {\n      console.log(objQuestion);\n      const incorrect_answers = objQuestion.incorrect_answers,\n            correct_answer = objQuestion.correct_answer;\n      const _this$state = this.state,\n            disabledBtn = _this$state.disabledBtn,\n            correctAnswerClass = _this$state.correctAnswerClass,\n            wrongAnswerClass = _this$state.wrongAnswerClass;\n      const incorrectAnswersArr = incorrect_answers.map((e, index) => React.createElement(\"button\", {\n        className: wrongAnswerClass,\n        disabled: disabledBtn,\n        onClick: () => this.checkAnswer(e, objQuestion),\n        \"data-testid\": `wrong-answer-${index}`,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 55\n        },\n        __self: this\n      }, e));\n      const allAnswers = [React.createElement(\"button\", {\n        className: correctAnswerClass,\n        disabled: disabledBtn,\n        onClick: () => this.checkAnswer(correct_answer, objQuestion),\n        \"data-testid\": \"correct-answer\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 64\n        },\n        __self: this\n      }, correct_answer), ...incorrectAnswersArr];\n      return allAnswers;\n    };\n\n    this.shuffleAnswers = array => {\n      let currentIndex = array.length;\n      let temporaryValue = [];\n      let randomIndex;\n\n      while (currentIndex !== 0) {\n        randomIndex = Math.floor(Math.random() * currentIndex);\n        currentIndex -= 1;\n        temporaryValue = array[currentIndex];\n        array[currentIndex] = array[randomIndex];\n        array[randomIndex] = temporaryValue;\n      }\n\n      this.setState({\n        answersArray: array\n      });\n      return array;\n    };\n\n    this.state = {\n      questionIndex: 0,\n      disabledBtn: false,\n      correctAnswerClass: '',\n      wrongAnswerClass: '',\n      buttonsArray: []\n    };\n    this.nextQuestion = this.nextQuestion.bind(this);\n  } // componentDidMount() {\n  //   const { results } = questions;\n  //   const { questionIndex } = this.state;\n  //   const question = results[questionIndex];\n  //   console.log(questions)\n  //   const newArr = this.shuffleAnswers(this.arrWithAllButtons(question));\n  //   this.setState({ buttonsArray: newArr });\n  // }\n\n\n  nextQuestion() {\n    const results = questions.results;\n    const questionIndex = this.state.questionIndex;\n    const question = results[questionIndex];\n    const newArr = this.shuffleAnswers(this.arrWithAllButtons(question));\n    this.setState(state => ({\n      questionIndex: state.questionIndex + 1,\n      buttonsArray: newArr\n    }));\n  }\n\n  render() {\n    const results = questions.results;\n    const _this$state2 = this.state,\n          questionIndex = _this$state2.questionIndex,\n          buttonsArray = _this$state2.buttonsArray;\n    const question = results[questionIndex]; // console.log(question)\n\n    return React.createElement(\"section\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 101\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"questions-container\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 102\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"questions-header\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 103\n      },\n      __self: this\n    }, React.createElement(\"span\", {\n      \"data-testid\": \"question-category\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 104\n      },\n      __self: this\n    }, question.category), React.createElement(\"p\", {\n      \"data-testid\": \"question-text\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 105\n      },\n      __self: this\n    }, question.question)), React.createElement(\"div\", {\n      className: \"answers-buttons\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 107\n      },\n      __self: this\n    }, React.createElement(ShuffledButtons, {\n      buttonsArray: buttonsArray,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 108\n      },\n      __self: this\n    }))), React.createElement(\"button\", {\n      type: \"button\",\n      onClick: this.nextQuestion,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 111\n      },\n      __self: this\n    }, \"Pr\\xF3xima\"));\n  }\n\n}\n\nexport default QuestionsInfos;","map":{"version":3,"sources":["/home/jafet/projetos/sd-03-project-trivia-react-redux-06/src/components/GameScreen/QuestionsInfos.js"],"names":["React","questions","ShuffledButtons","QuestionsInfos","Component","constructor","props","checkAnswer","stringToTest","objQuestion","setState","correctAnswerClass","wrongAnswerClass","disabledBtn","correct_answer","console","log","arrWithAllButtons","incorrect_answers","state","incorrectAnswersArr","map","e","index","allAnswers","shuffleAnswers","array","currentIndex","length","temporaryValue","randomIndex","Math","floor","random","answersArray","questionIndex","buttonsArray","nextQuestion","bind","results","question","newArr","render","category"],"mappings":"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","sourcesContent":["import React from 'react';\nimport './QuestionsInfos.css';\nimport questions from '../dataTest';\nimport ShuffledButtons from './ShuffledButtons';\n\nclass QuestionsInfos extends React.Component {\n  constructor (props) {\n    super(props);\n    this.state = {\n      questionIndex: 0,\n      disabledBtn: false,\n      correctAnswerClass: '',\n      wrongAnswerClass: '',\n      buttonsArray: [],\n    }\n    this.nextQuestion = this.nextQuestion.bind(this);\n  }\n\n  // componentDidMount() {\n  //   const { results } = questions;\n  //   const { questionIndex } = this.state;\n  //   const question = results[questionIndex];\n  //   console.log(questions)\n  //   const newArr = this.shuffleAnswers(this.arrWithAllButtons(question));\n  //   this.setState({ buttonsArray: newArr });\n  // }\n\n  nextQuestion() {\n    const { results } = questions;\n    const { questionIndex } = this.state;\n    const question = results[questionIndex];\n    const newArr = this.shuffleAnswers(this.arrWithAllButtons(question));\n    this.setState((state) => ({\n      questionIndex: state.questionIndex + 1,\n      buttonsArray: newArr,\n    }))\n  }\n\n  checkAnswer = (stringToTest, objQuestion) => {\n    this.setState({\n      correctAnswerClass: 'correct-answer',\n      wrongAnswerClass: 'wrong-answer',\n      disabledBtn: true,\n    });\n    if (stringToTest === objQuestion.correct_answer) return console.log(stringToTest)\n    return console.log('wrooong')\n  }\n  \n  arrWithAllButtons = (objQuestion) => {\n    console.log(objQuestion)\n    const { incorrect_answers, correct_answer } = objQuestion;\n    const { disabledBtn, correctAnswerClass, wrongAnswerClass } = this.state;\n\n    const incorrectAnswersArr = incorrect_answers.map((e, index) => \n      (<button\n        className={wrongAnswerClass}\n        disabled={disabledBtn}\n        onClick={() => this.checkAnswer(e, objQuestion)}\n        data-testid={`wrong-answer-${index}`}>\n          {e}\n      </button>));\n  \n    const allAnswers = [\n      <button\n        className={correctAnswerClass}\n        disabled={disabledBtn}\n        onClick={() => this.checkAnswer(correct_answer, objQuestion)}\n        data-testid=\"correct-answer\">\n          {correct_answer}\n      </button>,\n      ...incorrectAnswersArr,\n    ];\n    return allAnswers;\n  }\n  \n  shuffleAnswers = (array) => {\n    let currentIndex = array.length;\n    let temporaryValue = [];\n    let randomIndex;\n  \n    while (currentIndex !== 0) {\n      randomIndex = Math.floor(Math.random() * currentIndex);\n      currentIndex -= 1;\n  \n      temporaryValue = array[currentIndex];\n      array[currentIndex] = array[randomIndex];\n      array[randomIndex] = temporaryValue;\n    }\n    this.setState({\n      answersArray: array,\n     })\n    return array;\n  }\n\n  render() {\n    const { results } = questions;\n    const { questionIndex, buttonsArray } = this.state;\n    const question = results[questionIndex];\n    // console.log(question)\n    return (\n      <section>\n        <div className=\"questions-container\">\n          <div className=\"questions-header\">\n            <span data-testid=\"question-category\">{question.category}</span>\n            <p data-testid=\"question-text\">{question.question}</p>\n          </div>\n          <div className=\"answers-buttons\">\n            <ShuffledButtons buttonsArray={buttonsArray} />\n          </div>\n        </div>\n        <button type=\"button\" onClick={this.nextQuestion} >Próxima</button>\n      </section>\n    )\n  }\n}\n\nexport default QuestionsInfos;\n"]},"metadata":{},"sourceType":"module"}