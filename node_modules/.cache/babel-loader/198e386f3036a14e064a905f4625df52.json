{"ast":null,"code":"import { gerarToken, getQuestions } from '../Services/triviaApi';\nexport const GET_QUESTIONS = 'GET_QUESTIONS';\nexport const GET_QUESTIONS_SUCCESS = 'GET_QUESTIONS_SUCCESS';\nexport const GET_QUESTIONS_FAILURE = 'GET_QUESTIONS_FAILURE';\nexport const GET_TOKEN = 'GET_TOKEN';\nexport const GET_TOKEN_SUCCESS = 'GET_TOKEN_SUCCESS';\nexport const GET_TOKEN_FAILURE = 'GET_TOKEN_FAILURE';\nexport const questionsAction = () => ({\n  type: GET_QUESTIONS,\n  loading: true\n});\nexport const questionsSuccess = data => ({\n  type: GET_QUESTIONS_SUCCESS,\n  data,\n  loading: false\n});\nexport const questionsFailure = error => ({\n  type: GET_QUESTIONS_FAILURE,\n  error,\n  loading: false\n});\nexport const getToken = () => ({\n  type: GET_TOKEN,\n  loading: true\n});\nexport const tokenSuccess = token => ({\n  type: GET_TOKEN_SUCCESS,\n  token,\n  loading: false\n});\nexport const tokenFailure = error => ({\n  type: GET_TOKEN_FAILURE,\n  error,\n  loading: false\n});\nexport function thunkToken() {\n  return dispatch => {\n    dispatch(getToken());\n    return gerarToken().then(data => dispatch(tokenSuccess(data)), error => dispatch(tokenFailure(error.message)));\n  };\n}\nexport function thunkQuestions(token) {\n  return dispatch => {\n    dispatch(questionsAction());\n    return getQuestions(token).then(data => dispatch(questionsSuccess(data)), error => dispatch(questionsFailure(error.message)));\n  };\n}","map":{"version":3,"sources":["/home/jafet/projetos/sd-03-project-trivia-react-redux-06/src/actions/index.js"],"names":["gerarToken","getQuestions","GET_QUESTIONS","GET_QUESTIONS_SUCCESS","GET_QUESTIONS_FAILURE","GET_TOKEN","GET_TOKEN_SUCCESS","GET_TOKEN_FAILURE","questionsAction","type","loading","questionsSuccess","data","questionsFailure","error","getToken","tokenSuccess","token","tokenFailure","thunkToken","dispatch","then","message","thunkQuestions"],"mappings":"AAAA,SAASA,UAAT,EAAqBC,YAArB,QAAyC,uBAAzC;AAEA,OAAO,MAAMC,aAAa,GAAG,eAAtB;AACP,OAAO,MAAMC,qBAAqB,GAAG,uBAA9B;AACP,OAAO,MAAMC,qBAAqB,GAAG,uBAA9B;AACP,OAAO,MAAMC,SAAS,GAAG,WAAlB;AACP,OAAO,MAAMC,iBAAiB,GAAG,mBAA1B;AACP,OAAO,MAAMC,iBAAiB,GAAG,mBAA1B;AAEP,OAAO,MAAMC,eAAe,GAAG,OAC7B;AAAEC,EAAAA,IAAI,EAAEP,aAAR;AAAuBQ,EAAAA,OAAO,EAAE;AAAhC,CAD6B,CAAxB;AAIP,OAAO,MAAMC,gBAAgB,GAAIC,IAAD,KAC9B;AAAEH,EAAAA,IAAI,EAAEN,qBAAR;AAA+BS,EAAAA,IAA/B;AAAqCF,EAAAA,OAAO,EAAE;AAA9C,CAD8B,CAAzB;AAIP,OAAO,MAAMG,gBAAgB,GAAIC,KAAD,KAC9B;AAAEL,EAAAA,IAAI,EAAEL,qBAAR;AAA+BU,EAAAA,KAA/B;AAAsCJ,EAAAA,OAAO,EAAE;AAA/C,CAD8B,CAAzB;AAIP,OAAO,MAAMK,QAAQ,GAAG,OACtB;AAAEN,EAAAA,IAAI,EAAEJ,SAAR;AAAmBK,EAAAA,OAAO,EAAE;AAA5B,CADsB,CAAjB;AAIP,OAAO,MAAMM,YAAY,GAAIC,KAAD,KAC1B;AAAER,EAAAA,IAAI,EAAEH,iBAAR;AAA2BW,EAAAA,KAA3B;AAAkCP,EAAAA,OAAO,EAAE;AAA3C,CAD0B,CAArB;AAIP,OAAO,MAAMQ,YAAY,GAAIJ,KAAD,KAC1B;AAAEL,EAAAA,IAAI,EAAEF,iBAAR;AAA2BO,EAAAA,KAA3B;AAAkCJ,EAAAA,OAAO,EAAE;AAA3C,CAD0B,CAArB;AAIP,OAAO,SAASS,UAAT,GAAsB;AAC3B,SAAQC,QAAD,IAAc;AACnBA,IAAAA,QAAQ,CAACL,QAAQ,EAAT,CAAR;AACA,WAAOf,UAAU,GACdqB,IADI,CAEFT,IAAD,IAAUQ,QAAQ,CAACJ,YAAY,CAACJ,IAAD,CAAb,CAFf,EAGFE,KAAD,IAAWM,QAAQ,CAACF,YAAY,CAACJ,KAAK,CAACQ,OAAP,CAAb,CAHhB,CAAP;AAKD,GAPD;AAQD;AAED,OAAO,SAASC,cAAT,CAAwBN,KAAxB,EAA+B;AACpC,SAAQG,QAAD,IAAc;AACnBA,IAAAA,QAAQ,CAACZ,eAAe,EAAhB,CAAR;AACA,WAAOP,YAAY,CAACgB,KAAD,CAAZ,CACJI,IADI,CAEFT,IAAD,IAAUQ,QAAQ,CAACT,gBAAgB,CAACC,IAAD,CAAjB,CAFf,EAGFE,KAAD,IAAWM,QAAQ,CAACP,gBAAgB,CAACC,KAAK,CAACQ,OAAP,CAAjB,CAHhB,CAAP;AAKD,GAPD;AAQD","sourcesContent":["import { gerarToken, getQuestions } from '../Services/triviaApi';\n\nexport const GET_QUESTIONS = 'GET_QUESTIONS';\nexport const GET_QUESTIONS_SUCCESS = 'GET_QUESTIONS_SUCCESS';\nexport const GET_QUESTIONS_FAILURE = 'GET_QUESTIONS_FAILURE';\nexport const GET_TOKEN = 'GET_TOKEN';\nexport const GET_TOKEN_SUCCESS = 'GET_TOKEN_SUCCESS';\nexport const GET_TOKEN_FAILURE = 'GET_TOKEN_FAILURE';\n\nexport const questionsAction = () => (\n  { type: GET_QUESTIONS, loading: true }\n);\n\nexport const questionsSuccess = (data) => (\n  { type: GET_QUESTIONS_SUCCESS, data, loading: false }\n);\n\nexport const questionsFailure = (error) => (\n  { type: GET_QUESTIONS_FAILURE, error, loading: false }\n);\n\nexport const getToken = () => (\n  { type: GET_TOKEN, loading: true }\n);\n\nexport const tokenSuccess = (token) => (\n  { type: GET_TOKEN_SUCCESS, token, loading: false }\n);\n\nexport const tokenFailure = (error) => (\n  { type: GET_TOKEN_FAILURE, error, loading: false }\n);\n\nexport function thunkToken() {\n  return (dispatch) => {\n    dispatch(getToken());\n    return gerarToken()\n      .then(\n        (data) => dispatch(tokenSuccess(data)),\n        (error) => dispatch(tokenFailure(error.message)),\n      );\n  };\n}\n\nexport function thunkQuestions(token) {\n  return (dispatch) => {\n    dispatch(questionsAction());\n    return getQuestions(token)\n      .then(\n        (data) => dispatch(questionsSuccess(data)),\n        (error) => dispatch(questionsFailure(error.message)),\n      );\n  };\n}\n"]},"metadata":{},"sourceType":"module"}