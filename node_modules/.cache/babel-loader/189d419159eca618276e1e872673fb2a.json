{"ast":null,"code":"var _jsxFileName = \"/home/jafet/projetos/sd-03-project-trivia-react-redux-06/src/components/LoginPage/LoginContainer.js\";\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport CryptoJS from 'crypto-js';\nimport { Link } from 'react-router-dom';\nimport { connect } from 'react-redux';\nimport { getApiQuestions } from '../../actions/apiQuestionsAction';\nimport { playersNameAction } from '../../actions/playersNameAction';\nimport { getApiGravatar } from '../../actions/gravatarAction';\nimport apiTokenRequest from '../../service/apiTokenRequest';\n\nclass LoginContainer extends React.Component {\n  static renderSettings() {\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 14\n      },\n      __self: this\n    }, React.createElement(Link, {\n      to: \"/Settings\",\n      \"data-testid\": \"btn-settings\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 15\n      },\n      __self: this\n    }, \"Settings\"));\n  }\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      username: '',\n      email: ''\n    };\n    this.handleChange = this.handleChange.bind(this);\n    this.startGame = this.startGame.bind(this);\n  }\n\n  handleChange(e) {\n    const _e$target = e.target,\n          name = _e$target.name,\n          value = _e$target.value;\n    this.setState({\n      [name]: value\n    });\n  }\n\n  async startGame() {\n    const _this$props = this.props,\n          apiQuestionsDispatch = _this$props.apiQuestionsDispatch,\n          playersNamesDispatch = _this$props.playersNamesDispatch,\n          apiGravatarDispatch = _this$props.apiGravatarDispatch,\n          assertions = _this$props.assertions,\n          score = _this$props.score,\n          name = _this$props.name,\n          gravatarEmail = _this$props.gravatarEmail;\n    this.playersInfosLocalStorage(assertions, score, name, gravatarEmail);\n    await apiTokenRequest().then(reponse => localStorage.setItem('token', reponse.token));\n    const _this$state = this.state,\n          username = _this$state.username,\n          email = _this$state.email;\n    playersNamesDispatch(username, email);\n    apiGravatarDispatch(CryptoJS.MD5(email).toString().toLowerCase());\n    apiQuestionsDispatch(localStorage.getItem('token'));\n  }\n\n  renderLogin() {\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 52\n      },\n      __self: this\n    }, React.createElement(\"label\", {\n      htmlFor: \"email\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 53\n      },\n      __self: this\n    }, \"E-mail do Gravatar:\"), React.createElement(\"input\", {\n      plasceholder: \"Email Gravatar\",\n      type: \"text\",\n      \"data-testid\": \"input-gravatar-email\",\n      onChange: e => this.handleChange(e),\n      name: \"email\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 54\n      },\n      __self: this\n    }), React.createElement(\"label\", {\n      htmlFor: \"username\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 61\n      },\n      __self: this\n    }, \"Nome do Jogador:\"), React.createElement(\"input\", {\n      placeholder: \"Nome\",\n      onChange: e => this.handleChange(e),\n      name: \"username\",\n      type: \"name\",\n      \"data-testid\": \"input-player-name\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 62\n      },\n      __self: this\n    }));\n  }\n\n  renderJogar() {\n    const _this$state2 = this.state,\n          username = _this$state2.username,\n          email = _this$state2.email;\n    let disabled = false;\n\n    if (username === '' || email === '') {\n      disabled = true;\n    }\n\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 81\n      },\n      __self: this\n    }, React.createElement(Link, {\n      to: \"/game-screen\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 82\n      },\n      __self: this\n    }, React.createElement(\"button\", {\n      type: \"button\",\n      \"data-testid\": \"btn-play\",\n      disabled: disabled,\n      onClick: this.startGame,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 83\n      },\n      __self: this\n    }, \"JOGAR!\")));\n  }\n\n  render() {\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 98\n      },\n      __self: this\n    }, this.renderJogar(), this.renderLogin(), LoginContainer.renderSettings());\n  }\n\n}\n\nconst mapStateToProps = state => ({\n  email: state.gravatarReducer.email,\n  name: state.playersInfoReducer.username,\n  gravatarEmail: state.playersInfoReducer.email,\n  score: state.questionsDataReducer.points,\n  assertions: state.questionsDataReducer.assertions,\n  token: state.gravatarReducer.token,\n  apiToken: state.apiQuestionsReducer.questions\n});\n\nconst mapDispatchToProps = dispatch => ({\n  apiQuestionsDispatch: token => dispatch(getApiQuestions(token)),\n  apiGravatarDispatch: hash => dispatch(getApiGravatar(hash)),\n  playersNamesDispatch: (username, email) => dispatch(playersNameAction(username, email))\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(LoginContainer);\nLoginContainer.propTypes = {\n  apiQuestionsDispatch: PropTypes.func.isRequired,\n  playersNamesDispatch: PropTypes.func.isRequired,\n  apiGravatarDispatch: PropTypes.func.isRequired,\n  assertions: PropTypes.number.isRequired,\n  score: PropTypes.number.isRequired,\n  name: PropTypes.string.isRequired,\n  gravatarEmail: PropTypes.string\n};\nLoginContainer.defaultProps = {\n  gravatarEmail: ''\n};","map":{"version":3,"sources":["/home/jafet/projetos/sd-03-project-trivia-react-redux-06/src/components/LoginPage/LoginContainer.js"],"names":["React","PropTypes","CryptoJS","Link","connect","getApiQuestions","playersNameAction","getApiGravatar","apiTokenRequest","LoginContainer","Component","renderSettings","constructor","props","state","username","email","handleChange","bind","startGame","e","target","name","value","setState","apiQuestionsDispatch","playersNamesDispatch","apiGravatarDispatch","assertions","score","gravatarEmail","playersInfosLocalStorage","then","reponse","localStorage","setItem","token","MD5","toString","toLowerCase","getItem","renderLogin","renderJogar","disabled","render","mapStateToProps","gravatarReducer","playersInfoReducer","questionsDataReducer","points","apiToken","apiQuestionsReducer","questions","mapDispatchToProps","dispatch","hash","propTypes","func","isRequired","number","string","defaultProps"],"mappings":"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","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport CryptoJS from 'crypto-js';\nimport { Link } from 'react-router-dom';\nimport { connect } from 'react-redux';\nimport { getApiQuestions } from '../../actions/apiQuestionsAction';\nimport { playersNameAction } from '../../actions/playersNameAction';\nimport { getApiGravatar } from '../../actions/gravatarAction';\nimport apiTokenRequest from '../../service/apiTokenRequest';\n\nclass LoginContainer extends React.Component {\n  static renderSettings() {\n    return (\n      <div>\n        <Link to=\"/Settings\" data-testid=\"btn-settings\">\n          Settings\n        </Link>\n      </div>\n    );\n  }\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      username: '',\n      email: '',\n    };\n    this.handleChange = this.handleChange.bind(this);\n    this.startGame = this.startGame.bind(this);\n  }\n\n  handleChange(e) {\n    const { name, value } = e.target;\n    this.setState({ [name]: value });\n  }\n\n  async startGame() {\n    const {\n      apiQuestionsDispatch, playersNamesDispatch, apiGravatarDispatch,\n      assertions, score, name, gravatarEmail,\n    } = this.props;\n    this.playersInfosLocalStorage(assertions, score, name, gravatarEmail);\n    await apiTokenRequest().then((reponse) => localStorage.setItem('token', reponse.token));\n    const { username, email } = this.state;\n    playersNamesDispatch(username, email);\n    apiGravatarDispatch(CryptoJS.MD5(email).toString().toLowerCase());\n    apiQuestionsDispatch(localStorage.getItem('token'));\n  }\n\n  renderLogin() {\n    return (\n      <div>\n        <label htmlFor=\"email\">E-mail do Gravatar:</label>\n        <input\n          plasceholder=\"Email Gravatar\"\n          type=\"text\"\n          data-testid=\"input-gravatar-email\"\n          onChange={(e) => this.handleChange(e)}\n          name=\"email\"\n        />\n        <label htmlFor=\"username\">Nome do Jogador:</label>\n        <input\n          placeholder=\"Nome\"\n          onChange={(e) => this.handleChange(e)}\n          name=\"username\"\n          type=\"name\"\n          data-testid=\"input-player-name\"\n        />\n      </div>\n    );\n  }\n\n  renderJogar() {\n    const { username, email } = this.state;\n    let disabled = false;\n    if (username === '' || email === '') {\n      disabled = true;\n    }\n\n    return (\n      <div>\n        <Link to=\"/game-screen\">\n          <button\n            type=\"button\"\n            data-testid=\"btn-play\"\n            disabled={disabled}\n            onClick={this.startGame}\n          >\n            JOGAR!\n          </button>\n        </Link>\n      </div>\n    );\n  }\n\n  render() {\n    return (\n      <div>\n        {this.renderJogar()}\n        {this.renderLogin()}\n        {LoginContainer.renderSettings()}\n      </div>\n    );\n  }\n}\n\nconst mapStateToProps = (state) => ({\n  email: state.gravatarReducer.email,\n  name: state.playersInfoReducer.username,\n  gravatarEmail: state.playersInfoReducer.email,\n  score: state.questionsDataReducer.points,\n  assertions: state.questionsDataReducer.assertions,\n  token: state.gravatarReducer.token,\n  apiToken: state.apiQuestionsReducer.questions,\n});\n\nconst mapDispatchToProps = (dispatch) => ({\n  apiQuestionsDispatch: (token) => dispatch(getApiQuestions(token)),\n  apiGravatarDispatch: (hash) => dispatch(getApiGravatar(hash)),\n  playersNamesDispatch: (username, email) => dispatch(playersNameAction(username, email)),\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(LoginContainer);\n\nLoginContainer.propTypes = {\n  apiQuestionsDispatch: PropTypes.func.isRequired,\n  playersNamesDispatch: PropTypes.func.isRequired,\n  apiGravatarDispatch: PropTypes.func.isRequired,\n  assertions: PropTypes.number.isRequired,\n  score: PropTypes.number.isRequired,\n  name: PropTypes.string.isRequired,\n  gravatarEmail: PropTypes.string,\n};\n\nLoginContainer.defaultProps = {\n  gravatarEmail: '',\n};\n"]},"metadata":{},"sourceType":"module"}