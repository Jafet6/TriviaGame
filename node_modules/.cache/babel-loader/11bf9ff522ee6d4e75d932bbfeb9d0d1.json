{"ast":null,"code":"var _jsxFileName = \"/home/jafet/projetos/sd-03-project-trivia-react-redux-06/src/components/GameScreen/ShuffledButtons.js\";\nimport React from 'react';\nimport './ShuffledButtons.css';\nimport questions from '../dataTest';\n\nclass ShuffledButtons extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.checkAnswer = (stringToTest, objQuestion) => {\n      this.setState({\n        correctAnswerClass: 'correct-answer',\n        wrongAnswerClass: 'wrong-answer',\n        disabledBtn: true\n      });\n      if (stringToTest === objQuestion.correct_answer) return console.log(stringToTest);\n      return console.log('wrooong');\n    };\n\n    this.arrWithAllButtons = objQuestion => {\n      const incorrect_answers = objQuestion.incorrect_answers,\n            correct_answer = objQuestion.correct_answer;\n      const _this$state = this.state,\n            disabledBtn = _this$state.disabledBtn,\n            correctAnswerClass = _this$state.correctAnswerClass,\n            wrongAnswerClass = _this$state.wrongAnswerClass; // const incorrectAnswersArr = incorrect_answers.map((e, index) => \n      //   (<button\n      //     className={wrongAnswerClass}\n      //     disabled={disabledBtn}\n      //     onClick={() => this.checkAnswer(e, objQuestion)}\n      //     data-testid={`wrong-answer-${index}`}>\n      //       {e}\n      //   </button>));\n\n      const allAnswers = [correct_answer, ...incorrect_answers];\n      return allAnswers;\n    };\n\n    this.shuffleAnswers = array => {\n      let currentIndex = array.length;\n      let temporaryValue = [];\n      let randomIndex;\n\n      while (currentIndex !== 0) {\n        randomIndex = Math.floor(Math.random() * currentIndex);\n        currentIndex -= 1;\n        temporaryValue = array[currentIndex];\n        array[currentIndex] = array[randomIndex];\n        array[randomIndex] = temporaryValue;\n      }\n\n      return array;\n    };\n\n    this.state = {\n      disabledBtn: false,\n      correctAnswerClass: '',\n      wrongAnswerClass: '',\n      allAnswers: []\n    };\n  }\n\n  componentDidMount() {\n    const results = questions.results;\n    console.log(results);\n    const allAnswersArr = results.map(question => this.shuffleAnswers(this.arrWithAllButtons(question)));\n    this.setState({\n      allAnswers: allAnswersArr\n    });\n  }\n\n  shouldShowAnswers() {\n    return this.state.allAnswers.length > 0;\n  }\n\n  render() {\n    const questionIndex = this.props.questionIndex;\n    const allAnswers = this.state.allAnswers;\n    console.log(allAnswers);\n    if (!this.shouldShowAnswers()) return null;\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 79\n      },\n      __self: this\n    }, allAnswers[questionIndex].map(button => // (<button></button>))\n    React.createElement(\"div\", {\n      key: button.props.children,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 82\n      },\n      __self: this\n    }, button)));\n  }\n\n}\n\nexport default ShuffledButtons;","map":{"version":3,"sources":["/home/jafet/projetos/sd-03-project-trivia-react-redux-06/src/components/GameScreen/ShuffledButtons.js"],"names":["React","questions","ShuffledButtons","Component","constructor","props","checkAnswer","stringToTest","objQuestion","setState","correctAnswerClass","wrongAnswerClass","disabledBtn","correct_answer","console","log","arrWithAllButtons","incorrect_answers","state","allAnswers","shuffleAnswers","array","currentIndex","length","temporaryValue","randomIndex","Math","floor","random","componentDidMount","results","allAnswersArr","map","question","shouldShowAnswers","render","questionIndex","button","children"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAO,uBAAP;AACA,OAAOC,SAAP,MAAsB,aAAtB;;AAEA,MAAMC,eAAN,SAA8BF,KAAK,CAACG,SAApC,CAA8C;AAC5CC,EAAAA,WAAW,CAACC,KAAD,EAAQ;AACjB,UAAMA,KAAN;;AADiB,SAUnBC,WAVmB,GAUL,CAACC,YAAD,EAAeC,WAAf,KAA+B;AAC3C,WAAKC,QAAL,CAAc;AACZC,QAAAA,kBAAkB,EAAE,gBADR;AAEZC,QAAAA,gBAAgB,EAAE,cAFN;AAGZC,QAAAA,WAAW,EAAE;AAHD,OAAd;AAKA,UAAIL,YAAY,KAAKC,WAAW,CAACK,cAAjC,EAAiD,OAAOC,OAAO,CAACC,GAAR,CAAYR,YAAZ,CAAP;AACjD,aAAOO,OAAO,CAACC,GAAR,CAAY,SAAZ,CAAP;AACD,KAlBkB;;AAAA,SAoBnBC,iBApBmB,GAoBER,WAAD,IAAiB;AAAA,YAC3BS,iBAD2B,GACWT,WADX,CAC3BS,iBAD2B;AAAA,YACRJ,cADQ,GACWL,WADX,CACRK,cADQ;AAAA,0BAE2B,KAAKK,KAFhC;AAAA,YAE3BN,WAF2B,eAE3BA,WAF2B;AAAA,YAEdF,kBAFc,eAEdA,kBAFc;AAAA,YAEMC,gBAFN,eAEMA,gBAFN,EAInC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,YAAMQ,UAAU,GAAG,CACjBN,cADiB,EAEjB,GAAGI,iBAFc,CAAnB;AAIA,aAAOE,UAAP;AACD,KAtCkB;;AAAA,SAwCnBC,cAxCmB,GAwCDC,KAAD,IAAW;AAC1B,UAAIC,YAAY,GAAGD,KAAK,CAACE,MAAzB;AACA,UAAIC,cAAc,GAAG,EAArB;AACA,UAAIC,WAAJ;;AAEA,aAAOH,YAAY,KAAK,CAAxB,EAA2B;AACzBG,QAAAA,WAAW,GAAGC,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,MAAL,KAAgBN,YAA3B,CAAd;AACAA,QAAAA,YAAY,IAAI,CAAhB;AACAE,QAAAA,cAAc,GAAGH,KAAK,CAACC,YAAD,CAAtB;AACAD,QAAAA,KAAK,CAACC,YAAD,CAAL,GAAsBD,KAAK,CAACI,WAAD,CAA3B;AACAJ,QAAAA,KAAK,CAACI,WAAD,CAAL,GAAqBD,cAArB;AACD;;AACD,aAAOH,KAAP;AACD,KArDkB;;AAEjB,SAAKH,KAAL,GAAa;AACXN,MAAAA,WAAW,EAAE,KADF;AAEXF,MAAAA,kBAAkB,EAAE,EAFT;AAGXC,MAAAA,gBAAgB,EAAE,EAHP;AAIXQ,MAAAA,UAAU,EAAE;AAJD,KAAb;AAMD;;AA+CDU,EAAAA,iBAAiB,GAAG;AAAA,UACVC,OADU,GACE7B,SADF,CACV6B,OADU;AAElBhB,IAAAA,OAAO,CAACC,GAAR,CAAYe,OAAZ;AACA,UAAMC,aAAa,GAAGD,OAAO,CAACE,GAAR,CAAaC,QAAD,IAChC,KAAKb,cAAL,CAAoB,KAAKJ,iBAAL,CAAuBiB,QAAvB,CAApB,CADoB,CAAtB;AAEA,SAAKxB,QAAL,CAAc;AAAEU,MAAAA,UAAU,EAAEY;AAAd,KAAd;AACD;;AAEDG,EAAAA,iBAAiB,GAAG;AAClB,WAAO,KAAKhB,KAAL,CAAWC,UAAX,CAAsBI,MAAtB,GAA+B,CAAtC;AACD;;AAEDY,EAAAA,MAAM,GAAG;AAAA,UACCC,aADD,GACmB,KAAK/B,KADxB,CACC+B,aADD;AAAA,UAECjB,UAFD,GAEgB,KAAKD,KAFrB,CAECC,UAFD;AAGPL,IAAAA,OAAO,CAACC,GAAR,CAAYI,UAAZ;AACA,QAAI,CAAC,KAAKe,iBAAL,EAAL,EAA+B,OAAO,IAAP;AAC/B,WACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACGf,UAAU,CAACiB,aAAD,CAAV,CAA0BJ,GAA1B,CAA+BK,MAAD,IAC7B;AACC;AAAK,MAAA,GAAG,EAAEA,MAAM,CAAChC,KAAP,CAAaiC,QAAvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAkCD,MAAlC,CAFF,CADH,CADF;AAQD;;AAjF2C;;AAoF9C,eAAenC,eAAf","sourcesContent":["import React from 'react';\nimport './ShuffledButtons.css';\nimport questions from '../dataTest';\n\nclass ShuffledButtons extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      disabledBtn: false,\n      correctAnswerClass: '',\n      wrongAnswerClass: '',\n      allAnswers: [],\n    }\n  }\n\n  checkAnswer = (stringToTest, objQuestion) => {\n    this.setState({\n      correctAnswerClass: 'correct-answer',\n      wrongAnswerClass: 'wrong-answer',\n      disabledBtn: true,\n    });\n    if (stringToTest === objQuestion.correct_answer) return console.log(stringToTest);\n    return console.log('wrooong');\n  }\n  \n  arrWithAllButtons = (objQuestion) => {\n    const { incorrect_answers, correct_answer } = objQuestion;\n    const { disabledBtn, correctAnswerClass, wrongAnswerClass } = this.state;\n\n    // const incorrectAnswersArr = incorrect_answers.map((e, index) => \n    //   (<button\n    //     className={wrongAnswerClass}\n    //     disabled={disabledBtn}\n    //     onClick={() => this.checkAnswer(e, objQuestion)}\n    //     data-testid={`wrong-answer-${index}`}>\n    //       {e}\n    //   </button>));\n  \n    const allAnswers = [\n      correct_answer,\n      ...incorrect_answers,\n    ];\n    return allAnswers;\n  }\n  \n  shuffleAnswers = (array) => {\n    let currentIndex = array.length;\n    let temporaryValue = [];\n    let randomIndex;\n  \n    while (currentIndex !== 0) {\n      randomIndex = Math.floor(Math.random() * currentIndex);\n      currentIndex -= 1;\n      temporaryValue = array[currentIndex];\n      array[currentIndex] = array[randomIndex];\n      array[randomIndex] = temporaryValue;\n    }\n    return array;\n  }\n\n  componentDidMount() {\n    const { results } = questions;\n    console.log(results)\n    const allAnswersArr = results.map((question) => \n      this.shuffleAnswers(this.arrWithAllButtons(question)));\n    this.setState({ allAnswers: allAnswersArr });\n  }\n\n  shouldShowAnswers() {\n    return this.state.allAnswers.length > 0\n  }\n\n  render() {\n    const { questionIndex } = this.props;\n    const { allAnswers } = this.state;\n    console.log(allAnswers)\n    if (!this.shouldShowAnswers()) return null\n    return (\n      <div>\n        {allAnswers[questionIndex].map((button) =>\n          // (<button></button>))\n          (<div key={button.props.children}>{button}</div>))\n        }\n      </div>\n    )\n  }\n}\n\nexport default ShuffledButtons;\n"]},"metadata":{},"sourceType":"module"}