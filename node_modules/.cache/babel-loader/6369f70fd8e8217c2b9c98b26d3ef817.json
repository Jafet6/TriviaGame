{"ast":null,"code":"var _jsxFileName = \"/home/jafet/projetos/sd-03-project-trivia-react-redux-06/src/components/GameScreen/QuestionsInfos.js\";\nimport React from 'react';\nimport { connect } from 'react-redux';\nimport { newQuestionAction } from '../../actions/newQuestionAction';\nimport { timerCountAction } from '../../actions/timerCountAction';\nimport { timeOutAction } from '../../actions/timeOutAction';\nimport './QuestionsInfos.css';\nimport questions from '../dataTest';\nimport ShuffledButtons from './ShuffledButtons';\n\nclass QuestionsInfos extends React.Component {\n  constructor(props) {\n    super(props);\n    this.nextQuestion = this.nextQuestion.bind(this);\n  }\n\n  componentDidMount() {\n    const _this$props = this.props,\n          timerCount = _this$props.timerCount,\n          timer = _this$props.timer;\n    this.interval = setInterval(() => {\n      if (timer > 1) return timerCount();\n      return clearInterval(this.interval);\n    }, 1000);\n  }\n\n  componentWillUnmount() {\n    clearInterval(this.interval);\n  }\n\n  nextQuestion() {\n    this.setState(state => ({\n      questionIndex: state.questionIndex + 1\n    }));\n  }\n\n  timeIsOver() {\n    const _this$props2 = this.props,\n          timer = _this$props2.timer,\n          timeOut = _this$props2.timeOut;\n\n    if (timer < 1) {\n      return timeOut();\n    }\n\n    return null;\n  }\n\n  render() {\n    const _this$props3 = this.props,\n          setNextQuestion = _this$props3.setNextQuestion,\n          questionIndex = _this$props3.questionIndex,\n          timer = _this$props3.timer;\n    console.log(this.props);\n    const results = questions.results;\n    const question = results[questionIndex];\n    return React.createElement(\"section\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 48\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"questions-container\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 49\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"questions-header\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 50\n      },\n      __self: this\n    }, React.createElement(\"span\", {\n      \"data-testid\": \"question-category\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 51\n      },\n      __self: this\n    }, question.category), React.createElement(\"p\", {\n      \"data-testid\": \"question-text\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 52\n      },\n      __self: this\n    }, question.question)), React.createElement(ShuffledButtons, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 54\n      },\n      __self: this\n    })), React.createElement(\"button\", {\n      type: \"button\",\n      onClick: setNextQuestion,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 56\n      },\n      __self: this\n    }, \"Pr\\xF3xima\"), React.createElement(\"span\", {\n      onChange: this.timeIsOver,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 57\n      },\n      __self: this\n    }, timer));\n  }\n\n}\n\nconst mapStateToProps = state => ({\n  questionIndex: state.questionsDataReducer.index,\n  timer: state.questionsDataReducer.timerCount\n});\n\nconst mapDispatchToProps = dispatch => ({\n  setNextQuestion: () => dispatch(newQuestionAction()),\n  timerCount: () => dispatch(timerCountAction()),\n  timeOut: () => dispatch(timeOutAction())\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(QuestionsInfos);","map":{"version":3,"sources":["/home/jafet/projetos/sd-03-project-trivia-react-redux-06/src/components/GameScreen/QuestionsInfos.js"],"names":["React","connect","newQuestionAction","timerCountAction","timeOutAction","questions","ShuffledButtons","QuestionsInfos","Component","constructor","props","nextQuestion","bind","componentDidMount","timerCount","timer","interval","setInterval","clearInterval","componentWillUnmount","setState","state","questionIndex","timeIsOver","timeOut","render","setNextQuestion","console","log","results","question","category","mapStateToProps","questionsDataReducer","index","mapDispatchToProps","dispatch"],"mappings":"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","sourcesContent":["import React from 'react';\nimport { connect } from 'react-redux';\nimport { newQuestionAction } from '../../actions/newQuestionAction';\nimport { timerCountAction } from '../../actions/timerCountAction';\nimport { timeOutAction } from '../../actions/timeOutAction';\nimport './QuestionsInfos.css';\nimport questions from '../dataTest';\nimport ShuffledButtons from './ShuffledButtons';\n\nclass QuestionsInfos extends React.Component {\n  constructor(props) {\n    super(props);\n    this.nextQuestion = this.nextQuestion.bind(this);\n  }\n\n  componentDidMount() {\n    const { timerCount, timer } = this.props;\n    this.interval = setInterval(() => {\n      if (timer > 1) return timerCount();\n      return clearInterval(this.interval);\n    }, 1000);\n  }\n\n  componentWillUnmount() {\n    clearInterval(this.interval);\n  }\n\n  nextQuestion() {\n    this.setState((state) => ({\n      questionIndex: state.questionIndex + 1,\n    }));\n  }\n\n  timeIsOver() {\n    const { timer, timeOut } = this.props;\n    if (timer < 1) {\n      return timeOut();\n    }\n    return null;\n  }\n\n  render() {\n    const { setNextQuestion, questionIndex, timer } = this.props;\n    console.log(this.props);\n    const { results } = questions;\n    const question = results[questionIndex];\n    return (\n      <section>\n        <div className=\"questions-container\">\n          <div className=\"questions-header\">\n            <span data-testid=\"question-category\">{question.category}</span>\n            <p data-testid=\"question-text\">{question.question}</p>\n          </div>\n          <ShuffledButtons />\n        </div>\n        <button type=\"button\" onClick={setNextQuestion}>Pr√≥xima</button>\n        <span onChange={this.timeIsOver}>{timer}</span>\n      </section>\n    );\n  }\n}\n\nconst mapStateToProps = (state) => ({\n  questionIndex: state.questionsDataReducer.index,\n  timer: state.questionsDataReducer.timerCount,\n});\n\nconst mapDispatchToProps = (dispatch) => ({\n  setNextQuestion: () => dispatch(newQuestionAction()),\n  timerCount: () => dispatch(timerCountAction()),\n  timeOut: () => dispatch(timeOutAction()),\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(QuestionsInfos);\n"]},"metadata":{},"sourceType":"module"}