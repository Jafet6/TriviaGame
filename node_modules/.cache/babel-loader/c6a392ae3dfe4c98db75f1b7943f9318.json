{"ast":null,"code":"var _jsxFileName = \"/home/jafet/projetos/sd-03-project-trivia-react-redux-06/src/components/GameScreen/ShuffledButtons.js\";\nimport React from 'react';\n\nconst arrWithAllButtons = objQuestion => {\n  const incorrect_answers = objQuestion.incorrect_answers;\n  const incorrectAnswersArr = incorrect_answers.map((e, index) => React.createElement(\"button\", {\n    \"data-testid\": `wrong-answer-${index}`,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 6\n    },\n    __self: this\n  }, e));\n  const allAnswers = [React.createElement(\"button\", {\n    \"data-testid\": \"correct-answer\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 8\n    },\n    __self: this\n  }, objQuestion.correct_answer), ...incorrectAnswersArr];\n  return allAnswers;\n};\n\nconst shuffleAnswers = array => {\n  let currentIndex = array.length;\n  let temporaryValue = [];\n  let randomIndex;\n\n  while (currentIndex !== 0) {\n    randomIndex = Math.floor(Math.random() * currentIndex);\n    currentIndex -= 1;\n    temporaryValue = array[currentIndex];\n    array[currentIndex] = array[randomIndex];\n    array[randomIndex] = temporaryValue;\n  }\n\n  return array;\n};\n\nconst ShuffledButtons = props => {\n  const question = props.question;\n  return React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 33\n    },\n    __self: this\n  }, shuffleAnswers(arrWithAllButtons(question)).map(e => React.createElement(\"div\", {\n    key: e.props.children,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 35\n    },\n    __self: this\n  }, e)));\n};\n\nexport default ShuffledButtons;","map":{"version":3,"sources":["/home/jafet/projetos/sd-03-project-trivia-react-redux-06/src/components/GameScreen/ShuffledButtons.js"],"names":["React","arrWithAllButtons","objQuestion","incorrect_answers","incorrectAnswersArr","map","e","index","allAnswers","correct_answer","shuffleAnswers","array","currentIndex","length","temporaryValue","randomIndex","Math","floor","random","ShuffledButtons","props","question","children"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;;AAEA,MAAMC,iBAAiB,GAAIC,WAAD,IAAiB;AAAA,QACjCC,iBADiC,GACXD,WADW,CACjCC,iBADiC;AAEzC,QAAMC,mBAAmB,GAAGD,iBAAiB,CAACE,GAAlB,CAAsB,CAACC,CAAD,EAAIC,KAAJ,KAC/C;AAAQ,mBAAc,gBAAeA,KAAM,EAA3C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAA+CD,CAA/C,CADyB,CAA5B;AAEA,QAAME,UAAU,GAAG,CACnB;AAAQ,mBAAY,gBAApB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAsCN,WAAW,CAACO,cAAlD,CADmB,EAEnB,GAAGL,mBAFgB,CAAnB;AAIA,SAAOI,UAAP;AACD,CATD;;AAWA,MAAME,cAAc,GAAIC,KAAD,IAAW;AAChC,MAAIC,YAAY,GAAGD,KAAK,CAACE,MAAzB;AACA,MAAIC,cAAc,GAAG,EAArB;AACA,MAAIC,WAAJ;;AAEA,SAAOH,YAAY,KAAK,CAAxB,EAA2B;AACzBG,IAAAA,WAAW,GAAGC,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,MAAL,KAAgBN,YAA3B,CAAd;AACAA,IAAAA,YAAY,IAAI,CAAhB;AAEAE,IAAAA,cAAc,GAAGH,KAAK,CAACC,YAAD,CAAtB;AACAD,IAAAA,KAAK,CAACC,YAAD,CAAL,GAAsBD,KAAK,CAACI,WAAD,CAA3B;AACAJ,IAAAA,KAAK,CAACI,WAAD,CAAL,GAAqBD,cAArB;AACD;;AACD,SAAOH,KAAP;AACD,CAdD;;AAgBA,MAAMQ,eAAe,GAAIC,KAAD,IAAW;AAAA,QACzBC,QADyB,GACZD,KADY,CACzBC,QADyB;AAEjC,SACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACGX,cAAc,CAACT,iBAAiB,CAACoB,QAAD,CAAlB,CAAd,CAA4ChB,GAA5C,CAAiDC,CAAD,IAC9C;AAAK,IAAA,GAAG,EAAEA,CAAC,CAACc,KAAF,CAAQE,QAAlB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAA6BhB,CAA7B,CADF,CADH,CADF;AAOD,CATD;;AAWA,eAAea,eAAf","sourcesContent":["import React from 'react';\n\nconst arrWithAllButtons = (objQuestion) => {\n  const { incorrect_answers } = objQuestion\n  const incorrectAnswersArr = incorrect_answers.map((e, index) => \n    (<button data-testid={`wrong-answer-${index}`}>{e}</button>));\n  const allAnswers = [\n  <button data-testid=\"correct-answer\">{objQuestion.correct_answer}</button>,\n  ...incorrectAnswersArr,\n  ];\n  return allAnswers;\n}\n\nconst shuffleAnswers = (array) => {\n  let currentIndex = array.length;\n  let temporaryValue = [];\n  let randomIndex;\n\n  while (currentIndex !== 0) {\n    randomIndex = Math.floor(Math.random() * currentIndex);\n    currentIndex -= 1;\n\n    temporaryValue = array[currentIndex];\n    array[currentIndex] = array[randomIndex];\n    array[randomIndex] = temporaryValue;\n  }\n  return array;\n}\n\nconst ShuffledButtons = (props) => {\n  const { question } = props;\n  return (\n    <div>\n      {shuffleAnswers(arrWithAllButtons(question)).map((e) =>\n        (<div key={e.props.children}>{e}</div>))\n      }\n    </div>\n  )\n}\n\nexport default ShuffledButtons;\n"]},"metadata":{},"sourceType":"module"}