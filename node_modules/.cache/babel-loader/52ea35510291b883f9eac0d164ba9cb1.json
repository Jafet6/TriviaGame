{"ast":null,"code":"var _jsxFileName = \"/home/jafet/curso-Trybe/projetos/front-end/projeto-18-ReactJS-Redux-TriviaGame/src/components/GameScreen/ShuffledButtons.js\";\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport he from 'he';\nimport { allAnswersAction } from '../../actions/allAnswersAction';\nimport './ShuffledButtons.css';\n\nconst arrWithAllButtons = objQuestion => {\n  const allAnswers = [objQuestion.correct_answer, ...objQuestion.incorrect_answers];\n  return allAnswers;\n};\n\nconst shuffleAnswers = array => {\n  let currentIndex = array.length;\n  let temporaryValue = [];\n  let randomIndex;\n  const newArr = [...array];\n\n  while (currentIndex !== 0) {\n    randomIndex = Math.floor(Math.random() * currentIndex);\n    currentIndex -= 1;\n    temporaryValue = newArr[currentIndex];\n    newArr[currentIndex] = newArr[randomIndex];\n    newArr[randomIndex] = temporaryValue;\n  }\n\n  return newArr;\n};\n\nclass ShuffledButtons extends React.Component {\n  componentDidMount() {\n    const _this$props = this.props,\n          questionsArr = _this$props.questionsArr,\n          allAnswersDispatch = _this$props.allAnswersDispatch;\n    const allAnswersArr = questionsArr.map(question => shuffleAnswers(arrWithAllButtons(question)));\n    allAnswersDispatch(allAnswersArr);\n  }\n\n  shouldShowAnswers() {\n    const allAnswers = this.props.allAnswers;\n    return allAnswers.length > 0;\n  }\n\n  renderButton(value, className, key, datatestId, index) {\n    const _this$props2 = this.props,\n          disabledBtn = _this$props2.disabledBtn,\n          answerChoosed = _this$props2.answerChoosed;\n    return React.createElement(\"div\", {\n      className: \"button-display question-button\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 45\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 46\n      },\n      __self: this\n    }, React.createElement(\"p\", {\n      className: \"button-display-text\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 47\n      },\n      __self: this\n    }, index + 1)), React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 49\n      },\n      __self: this\n    }, React.createElement(\"button\", {\n      \"data-testid\": datatestId,\n      type: \"button\",\n      value: value,\n      disabled: disabledBtn,\n      className: `${className} button-style`,\n      onClick: answerChoosed,\n      key: key,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 50\n      },\n      __self: this\n    }, he.decode(value))));\n  }\n\n  render() {\n    const _this$props3 = this.props,\n          questionsArr = _this$props3.questionsArr,\n          questionIndex = _this$props3.questionIndex,\n          wrongAnswerClass = _this$props3.wrongAnswerClass,\n          correctAnswerClass = _this$props3.correctAnswerClass,\n          allAnswers = _this$props3.allAnswers;\n    if (!this.shouldShowAnswers()) return null;\n    return React.createElement(\"div\", {\n      className: \"answers-buttons\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 76\n      },\n      __self: this\n    }, allAnswers[questionIndex].map((button, index) => {\n      if (button === questionsArr[questionIndex].correct_answer) {\n        return this.renderButton(button, correctAnswerClass, button, 'correct-answer', index);\n      }\n\n      return this.renderButton(button, wrongAnswerClass, button, `wrong-answer-${index}`, index);\n    }));\n  }\n\n}\n\nconst mapStateToProps = state => ({\n  questionIndex: state.questionsDataReducer.index,\n  questionsArr: state.apiQuestionsReducer.questions.results,\n  wrongAnswerClass: state.questionsDataReducer.wrongAnswerClass,\n  correctAnswerClass: state.questionsDataReducer.correctAnswerClass,\n  disabledBtn: state.questionsDataReducer.disabledBtn,\n  allAnswers: state.allAnswersReducer.allAnswers\n});\n\nconst mapDispatchToProps = dispatch => ({\n  allAnswersDispatch: arrayOfAnswers => dispatch(allAnswersAction(arrayOfAnswers))\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(ShuffledButtons);\nShuffledButtons.propTypes = {\n  questionIndex: PropTypes.number.isRequired,\n  answerChoosed: PropTypes.func.isRequired,\n  allAnswersDispatch: PropTypes.func.isRequired,\n  wrongAnswerClass: PropTypes.string,\n  correctAnswerClass: PropTypes.string,\n  disabledBtn: PropTypes.bool.isRequired,\n  questionsArr: PropTypes.arrayOf(PropTypes.object).isRequired,\n  allAnswers: PropTypes.arrayOf(PropTypes.array).isRequired\n};\nShuffledButtons.defaultProps = {\n  wrongAnswerClass: '',\n  correctAnswerClass: ''\n};","map":{"version":3,"sources":["/home/jafet/curso-Trybe/projetos/front-end/projeto-18-ReactJS-Redux-TriviaGame/src/components/GameScreen/ShuffledButtons.js"],"names":["React","PropTypes","connect","he","allAnswersAction","arrWithAllButtons","objQuestion","allAnswers","correct_answer","incorrect_answers","shuffleAnswers","array","currentIndex","length","temporaryValue","randomIndex","newArr","Math","floor","random","ShuffledButtons","Component","componentDidMount","props","questionsArr","allAnswersDispatch","allAnswersArr","map","question","shouldShowAnswers","renderButton","value","className","key","datatestId","index","disabledBtn","answerChoosed","decode","render","questionIndex","wrongAnswerClass","correctAnswerClass","button","mapStateToProps","state","questionsDataReducer","apiQuestionsReducer","questions","results","allAnswersReducer","mapDispatchToProps","dispatch","arrayOfAnswers","propTypes","number","isRequired","func","string","bool","arrayOf","object","defaultProps"],"mappings":"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","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport he from 'he';\nimport { allAnswersAction } from '../../actions/allAnswersAction';\nimport './ShuffledButtons.css';\n\nconst arrWithAllButtons = (objQuestion) => {\n  const allAnswers = [objQuestion.correct_answer, ...objQuestion.incorrect_answers];\n  return allAnswers;\n};\n\nconst shuffleAnswers = (array) => {\n  let currentIndex = array.length;\n  let temporaryValue = [];\n  let randomIndex;\n  const newArr = [...array];\n\n  while (currentIndex !== 0) {\n    randomIndex = Math.floor(Math.random() * currentIndex);\n    currentIndex -= 1;\n    temporaryValue = newArr[currentIndex];\n    newArr[currentIndex] = newArr[randomIndex];\n    newArr[randomIndex] = temporaryValue;\n  }\n  return newArr;\n};\n\nclass ShuffledButtons extends React.Component {\n  componentDidMount() {\n    const { questionsArr, allAnswersDispatch } = this.props;\n    const allAnswersArr = questionsArr\n      .map((question) => shuffleAnswers(arrWithAllButtons(question)));\n    allAnswersDispatch(allAnswersArr);\n  }\n\n  shouldShowAnswers() {\n    const { allAnswers } = this.props;\n    return allAnswers.length > 0;\n  }\n\n  renderButton(value, className, key, datatestId, index) {\n    const { disabledBtn, answerChoosed } = this.props;\n    return (\n      <div className=\"button-display question-button\">\n        <div>\n          <p className=\"button-display-text\">{index + 1}</p>\n        </div>\n        <div>\n          <button\n            data-testid={datatestId}\n            type=\"button\"\n            value={value}\n            disabled={disabledBtn}\n            className={`${className} button-style`}\n            onClick={answerChoosed}\n            key={key}\n          >\n            {he.decode(value)}\n          </button>\n        </div>\n      </div>\n    );\n  }\n\n  render() {\n    const {\n      questionsArr,\n      questionIndex,\n      wrongAnswerClass,\n      correctAnswerClass,\n      allAnswers,\n    } = this.props;\n    if (!this.shouldShowAnswers()) return null;\n    return (\n      <div className=\"answers-buttons\">\n        {allAnswers[questionIndex].map((button, index) => {\n          if (button === questionsArr[questionIndex].correct_answer) {\n            return this.renderButton(\n              button,\n              correctAnswerClass,\n              button,\n              'correct-answer',\n              index,\n            );\n          }\n          return this.renderButton(\n            button,\n            wrongAnswerClass,\n            button,\n            `wrong-answer-${index}`,\n            index,\n          );\n        })}\n      </div>\n    );\n  }\n}\n\nconst mapStateToProps = (state) => ({\n  questionIndex: state.questionsDataReducer.index,\n  questionsArr: state.apiQuestionsReducer.questions.results,\n  wrongAnswerClass: state.questionsDataReducer.wrongAnswerClass,\n  correctAnswerClass: state.questionsDataReducer.correctAnswerClass,\n  disabledBtn: state.questionsDataReducer.disabledBtn,\n  allAnswers: state.allAnswersReducer.allAnswers,\n});\n\nconst mapDispatchToProps = (dispatch) => ({\n  allAnswersDispatch: (arrayOfAnswers) => dispatch(allAnswersAction(arrayOfAnswers)),\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(ShuffledButtons);\n\nShuffledButtons.propTypes = {\n  questionIndex: PropTypes.number.isRequired,\n  answerChoosed: PropTypes.func.isRequired,\n  allAnswersDispatch: PropTypes.func.isRequired,\n  wrongAnswerClass: PropTypes.string,\n  correctAnswerClass: PropTypes.string,\n  disabledBtn: PropTypes.bool.isRequired,\n  questionsArr: PropTypes.arrayOf(PropTypes.object).isRequired,\n  allAnswers: PropTypes.arrayOf(PropTypes.array).isRequired,\n};\n\nShuffledButtons.defaultProps = {\n  wrongAnswerClass: '',\n  correctAnswerClass: '',\n};\n"]},"metadata":{},"sourceType":"module"}