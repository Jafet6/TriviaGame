{"version":3,"sources":["silvio.png","service/apiQuestionsRequest.js","service/apiCategoryRequest.js","actions/playersNameAction.js","service/apiGravatarRequest.js","service/functionsService.js","service/apiTokenRequest.js","components/LoginPage/LoginContainer.js","actions/apiQuestionsAction.js","actions/allCategoriesAction.js","actions/gravatarAction.js","actions/gameResetAction.js","components/LoginPage/LoginPage.js","components/FeedbackPage/feedback.jsx","components/SettingsPage/Settings.js","actions/filtersAction.js","components/RankingPage/Ranking.js","components/GameScreen/GravatarIMGController.js","components/GameScreen/Header.js","components/GameScreen/ShuffledButtons.js","actions/allAnswersAction.js","components/GameScreen/NextButtonControl.js","actions/newQuestionAction.js","components/GameScreen/QuestionsInfos.js","actions/timerCountAction.js","actions/timeOutAction.js","actions/checkAnswerAction.js","components/GameScreen/GameScreen.js","reducers/questionsDataReducer.js","reducers/gravatarReducer.js","reducers/apiQuestionsReducer.js","reducers/allAnswersReducer.js","reducers/playersInfoReducer.js","reducers/apiCategoriesReducer.js","reducers/filtersReducer.js","reducers/index.js","store/index.js","index.js","App.js","show-do-milh√£o.png"],"names":["module","exports","apiQuestionRequest","token","category","difficulty","type","URL","fetch","then","response","json","questions","ok","Promise","resolve","reject","apiCategoryRequest","categories","apiGravatarRequest","hash","picture","playersInfosLocalStorage","assertions","score","name","gravatarEmail","state","player","localStorage","setItem","JSON","stringify","apiTokenRequest","LoginContainer","props","username","email","handleChange","bind","startGame","to","data-testid","className","this","gameReset","apiCategoriesDispatch","e","target","value","setState","apiQuestionsDispatch","playersNamesDispatch","apiGravatarDispatch","filters","reponse","CryptoJS","MD5","toString","toLowerCase","getItem","style","display","flexDirection","htmlFor","onChange","disabled","marginTop","onClick","renderLogin","renderJogar","renderSettings","React","Component","connect","gravatarReducer","playersInfoReducer","filtersReducer","filter","questionsDataReducer","points","apiToken","apiQuestionsReducer","dispatch","receiveApiDataSuccess","error","errorMessage","receiveApiDataFailure","message","getApiQuestions","categoriesArr","trivia_categories","apiRequestFailure","getApiGravatarRequest","getGravatarSuccess","getGravatarFailure","getApiGravatar","playersNameAction","defaultProps","TriviaLogo","src","logo","alt","renderFeedbackScreen","playerAnswers","playerScore","renderScore","Feedback","playerName","playerPicture","renderHeaderScore","parseFloat","url","Settings","event","filterDispatch","map","id","key","withRouter","apiCategoriesReducer","filterObj","Ranking","rankingList","sortedUsers","parse","sort","a","b","indice","index","Math","random","PI","gravatarPlayer","GravatarIMGController","profilePicGravatar","ShuffledButtons","questionsArr","allAnswersDispatch","question","array","randomIndex","currentIndex","length","temporaryValue","newArr","floor","shuffleAnswers","objQuestion","correct_answer","incorrect_answers","allAnswers","datatestId","disabledBtn","answerChoosed","he","decode","questionIndex","wrongAnswerClass","correctAnswerClass","shouldShowAnswers","button","renderButton","results","allAnswersReducer","arrayOfAnswers","arrayWithAnswers","NextButtonControl","nextPageControler","setNextQuestion","timerFunction","history","push","timer","timerCount","QuestionsInfos","clearInterval","interval","setInterval","timeOut","personObject","newRankingArr","reduce","acc","rankingArray","dif","hard","medium","easy","checkAnswer","assertion","questionAnswer","rankingInfoLocalStorage","width","checkAnswerAction","GameScreen","silvio","INITIAL_STATE","action","loading","response_code","rootReducer","combineReducers","composeEnhancer","window","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","store","createStore","applyMiddleware","thunk","logger","ReactDOM","render","exact","path","component","LoginPage","document","getElementById"],"mappings":"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","file":"static/js/main.8f81bd6a.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/silvio.58c42e68.png\";","\nconst apiQuestionRequest = (token, { category, difficulty, type }) => {\n  const URL = `https://opentdb.com/api.php?amount=${5}&token=${token}&category=${category}&difficulty=${difficulty}&type=${type}`;\n  return fetch(URL).then((response) => (\n    response.json()\n      .then((questions) => (response.ok ? Promise.resolve(questions) : Promise.reject(questions)))\n  ));\n};\n\nexport default apiQuestionRequest;\n","\nconst apiCategoryRequest = () => {\n  const URL = 'https://opentdb.com/api_category.php';\n  return fetch(URL).then((response) => (\n    response.json()\n      .then(\n        (categories) => (response.ok ? Promise.resolve(categories) : Promise.reject(categories)),\n      )\n  ));\n};\n\nexport default apiCategoryRequest;\n","export const LOGIN = 'USERNAME';\n\nexport const playersNameAction = (username, email) => ({\n  type: LOGIN,\n  username,\n  email,\n});\n","\nconst apiGravatarRequest = (hash) => {\n  const URL = `https://www.gravatar.com/avatar/${hash}.json`;\n  return fetch(URL).then(\n    (picture) => (picture.ok ? Promise.resolve(picture) : Promise.reject(picture)),\n  );\n};\n\nexport default apiGravatarRequest;\n","function playersInfosLocalStorage(assertions, score, name, gravatarEmail) {\n  const state = {\n    player: {\n      name,\n      assertions,\n      score,\n      gravatarEmail,\n    },\n  };\n  localStorage.setItem('state', JSON.stringify(state));\n}\n\nexport default playersInfosLocalStorage;\n","const URL = 'https://opentdb.com/api_token.php?command=request';\n\nconst apiTokenRequest = () => fetch(URL).then((response) => (\n  response.json()\n    .then((token) => (response.ok ? Promise.resolve(token) : Promise.reject(token)))\n));\n\nexport default apiTokenRequest;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport CryptoJS from 'crypto-js';\nimport { Link } from 'react-router-dom';\nimport { connect } from 'react-redux';\nimport { getApiQuestions } from '../../actions/apiQuestionsAction';\nimport { getCategoriesRequest } from '../../actions/allCategoriesAction';\nimport { playersNameAction } from '../../actions/playersNameAction';\nimport { getApiGravatar } from '../../actions/gravatarAction';\nimport { gameResetAction } from '../../actions/gameResetAction';\nimport playersInfosLocalStorage from '../../service/functionsService';\nimport apiTokenRequest from '../../service/apiTokenRequest';\nimport './LoginPage.style.css';\n\nclass LoginContainer extends React.Component {\n  static renderSettings() {\n    return (\n      <div>\n        <Link to=\"/Settings\" data-testid=\"btn-settings\">\n          <button type=\"button\" className=\"play-button\">\n            CONFIGURA√á√ïES\n          </button>\n        </Link>\n      </div>\n    );\n  }\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      username: '',\n      email: '',\n    };\n    this.handleChange = this.handleChange.bind(this);\n    this.startGame = this.startGame.bind(this);\n  }\n\n  componentDidMount() {\n    const { gameReset, apiCategoriesDispatch } = this.props;\n    apiCategoriesDispatch();\n    gameReset();\n  }\n\n  handleChange(e) {\n    const { name, value } = e.target;\n    this.setState({ [name]: value });\n  }\n\n  async startGame() {\n    const {\n      apiQuestionsDispatch,\n      playersNamesDispatch,\n      apiGravatarDispatch,\n      assertions,\n      score,\n      name,\n      gravatarEmail,\n      filters,\n    } = this.props;\n    playersInfosLocalStorage(assertions, score, name, gravatarEmail);\n    await apiTokenRequest().then((reponse) => localStorage.setItem('token', reponse.token));\n    const { username, email } = this.state;\n    playersNamesDispatch(username, email);\n    apiGravatarDispatch(CryptoJS.MD5(email).toString().toLowerCase());\n    apiQuestionsDispatch(localStorage.getItem('token'), filters);\n  }\n\n  renderLogin() {\n    return (\n      <div style={{ display: 'flex', flexDirection: 'column' }}>\n        <div>\n          <label className=\"login-label\" htmlFor=\"email\">\n            E-mail do Gravatar:\n          </label>\n          <input\n            className=\"login-input\"\n            type=\"text\"\n            data-testid=\"input-gravatar-email\"\n            onChange={(e) => this.handleChange(e)}\n            name=\"email\"\n          />\n        </div>\n        <div>\n          <label className=\"login-label\" htmlFor=\"username\">\n            Nome do Jogador:\n          </label>\n          <input\n            className=\"login-input\"\n            onChange={(e) => this.handleChange(e)}\n            name=\"username\"\n            type=\"name\"\n            data-testid=\"input-player-name\"\n          />\n        </div>\n      </div>\n    );\n  }\n\n  renderJogar() {\n    const { username, email } = this.state;\n    let disabled = false;\n    if (username === '' || email === '') {\n      disabled = true;\n    }\n\n    return (\n      <div style={{ marginTop: '20px' }}>\n        <Link to=\"/game-screen\">\n          <button\n            className=\"play-button\"\n            type=\"button\"\n            data-testid=\"btn-play\"\n            disabled={disabled}\n            onClick={this.startGame}\n          >\n            JOGAR!\n          </button>\n        </Link>\n      </div>\n    );\n  }\n\n  render() {\n    return (\n      <div style={{}}>\n        {this.renderLogin()}\n        {this.renderJogar()}\n        {LoginContainer.renderSettings()}\n      </div>\n    );\n  }\n}\n\nconst mapStateToProps = (state) => ({\n  email: state.gravatarReducer.email,\n  name: state.playersInfoReducer.username,\n  filters: state.filtersReducer.filter,\n  gravatarEmail: state.playersInfoReducer.email,\n  score: state.questionsDataReducer.points,\n  assertions: state.questionsDataReducer.assertions,\n  token: state.gravatarReducer.token,\n  apiToken: state.apiQuestionsReducer.questions,\n});\n\nconst mapDispatchToProps = (dispatch) => ({\n  apiQuestionsDispatch: (token, filters) => dispatch(getApiQuestions(token, filters)),\n  apiCategoriesDispatch: () => dispatch(getCategoriesRequest()),\n  apiGravatarDispatch: (hash) => dispatch(getApiGravatar(hash)),\n  playersNamesDispatch: (username, email) => dispatch(playersNameAction(username, email)),\n  gameReset: () => dispatch(gameResetAction()),\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(LoginContainer);\n\nLoginContainer.propTypes = {\n  apiQuestionsDispatch: PropTypes.func.isRequired,\n  playersNamesDispatch: PropTypes.func.isRequired,\n  apiGravatarDispatch: PropTypes.func.isRequired,\n  gameReset: PropTypes.func.isRequired,\n  assertions: PropTypes.number.isRequired,\n  score: PropTypes.number.isRequired,\n  name: PropTypes.string.isRequired,\n  gravatarEmail: PropTypes.string,\n};\n\nLoginContainer.defaultProps = {\n  gravatarEmail: '',\n};\n","import apiQuestionRequest from '../service/apiQuestionsRequest';\n\nexport const API_REQUEST = 'API_REQUEST';\nexport const API_RECEIVE_SUCCESS = 'API_RECEIVE_SUCCESS';\nexport const API_RECEIVE_FAILURE = 'API_RECEIVE_FAILURE';\n\nconst apiRequestControl = () => ({\n  type: API_REQUEST,\n});\n\nconst receiveApiDataSuccess = (questions) => ({\n  type: API_RECEIVE_SUCCESS,\n  questions,\n});\n\nconst receiveApiDataFailure = (error) => ({\n  type: API_RECEIVE_SUCCESS,\n  errorMessage: error,\n});\n\nexport function getApiQuestions(token, filters) {\n  return (dispatch) => {\n    dispatch(apiRequestControl());\n\n    return apiQuestionRequest(token, filters)\n      .then(\n        (questions) => dispatch(receiveApiDataSuccess(questions)),\n        (error) => dispatch(receiveApiDataFailure(error.message)),\n      );\n  };\n}\n","import apiCategoryRequest from '../service/apiCategoryRequest';\n\nexport const API_CATEGORIES_REQUEST = 'API_CATEGORIES_REQUEST';\nexport const API_CATEGORIES_RECEIVE_SUCCESS = 'API_CATEGORIES_RECEIVE_SUCCESS';\nexport const API_CATEGORIES_RECEIVE_FAILURE = 'API_CATEGORIES_RECEIVE_FAILURE';\n\nconst apiRequestAction = () => ({\n  type: API_CATEGORIES_REQUEST,\n});\n\nconst apiRequestSuccess = (categoriesArr) => ({\n  type: API_CATEGORIES_RECEIVE_SUCCESS,\n  categoriesArr,\n});\n\nconst apiRequestFailure = (error) => ({\n  type: API_CATEGORIES_RECEIVE_FAILURE,\n  error,\n});\n\nexport function getCategoriesRequest() {\n  return (dispatch) => {\n    dispatch(apiRequestAction());\n\n    return apiCategoryRequest()\n      .then(\n        (categories) => dispatch(apiRequestSuccess(categories.trivia_categories)),\n        (error) => dispatch(apiRequestFailure(error.message)),\n      );\n  };\n}\n","import getApiGravatarRequest from '../service/apiGravatarRequest';\n\nexport const GET_GRAVATAR = 'GET_GRAVATAR';\nexport const GET_GRAVATAR_SUCCESS = 'GET_GRAVATAR_SUCCESS';\nexport const GET_GRAVATAR_FAILURE = 'GET_GRAVATAR_FAILURE';\n\nconst gravatarRequest = () => ({\n  type: GET_GRAVATAR,\n});\n\nconst getGravatarSuccess = (picture) => ({\n  type: GET_GRAVATAR_SUCCESS,\n  picture,\n});\n\nconst getGravatarFailure = (error) => ({\n  type: GET_GRAVATAR_FAILURE,\n  error,\n});\n\nexport function getApiGravatar(hash) {\n  return (dispatch) => {\n    dispatch(gravatarRequest());\n\n    return getApiGravatarRequest(hash)\n      .then(\n        (picture) => dispatch(getGravatarSuccess(picture)),\n        (error) => dispatch(getGravatarFailure(error.message)),\n      );\n  };\n}\n","export const RESET_GAME = 'RESET_GAME';\n\nexport const gameResetAction = () => ({\n  type: RESET_GAME,\n});\n","import React from 'react';\nimport logo from '../../show-do-milh√£o.png';\nimport LoginContainer from './LoginContainer';\nimport './LoginPage.style.css';\n\n\nconst TriviaLogo = () => (\n  <div className=\"login-page\">\n    <header className=\"login-page-header\">\n      <div>\n        <img src={logo} alt=\"logo\" style={{ marginTop: '100px' }} />\n        <LoginContainer />\n      </div>\n    </header>\n  </div>\n);\n\nexport default TriviaLogo;\n","/* eslint-disable react/prop-types */\nimport React, { Component } from 'react';\nimport { Link } from 'react-router-dom';\nimport { connect } from 'react-redux';\nimport './feedback.style.css';\n\nconst renderButtons = () => (\n  <div>\n    <div>\n      <Link to=\"/ranking\">\n        <button\n          type=\"button\"\n          className=\"feedback-button-ranking\"\n          data-testid=\"btn-ranking\"\n        >\n          VER RANKING\n        </button>\n      </Link>\n    </div>\n    <div>\n      <Link to=\"/\">\n        <button\n          type=\"button\"\n          className=\"feedback-button-playagain\"\n          data-testid=\"btn-play-again\"\n        >\n          JOGAR NOVAMENTE\n        </button>\n      </Link>\n    </div>\n  </div>\n);\n\nconst feedbackPos = () => (\n  <div>\n    <h1 data-testid=\"feedback-text\">Mandou bem!</h1>\n  </div>\n);\n\nconst feedbackNeg = () => (\n  <div>\n    <h1 data-testid=\"feedback-text\">Podia ser melhor...</h1>\n  </div>\n);\n\nconst renderScore = (playerAnswers, playerScore) => (\n  <div>\n    <h2>\n      Quest√µes certas:\n      {' '}\n      <span data-testid=\"feedback-total-question\">\n        {' '}\n        {playerAnswers}\n      </span>\n    </h2>\n    <h2>\n      Pontua√ß√£o final:\n      {' '}\n      <span data-testid=\"feedback-total-score\">\n        {' '}\n        {playerScore}\n      </span>\n    </h2>\n  </div>\n);\n\nconst renderFeedbackScreen = (playerAnswers, playerScore) => (\n  <div>\n    {playerAnswers < 3 ? feedbackNeg() : feedbackPos()}\n    {renderScore(playerAnswers, playerScore)}\n  </div>\n);\n\nconst renderHeaderScore = (playerName, playerScore, playerPicture) => (\n  <header className=\"feedback-header\">\n    <div style={{ display: 'flex' }}>\n      <img\n        data-testid=\"header-profile-picture\"\n        className=\"player-profile-img-header\"\n        alt=\"player-profile\"\n        src={playerPicture}\n      />\n      <p data-testid=\"header-player-name\">\n        Jogador:\n        <strong>{playerName}</strong>\n      </p>\n    </div>\n    <div>\n      <p>\n        Pontos:\n        <strong data-testid=\"header-score\">{playerScore}</strong>\n      </p>\n    </div>\n  </header>\n);\n\nclass Feedback extends Component {\n  render() {\n    const {\n      // eslint-disable-next-line react/prop-types\n      playerAnswers,\n      playerName,\n      playerPicture,\n      playerScore,\n    } = this.props;\n    return (\n      <div className=\"header-container\">\n        {renderHeaderScore(playerName, playerScore, playerPicture)}\n        <div className=\"score-container\">\n          {renderFeedbackScreen(playerAnswers, playerScore)}\n          {renderButtons()}\n        </div>\n      </div>\n    );\n  }\n}\n\nconst mapStateToProps = (state) => ({\n  playerName: state.playersInfoReducer.username,\n  playerScore: parseFloat(state.questionsDataReducer.points),\n  playerAnswers: state.questionsDataReducer.assertions,\n  playerPicture: state.gravatarReducer.picture.url,\n});\n\nexport default connect(mapStateToProps)(Feedback);\n","import React from 'react';\nimport { connect } from 'react-redux';\nimport { withRouter, Link } from 'react-router-dom';\nimport { filtersAction } from '../../actions/filtersAction';\nimport './Settings.css';\n\nclass Settings extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      filter: {\n        category: '',\n        difficulty: '',\n        type: '',\n      },\n    };\n    this.handleChange = this.handleChange.bind(this);\n  }\n\n  handleChange(event) {\n    const { filter } = this.state;\n    const { name, value } = event.target;\n    this.setState({\n      filter: {\n        ...filter,\n        [name]: value,\n      },\n    });\n  }\n\n  render() {\n    const { categories, filterDispatch } = this.props;\n    const {\n      category, type, difficulty, filter,\n    } = this.state;\n    return (\n      <div className=\"settings-container\">\n        <div className=\"settings-content\">\n          <h1 className=\"setting-title\" data-testid=\"settings-title\">Configura√ß√µes</h1>\n          <form className=\"settings-form\">\n            <label>\n              Catergory\n              <select className=\"settings-config\" name=\"category\" value={category} onChange={this.handleChange}>\n                <option className=\"settings-config\" value=\"\">Any Category</option>\n                {categories.map(({ id, name }) => (<option className=\"settings-config\" value={id} key={id}>{name}</option>))}\n              </select>\n            </label>\n            <label>\n              Type\n              <select className=\"settings-config\" name=\"type\" value={type} onChange={this.handleChange}>\n                <option value=\"\">Any Type</option>\n                <option value=\"multiple\">Multiple Choice</option>\n                <option value=\"boolean\">True / False</option>\n              </select>\n            </label>\n            <label>\n              Difficulty\n              <select className=\"settings-config\" name=\"difficulty\" value={difficulty} onChange={this.handleChange}>\n                <option value=\"\">Any Difficulty</option>\n                <option value=\"easy\">Easy</option>\n                <option value=\"medium\">Medium</option>\n                <option value=\"hard\">Hard</option>\n              </select>\n            </label>\n          </form>\n          <div className=\"filter-container\">\n            <Link to=\"/\">\n              <button className=\"settings-choosed\" type=\"button\" onClick={() => filterDispatch(filter)}>\n                Aplicar Filtro\n              </button>\n            </Link>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nconst mapStateToProps = (state) => ({\n  categories: state.apiCategoriesReducer.categories,\n});\n\nconst mapDispatchToProps = (dispatch) => ({\n  filterDispatch: (filterObj) => dispatch(filtersAction(filterObj)),\n});\n\nexport default withRouter(connect(mapStateToProps, mapDispatchToProps)(Settings));\n","export const FILTER = 'FILTER';\n\nexport const filtersAction = (filters) => ({\n  type: FILTER,\n  filters,\n});\n","import React from 'react';\nimport { Link } from 'react-router-dom';\nimport './Ranking.style.css';\n\nclass Ranking extends React.Component {\n  static rankingList() {\n    const gravatarPlayer = (picture) => <img src={picture} alt=\"Gravatar\" />;\n\n    const getUser = JSON.parse(localStorage.getItem('ranking')) || [];\n    const sortedUsers = getUser.sort((a, b) => b.score - a.score);\n\n    return (\n      <ul className=\"full-list\">\n        {sortedUsers.map(({ name, score, picture }, indice) => {\n          const index = indice + 1;\n          return (\n            <li className=\"list-items\" key={Math.random() * Math.PI}>\n              {gravatarPlayer(picture)}\n              <p data-testid={`player-name-${index}`}>{`${name}`}</p>\n              <p data-testid={`player-score-${index}`}>{` ${score}`}</p>\n            </li>\n          );\n        })}\n      </ul>\n    );\n  }\n\n  render() {\n    return (\n      <div>\n        <div>\n          <h1 className=\"title\" data-testid=\"ranking-title\">Ranking</h1>\n          {Ranking.rankingList()}\n        </div>\n        <div className=\"home-btn-container\">\n          <Link to=\"/\">\n            <button className=\"home-btn\" type=\"button\" data-testid=\"btn-go-home\">\n              Voltar ao Inicio\n            </button>\n          </Link>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default Ranking;\n","import React from 'react';\nimport { connect } from 'react-redux';\nimport PropTypes from 'prop-types';\n\nconst GravatarIMGController = (props) => {\n  const { profilePicGravatar } = props;\n  if (profilePicGravatar.url !== '') {\n    return (\n\n      <img className=\"player-profile-img-header\" data-testid=\"header-profile-picture\" src={profilePicGravatar.url} alt=\"profile\" />\n    );\n  }\n  return (\n    <img\n      className=\"player-profile-img-header\"\n      data-testid=\"header-profile-picture\"\n      src=\"http://www.gravatar.com/avatar\"\n      alt=\"Default Profile\"\n    />\n  );\n};\n\n\nconst mapStateToProps = (state) => ({\n  profilePicGravatar: state.gravatarReducer.picture,\n});\n\nexport default connect(mapStateToProps)(GravatarIMGController);\n\nGravatarIMGController.propTypes = {\n  profilePicGravatar: PropTypes.objectOf(PropTypes.any),\n};\n\nGravatarIMGController.defaultProps = {\n  profilePicGravatar: {},\n};\n","import React from 'react';\nimport { connect } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport GravatarIMGController from './GravatarIMGController';\nimport './Header.style.css';\n\nconst Header = (props) => {\n  const { score, username } = props;\n  return (\n    <header className=\"header\">\n      <div style={{ display: 'flex' }}>\n        <GravatarIMGController />\n        <p data-testid=\"header-player-name\">{username}</p>\n      </div>\n      <div>\n        <p data-testid=\"header-score\">{score}</p>\n      </div>\n    </header>\n  );\n};\n\nconst mapStateToProps = (state) => ({\n  score: state.questionsDataReducer.points,\n  username: state.playersInfoReducer.username,\n});\n\nexport default connect(mapStateToProps)(Header);\n\nHeader.propTypes = {\n  score: PropTypes.number.isRequired,\n  username: PropTypes.string.isRequired,\n};\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport he from 'he';\nimport { allAnswersAction } from '../../actions/allAnswersAction';\nimport './ShuffledButtons.css';\n\nconst arrWithAllButtons = (objQuestion) => {\n  const allAnswers = [objQuestion.correct_answer, ...objQuestion.incorrect_answers];\n  return allAnswers;\n};\n\nconst shuffleAnswers = (array) => {\n  let currentIndex = array.length;\n  let temporaryValue = [];\n  let randomIndex;\n  const newArr = [...array];\n\n  while (currentIndex !== 0) {\n    randomIndex = Math.floor(Math.random() * currentIndex);\n    currentIndex -= 1;\n    temporaryValue = newArr[currentIndex];\n    newArr[currentIndex] = newArr[randomIndex];\n    newArr[randomIndex] = temporaryValue;\n  }\n  return newArr;\n};\n\nclass ShuffledButtons extends React.Component {\n  componentDidMount() {\n    const { questionsArr, allAnswersDispatch } = this.props;\n    const allAnswersArr = questionsArr\n      .map((question) => shuffleAnswers(arrWithAllButtons(question)));\n    allAnswersDispatch(allAnswersArr);\n  }\n\n  shouldShowAnswers() {\n    const { allAnswers } = this.props;\n    return allAnswers.length > 0;\n  }\n\n  renderButton(value, className, key, datatestId, index) {\n    const { disabledBtn, answerChoosed } = this.props;\n    return (\n      <div className=\"button-display question-button\">\n        <div>\n          <p className=\"button-display-text\">{index + 1}</p>\n        </div>\n        <div>\n          <button\n            data-testid={datatestId}\n            type=\"button\"\n            value={value}\n            disabled={disabledBtn}\n            className={`${className} button-style`}\n            onClick={answerChoosed}\n            key={key}\n          >\n            {he.decode(value)}\n          </button>\n        </div>\n      </div>\n    );\n  }\n\n  render() {\n    const {\n      questionsArr,\n      questionIndex,\n      wrongAnswerClass,\n      correctAnswerClass,\n      allAnswers,\n    } = this.props;\n    if (!this.shouldShowAnswers()) return null;\n    return (\n      <div className=\"answers-buttons\">\n        {allAnswers[questionIndex].map((button, index) => {\n          if (button === questionsArr[questionIndex].correct_answer) {\n            return this.renderButton(\n              button,\n              correctAnswerClass,\n              button,\n              'correct-answer',\n              index,\n            );\n          }\n          return this.renderButton(\n            button,\n            wrongAnswerClass,\n            button,\n            `wrong-answer-${index}`,\n            index,\n          );\n        })}\n      </div>\n    );\n  }\n}\n\nconst mapStateToProps = (state) => ({\n  questionIndex: state.questionsDataReducer.index,\n  questionsArr: state.apiQuestionsReducer.questions.results,\n  wrongAnswerClass: state.questionsDataReducer.wrongAnswerClass,\n  correctAnswerClass: state.questionsDataReducer.correctAnswerClass,\n  disabledBtn: state.questionsDataReducer.disabledBtn,\n  allAnswers: state.allAnswersReducer.allAnswers,\n});\n\nconst mapDispatchToProps = (dispatch) => ({\n  allAnswersDispatch: (arrayOfAnswers) => dispatch(allAnswersAction(arrayOfAnswers)),\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(ShuffledButtons);\n\nShuffledButtons.propTypes = {\n  questionIndex: PropTypes.number.isRequired,\n  answerChoosed: PropTypes.func.isRequired,\n  allAnswersDispatch: PropTypes.func.isRequired,\n  wrongAnswerClass: PropTypes.string,\n  correctAnswerClass: PropTypes.string,\n  disabledBtn: PropTypes.bool.isRequired,\n  questionsArr: PropTypes.arrayOf(PropTypes.object).isRequired,\n  allAnswers: PropTypes.arrayOf(PropTypes.array).isRequired,\n};\n\nShuffledButtons.defaultProps = {\n  wrongAnswerClass: '',\n  correctAnswerClass: '',\n};\n","export const ALL_ANSWERS = 'ALL_ANSWERS';\n\nexport const allAnswersAction = (arrayWithAnswers) => ({\n  type: ALL_ANSWERS,\n  arrayWithAnswers,\n});\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport { withRouter } from 'react-router-dom';\nimport { newQuestionAction } from '../../actions/newQuestionAction';\n\nclass NextButtonControl extends React.Component {\n  constructor(props) {\n    super(props);\n    this.nextPageControler = this.nextPageControler.bind(this);\n  }\n\n  nextPageControler() {\n    const {\n      setNextQuestion, timerFunction, questionIndex, allAnswers, history,\n    } = this.props;\n    if ((questionIndex + 1) === allAnswers.length) return history.push('/feedback');\n    setNextQuestion();\n    return timerFunction();\n  }\n\n  // nextButton Working\n\n  render() {\n    const { wrongAnswerClass, timer } = this.props;\n    if (wrongAnswerClass === '' && timer !== 0) return null;\n    return (\n      <div>\n        <button\n          className=\"play-button\"\n          type=\"button\"\n          data-testid=\"btn-next\"\n          onClick={this.nextPageControler}\n        >\n          Pr√≥xima\n        </button>\n      </div>\n    );\n  }\n}\n\nconst mapStateToProps = (state) => ({\n  questionIndex: state.questionsDataReducer.index,\n  wrongAnswerClass: state.questionsDataReducer.wrongAnswerClass,\n  allAnswers: state.allAnswersReducer.allAnswers,\n  timer: state.questionsDataReducer.timerCount,\n});\n\nconst mapDispatchToProps = (dispatch) => ({\n  setNextQuestion: () => dispatch(newQuestionAction()),\n});\n\nexport default withRouter(connect(mapStateToProps, mapDispatchToProps)(NextButtonControl));\n\nNextButtonControl.propTypes = {\n  allAnswers: PropTypes.arrayOf(PropTypes.array).isRequired,\n  questionIndex: PropTypes.number.isRequired,\n  setNextQuestion: PropTypes.func.isRequired,\n  timerFunction: PropTypes.func.isRequired,\n  wrongAnswerClass: PropTypes.string,\n  timer: PropTypes.number.isRequired,\n  history: PropTypes.objectOf(PropTypes.any).isRequired,\n};\n\nNextButtonControl.defaultProps = {\n  wrongAnswerClass: '',\n};\n","export const NEXT_QUESTION = 'NEXT_QUESTION';\n\nexport const newQuestionAction = () => ({\n  type: NEXT_QUESTION,\n});\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport he from 'he';\nimport { connect } from 'react-redux';\nimport { newQuestionAction } from '../../actions/newQuestionAction';\nimport { timerCountAction } from '../../actions/timerCountAction';\nimport { timeOutAction } from '../../actions/timeOutAction';\nimport { checkAnswerAction } from '../../actions/checkAnswerAction';\nimport './QuestionsInfos.css';\nimport ShuffledButtons from './ShuffledButtons';\nimport NextButtonControl from './NextButtonControl';\nimport logo from '../../show-do-milh√£o.png';\nimport playersInfosLocalStorage from '../../service/functionsService';\n\nclass QuestionsInfos extends React.Component {\n  constructor(props) {\n    super(props);\n    this.answerChoosed = this.answerChoosed.bind(this);\n    this.timerFunction = this.timerFunction.bind(this);\n  }\n\n  componentDidMount() {\n    this.timerFunction();\n  }\n\n  componentWillUnmount() {\n    clearInterval(this.interval);\n  }\n\n  timerFunction() {\n    this.interval = setInterval(() => {\n      const { timerCount, timer, timeOut } = this.props;\n\n      if (timer === 0) {\n        timeOut();\n        return clearInterval(this.interval);\n      }\n\n      return timerCount();\n    }, 1000);\n  }\n\n  rankingInfoLocalStorage() {\n    const { picture, score, name } = this.props;\n    const personObject = { name, score, picture };\n    if (localStorage.getItem('ranking')) {\n      const rankingArray = JSON.parse(localStorage.getItem('ranking'));\n      const newRankingArr = rankingArray.reduce((acc, e) => {\n        if (e.name !== name) acc.push(e);\n        return acc;\n      }, []);\n      newRankingArr.push(personObject);\n      return localStorage.setItem('ranking', JSON.stringify(newRankingArr));\n    }\n    const rankingArray = [];\n    rankingArray.push(personObject);\n    return localStorage.setItem('ranking', JSON.stringify(rankingArray));\n  }\n\n  async answerChoosed(event) {\n    const dif = {\n      hard: 3,\n      medium: 2,\n      easy: 1,\n    };\n    const {\n      timer, checkAnswer, questionsArr, questionIndex,\n    } = this.props;\n    let points = 0;\n    let assertion = 0;\n    const questionAnswer = questionsArr[questionIndex];\n    if (event.target.value === questionAnswer.correct_answer) {\n      points = 10 + (timer * dif[questionAnswer.difficulty]);\n      assertion = 1;\n    }\n    await checkAnswer(points, assertion);\n    const {\n      assertions, score, name, gravatarEmail,\n    } = this.props;\n    playersInfosLocalStorage(assertions, score, name, gravatarEmail);\n    this.rankingInfoLocalStorage();\n    return clearInterval(this.interval);\n  }\n\n  render() {\n    const { questionIndex, timer, questionsArr } = this.props;\n    const question = questionsArr[questionIndex];\n    return (\n      <div className=\"questions-display\">\n        <section>\n          <img src={logo} width=\"400px\" alt=\"logo\" />\n          <div className=\"questions-container\">\n            <div className=\"questions-header\">\n              <span data-testid=\"question-category\">{question.category}</span>\n              <div>\n                <p data-testid=\"question-text\">{`${he.decode(question.question)}`}</p>\n                <p>\n                  {`Tempo restante: ${timer}s`}\n                </p>\n              </div>\n            </div>\n            <div className=\"shuffled-buttons\">\n              <ShuffledButtons answerChoosed={this.answerChoosed} />\n            </div>\n            <NextButtonControl timerFunction={this.timerFunction} />\n          </div>\n        </section>\n      </div>\n    );\n  }\n}\n\nconst mapStateToProps = (state) => ({\n  questionIndex: state.questionsDataReducer.index,\n  name: state.playersInfoReducer.username,\n  picture: state.gravatarReducer.picture.url,\n  gravatarEmail: state.playersInfoReducer.email,\n  score: state.questionsDataReducer.points,\n  assertions: state.questionsDataReducer.assertions,\n  questionsArr: state.apiQuestionsReducer.questions.results,\n  timer: state.questionsDataReducer.timerCount,\n  wrongAnswerClass: state.questionsDataReducer.wrongAnswerClass,\n});\n\nconst mapDispatchToProps = (dispatch) => ({\n  setNextQuestion: () => dispatch(newQuestionAction()),\n  timerCount: () => dispatch(timerCountAction()),\n  timeOut: () => dispatch(timeOutAction()),\n  checkAnswer: (points, assertions) => dispatch(checkAnswerAction(points, assertions)),\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(QuestionsInfos);\n\nQuestionsInfos.propTypes = {\n  questionIndex: PropTypes.number.isRequired,\n  questionsArr: PropTypes.arrayOf(PropTypes.object),\n  timer: PropTypes.number.isRequired,\n  timeOut: PropTypes.func.isRequired,\n  timerCount: PropTypes.func.isRequired,\n  checkAnswer: PropTypes.func.isRequired,\n  assertions: PropTypes.number.isRequired,\n  score: PropTypes.number.isRequired,\n  name: PropTypes.string.isRequired,\n  gravatarEmail: PropTypes.string,\n  picture: PropTypes.string,\n};\n\nQuestionsInfos.defaultProps = {\n  questionsArr: [],\n  picture: '',\n  gravatarEmail: '',\n};\n","export const TIMER_COUNT = 'TIMER_COUNT';\n\nexport const timerCountAction = () => ({\n  type: TIMER_COUNT,\n});\n","export const TIME_OUT = 'TIME_OUT';\n\nexport const timeOutAction = () => ({\n  type: TIME_OUT,\n});\n","export const CHECKED_ANSWER = 'CHECKED_ANSWER';\n\nexport const checkAnswerAction = (points, assertions) => ({\n  type: CHECKED_ANSWER,\n  points,\n  assertions,\n});\n","import React from 'react';\nimport { connect } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport Header from './Header';\nimport QuestionsInfos from './QuestionsInfos';\nimport silvio from '../../silvio.png';\nimport './GameScreen.style.css';\n\nclass GameScreen extends React.Component {\n  render() {\n    const { questionsArr } = this.props;\n    if (questionsArr.length === 0) return <div>Loading...</div>;\n    return (\n      <div className=\"game-screen-container\">\n        <div className=\"game-screen-comp\">\n          <QuestionsInfos />\n          <Header />\n        </div>\n        <div className=\"silvio-img-container\">\n          <div>\n            <img src={silvio} className=\"silvio-img\" alt=\"silvio santos\" />\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nconst mapStateToProps = (state) => ({\n  questionsArr: state.apiQuestionsReducer.questions.results,\n});\n\nexport default connect(mapStateToProps)(GameScreen);\n\n\nGameScreen.propTypes = {\n  questionsArr: PropTypes.arrayOf(PropTypes.object),\n};\n\nGameScreen.defaultProps = {\n  questionsArr: [],\n};\n","import { NEXT_QUESTION } from '../actions/newQuestionAction';\nimport { CHECKED_ANSWER } from '../actions/checkAnswerAction';\nimport { TIMER_COUNT } from '../actions/timerCountAction';\nimport { TIME_OUT } from '../actions/timeOutAction';\nimport { RESET_GAME } from '../actions/gameResetAction';\n\nconst INITIAL_STATE = {\n  index: 0,\n  correctAnswerClass: '',\n  wrongAnswerClass: '',\n  disabledBtn: false,\n  timerCount: 30,\n  points: 0,\n  difficulty: 1,\n  assertions: 0,\n};\n\nconst questionsDataReducer = (state = INITIAL_STATE, action) => {\n  switch (action.type) {\n    case NEXT_QUESTION:\n      return {\n        ...state,\n        index: state.index + 1,\n        correctAnswerClass: '',\n        wrongAnswerClass: '',\n        disabledBtn: false,\n        timerCount: 30,\n      };\n    case CHECKED_ANSWER:\n      return {\n        ...state,\n        correctAnswerClass: 'correct-answer',\n        wrongAnswerClass: 'wrong-answer',\n        disabledBtn: true,\n        points: state.points + action.points,\n        assertions: state.assertions + action.assertions,\n      };\n    case TIMER_COUNT:\n      return { ...state, timerCount: state.timerCount - 1 };\n    case TIME_OUT:\n      return { ...state, disabledBtn: true, points: state.points + 0 };\n    case RESET_GAME:\n      return INITIAL_STATE;\n    default:\n      return state;\n  }\n};\n\nexport default questionsDataReducer;\n","import {\n  GET_GRAVATAR,\n  GET_GRAVATAR_SUCCESS,\n  GET_GRAVATAR_FAILURE,\n} from '../actions/gravatarAction';\n\nconst INITIAL_STATE = {\n  picture: '',\n  loading: false,\n};\n\nconst gravatarReducer = (state = INITIAL_STATE, action) => {\n  switch (action.type) {\n    case GET_GRAVATAR:\n      return {\n        ...state,\n        loading: true,\n      };\n    case GET_GRAVATAR_SUCCESS:\n      return {\n        ...state,\n        picture: action.picture,\n        loading: false,\n      };\n    case GET_GRAVATAR_FAILURE:\n      return {\n        ...state,\n        error: action.error,\n        loading: false,\n      };\n    default: return state;\n  }\n};\n\nexport default gravatarReducer;\n","import {\n  API_REQUEST,\n  API_RECEIVE_SUCCESS,\n  API_RECEIVE_FAILURE,\n} from '../actions/apiQuestionsAction';\nimport { RESET_GAME } from '../actions/gameResetAction';\n\nconst INITIAL_STATE = {\n  questions: {\n    results: [],\n  },\n  loading: false,\n  errorMessage: '',\n};\n\nconst apiQuestionsReducer = (state = INITIAL_STATE, action) => {\n  switch (action.type) {\n    case API_REQUEST:\n      return { ...state, loading: true };\n    case API_RECEIVE_SUCCESS:\n      return {\n        ...state,\n        questions: {\n          response_code: action.questions.response_code, results: [...action.questions.results],\n        },\n        loading: false,\n      };\n    case API_RECEIVE_FAILURE:\n      return { ...state, errorMessage: action.errorMessage, loading: false };\n    case RESET_GAME:\n      return INITIAL_STATE;\n    default:\n      return state;\n  }\n};\n\nexport default apiQuestionsReducer;\n","import { ALL_ANSWERS } from '../actions/allAnswersAction';\n\nconst INITIAL_STATE = {\n  allAnswers: [],\n};\n\nconst allAnswersReducer = (state = INITIAL_STATE, action) => {\n  switch (action.type) {\n    case ALL_ANSWERS:\n      return {\n        ...state,\n        allAnswers: action.arrayWithAnswers,\n      };\n    default:\n      return state;\n  }\n};\n\nexport default allAnswersReducer;\n","import { LOGIN } from '../actions/playersNameAction';\n\nconst INITIAL_STATE = {\n  username: '',\n  email: '',\n};\n\nconst playersInfoReducer = (state = INITIAL_STATE, action) => {\n  switch (action.type) {\n    case LOGIN:\n      return {\n        ...state,\n        username: action.username,\n        email: action.email,\n      };\n    default:\n      return state;\n  }\n};\n\nexport default playersInfoReducer;\n","import {\n  API_CATEGORIES_REQUEST,\n  API_CATEGORIES_RECEIVE_SUCCESS,\n  API_CATEGORIES_RECEIVE_FAILURE,\n} from '../actions/allCategoriesAction';\n\nconst INITIAL_STATE = {\n  categories: [],\n  errorMessage: '',\n  loading: false,\n};\n\nconst apiCategoriesReducer = (state = INITIAL_STATE, action) => {\n  switch (action.type) {\n    case API_CATEGORIES_REQUEST:\n      return {\n        ...state,\n        loading: true,\n      };\n    case API_CATEGORIES_RECEIVE_SUCCESS:\n      return {\n        ...state,\n        categories: action.categoriesArr,\n        loading: false,\n      };\n    case API_CATEGORIES_RECEIVE_FAILURE:\n      return {\n        ...state,\n        errorMessage: action.error,\n        loading: false,\n      };\n    default:\n      return state;\n  }\n};\n\nexport default apiCategoriesReducer;\n","import { FILTER } from '../actions/filtersAction';\n\nconst INITIAL_STATE = {\n  filter: {\n    category: '',\n    difficulty: '',\n    type: '',\n  },\n};\n\nconst filtersReducer = (state = INITIAL_STATE, action) => {\n  switch (action.type) {\n    case FILTER:\n      return {\n        ...state,\n        filter: action.filters,\n      };\n    default:\n      return state;\n  }\n};\n\nexport default filtersReducer;\n","import { combineReducers } from 'redux';\nimport questionsDataReducer from './questionsDataReducer';\nimport gravatarReducer from './gravatarReducer';\nimport apiQuestionsReducer from './apiQuestionsReducer';\nimport allAnswersReducer from './allAnswersReducer';\nimport playersInfoReducer from './playersInfoReducer';\nimport apiCategoriesReducer from './apiCategoriesReducer';\nimport filtersReducer from './filtersReducer';\n\nconst rootReducer = combineReducers({\n  questionsDataReducer,\n  gravatarReducer,\n  apiQuestionsReducer,\n  allAnswersReducer,\n  playersInfoReducer,\n  apiCategoriesReducer,\n  filtersReducer,\n});\n\nexport default rootReducer;\n","import { createStore, applyMiddleware, compose } from 'redux';\nimport logger from 'redux-logger';\nimport thunk from 'redux-thunk';\nimport rootReducer from '../reducers/index';\n\nconst composeEnhancer = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\n\nconst store = createStore(rootReducer, composeEnhancer(applyMiddleware(thunk, logger)));\n\nexport default store;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport App from './App';\n// import * as serviceWorker from './serviceWorker';\nimport store from './store/index';\nimport './index.css';\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById('root'),\n);\n","import React from 'react';\nimport { BrowserRouter, Switch, Route } from 'react-router-dom';\nimport LoginPage from './components/LoginPage/LoginPage';\n// eslint-disable-next-line import/no-named-as-default\nimport Feedback from './components/FeedbackPage/feedback';\nimport Settings from './components/SettingsPage/Settings';\nimport Ranking from './components/RankingPage/Ranking';\n// import './App.css';\nimport GameScreen from './components/GameScreen/GameScreen';\n// import './App.style.css';\n\nexport default function App() {\n  return (\n    <div>\n      <BrowserRouter>\n        <Switch>\n          <Route exact path=\"/game-screen\" component={GameScreen} />\n          <Route exact path=\"/feedback\" component={Feedback} />\n          <Route exact path=\"/\" component={LoginPage} />\n          <Route exact path=\"/Settings\" component={Settings} />\n          <Route exact path=\"/Ranking\" component={Ranking} />\n        </Switch>\n      </BrowserRouter>\n    </div>\n  );\n}\n","module.exports = __webpack_public_path__ + \"static/media/show-do-milh√£o.0181037e.png\";"],"sourceRoot":""}